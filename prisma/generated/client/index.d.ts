
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Asset
 * 
 */
export type Asset = $Result.DefaultSelection<Prisma.$AssetPayload>
/**
 * Model Category
 * 
 */
export type Category = $Result.DefaultSelection<Prisma.$CategoryPayload>
/**
 * Model CategoryClosure
 * 
 */
export type CategoryClosure = $Result.DefaultSelection<Prisma.$CategoryClosurePayload>
/**
 * Model InterventionRequest
 * 
 */
export type InterventionRequest = $Result.DefaultSelection<Prisma.$InterventionRequestPayload>
/**
 * Model TechnicianAssignement
 * 
 */
export type TechnicianAssignement = $Result.DefaultSelection<Prisma.$TechnicianAssignementPayload>
/**
 * Model Interventions
 * 
 */
export type Interventions = $Result.DefaultSelection<Prisma.$InterventionsPayload>
/**
 * Model Report
 * 
 */
export type Report = $Result.DefaultSelection<Prisma.$ReportPayload>
/**
 * Model Schedule
 * 
 */
export type Schedule = $Result.DefaultSelection<Prisma.$SchedulePayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Technician
 * 
 */
export type Technician = $Result.DefaultSelection<Prisma.$TechnicianPayload>
/**
 * Model Profession
 * 
 */
export type Profession = $Result.DefaultSelection<Prisma.$ProfessionPayload>
/**
 * Model TechnicianAvailability
 * 
 */
export type TechnicianAvailability = $Result.DefaultSelection<Prisma.$TechnicianAvailabilityPayload>
/**
 * Model Notification
 * 
 */
export type Notification = $Result.DefaultSelection<Prisma.$NotificationPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const AssetStatus: {
  OPERATIONAL: 'OPERATIONAL',
  UNDER_MAINTENANCE: 'UNDER_MAINTENANCE'
};

export type AssetStatus = (typeof AssetStatus)[keyof typeof AssetStatus]


export const AssetType: {
  SITE: 'SITE',
  EQUIPMENT: 'EQUIPMENT',
  ZONE: 'ZONE'
};

export type AssetType = (typeof AssetType)[keyof typeof AssetType]


export const Priority: {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH'
};

export type Priority = (typeof Priority)[keyof typeof Priority]


export const InterventionRequestStatus: {
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  OVERDUE: 'OVERDUE'
};

export type InterventionRequestStatus = (typeof InterventionRequestStatus)[keyof typeof InterventionRequestStatus]


export const OperationType: {
  CORRECTIVE: 'CORRECTIVE',
  PREVENTIVE: 'PREVENTIVE'
};

export type OperationType = (typeof OperationType)[keyof typeof OperationType]


export const ReportStatus: {
  PENDING: 'PENDING',
  ASSIGNED: 'ASSIGNED',
  CANCELED: 'CANCELED',
  TREATED: 'TREATED'
};

export type ReportStatus = (typeof ReportStatus)[keyof typeof ReportStatus]


export const Role: {
  STAFF: 'STAFF',
  TECHNICIAN: 'TECHNICIAN',
  ADMIN: 'ADMIN'
};

export type Role = (typeof Role)[keyof typeof Role]


export const Day: {
  SUNDAY: 'SUNDAY',
  MONDAY: 'MONDAY',
  TUESDAY: 'TUESDAY',
  WEDNESDAY: 'WEDNESDAY',
  THURSDAY: 'THURSDAY',
  FRIDAY: 'FRIDAY',
  SATURDAY: 'SATURDAY'
};

export type Day = (typeof Day)[keyof typeof Day]


export const ApprovalStatus: {
  UNSET: 'UNSET',
  PENDING: 'PENDING',
  VALIDATED: 'VALIDATED'
};

export type ApprovalStatus = (typeof ApprovalStatus)[keyof typeof ApprovalStatus]

}

export type AssetStatus = $Enums.AssetStatus

export const AssetStatus: typeof $Enums.AssetStatus

export type AssetType = $Enums.AssetType

export const AssetType: typeof $Enums.AssetType

export type Priority = $Enums.Priority

export const Priority: typeof $Enums.Priority

export type InterventionRequestStatus = $Enums.InterventionRequestStatus

export const InterventionRequestStatus: typeof $Enums.InterventionRequestStatus

export type OperationType = $Enums.OperationType

export const OperationType: typeof $Enums.OperationType

export type ReportStatus = $Enums.ReportStatus

export const ReportStatus: typeof $Enums.ReportStatus

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

export type Day = $Enums.Day

export const Day: typeof $Enums.Day

export type ApprovalStatus = $Enums.ApprovalStatus

export const ApprovalStatus: typeof $Enums.ApprovalStatus

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Assets
 * const assets = await prisma.asset.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Assets
   * const assets = await prisma.asset.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.asset`: Exposes CRUD operations for the **Asset** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Assets
    * const assets = await prisma.asset.findMany()
    * ```
    */
  get asset(): Prisma.AssetDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.category`: Exposes CRUD operations for the **Category** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.category.findMany()
    * ```
    */
  get category(): Prisma.CategoryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.categoryClosure`: Exposes CRUD operations for the **CategoryClosure** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CategoryClosures
    * const categoryClosures = await prisma.categoryClosure.findMany()
    * ```
    */
  get categoryClosure(): Prisma.CategoryClosureDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.interventionRequest`: Exposes CRUD operations for the **InterventionRequest** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more InterventionRequests
    * const interventionRequests = await prisma.interventionRequest.findMany()
    * ```
    */
  get interventionRequest(): Prisma.InterventionRequestDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.technicianAssignement`: Exposes CRUD operations for the **TechnicianAssignement** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TechnicianAssignements
    * const technicianAssignements = await prisma.technicianAssignement.findMany()
    * ```
    */
  get technicianAssignement(): Prisma.TechnicianAssignementDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.interventions`: Exposes CRUD operations for the **Interventions** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Interventions
    * const interventions = await prisma.interventions.findMany()
    * ```
    */
  get interventions(): Prisma.InterventionsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.report`: Exposes CRUD operations for the **Report** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Reports
    * const reports = await prisma.report.findMany()
    * ```
    */
  get report(): Prisma.ReportDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.schedule`: Exposes CRUD operations for the **Schedule** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Schedules
    * const schedules = await prisma.schedule.findMany()
    * ```
    */
  get schedule(): Prisma.ScheduleDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.technician`: Exposes CRUD operations for the **Technician** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Technicians
    * const technicians = await prisma.technician.findMany()
    * ```
    */
  get technician(): Prisma.TechnicianDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.profession`: Exposes CRUD operations for the **Profession** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Professions
    * const professions = await prisma.profession.findMany()
    * ```
    */
  get profession(): Prisma.ProfessionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.technicianAvailability`: Exposes CRUD operations for the **TechnicianAvailability** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TechnicianAvailabilities
    * const technicianAvailabilities = await prisma.technicianAvailability.findMany()
    * ```
    */
  get technicianAvailability(): Prisma.TechnicianAvailabilityDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.notification`: Exposes CRUD operations for the **Notification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notifications
    * const notifications = await prisma.notification.findMany()
    * ```
    */
  get notification(): Prisma.NotificationDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.6.0
   * Query Engine version: f676762280b54cd07c770017ed3711ddde35f37a
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Asset: 'Asset',
    Category: 'Category',
    CategoryClosure: 'CategoryClosure',
    InterventionRequest: 'InterventionRequest',
    TechnicianAssignement: 'TechnicianAssignement',
    Interventions: 'Interventions',
    Report: 'Report',
    Schedule: 'Schedule',
    User: 'User',
    Technician: 'Technician',
    Profession: 'Profession',
    TechnicianAvailability: 'TechnicianAvailability',
    Notification: 'Notification'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "asset" | "category" | "categoryClosure" | "interventionRequest" | "technicianAssignement" | "interventions" | "report" | "schedule" | "user" | "technician" | "profession" | "technicianAvailability" | "notification"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Asset: {
        payload: Prisma.$AssetPayload<ExtArgs>
        fields: Prisma.AssetFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AssetFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AssetFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetPayload>
          }
          findFirst: {
            args: Prisma.AssetFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AssetFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetPayload>
          }
          findMany: {
            args: Prisma.AssetFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetPayload>[]
          }
          create: {
            args: Prisma.AssetCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetPayload>
          }
          createMany: {
            args: Prisma.AssetCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AssetCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetPayload>[]
          }
          delete: {
            args: Prisma.AssetDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetPayload>
          }
          update: {
            args: Prisma.AssetUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetPayload>
          }
          deleteMany: {
            args: Prisma.AssetDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AssetUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AssetUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetPayload>[]
          }
          upsert: {
            args: Prisma.AssetUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetPayload>
          }
          aggregate: {
            args: Prisma.AssetAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAsset>
          }
          groupBy: {
            args: Prisma.AssetGroupByArgs<ExtArgs>
            result: $Utils.Optional<AssetGroupByOutputType>[]
          }
          count: {
            args: Prisma.AssetCountArgs<ExtArgs>
            result: $Utils.Optional<AssetCountAggregateOutputType> | number
          }
        }
      }
      Category: {
        payload: Prisma.$CategoryPayload<ExtArgs>
        fields: Prisma.CategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CategoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CategoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findFirst: {
            args: Prisma.CategoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CategoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findMany: {
            args: Prisma.CategoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          create: {
            args: Prisma.CategoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          createMany: {
            args: Prisma.CategoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CategoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          delete: {
            args: Prisma.CategoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          update: {
            args: Prisma.CategoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          deleteMany: {
            args: Prisma.CategoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CategoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CategoryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          upsert: {
            args: Prisma.CategoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          aggregate: {
            args: Prisma.CategoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCategory>
          }
          groupBy: {
            args: Prisma.CategoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<CategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.CategoryCountArgs<ExtArgs>
            result: $Utils.Optional<CategoryCountAggregateOutputType> | number
          }
        }
      }
      CategoryClosure: {
        payload: Prisma.$CategoryClosurePayload<ExtArgs>
        fields: Prisma.CategoryClosureFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CategoryClosureFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryClosurePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CategoryClosureFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryClosurePayload>
          }
          findFirst: {
            args: Prisma.CategoryClosureFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryClosurePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CategoryClosureFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryClosurePayload>
          }
          findMany: {
            args: Prisma.CategoryClosureFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryClosurePayload>[]
          }
          create: {
            args: Prisma.CategoryClosureCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryClosurePayload>
          }
          createMany: {
            args: Prisma.CategoryClosureCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CategoryClosureCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryClosurePayload>[]
          }
          delete: {
            args: Prisma.CategoryClosureDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryClosurePayload>
          }
          update: {
            args: Prisma.CategoryClosureUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryClosurePayload>
          }
          deleteMany: {
            args: Prisma.CategoryClosureDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CategoryClosureUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CategoryClosureUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryClosurePayload>[]
          }
          upsert: {
            args: Prisma.CategoryClosureUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryClosurePayload>
          }
          aggregate: {
            args: Prisma.CategoryClosureAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCategoryClosure>
          }
          groupBy: {
            args: Prisma.CategoryClosureGroupByArgs<ExtArgs>
            result: $Utils.Optional<CategoryClosureGroupByOutputType>[]
          }
          count: {
            args: Prisma.CategoryClosureCountArgs<ExtArgs>
            result: $Utils.Optional<CategoryClosureCountAggregateOutputType> | number
          }
        }
      }
      InterventionRequest: {
        payload: Prisma.$InterventionRequestPayload<ExtArgs>
        fields: Prisma.InterventionRequestFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InterventionRequestFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InterventionRequestPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InterventionRequestFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InterventionRequestPayload>
          }
          findFirst: {
            args: Prisma.InterventionRequestFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InterventionRequestPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InterventionRequestFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InterventionRequestPayload>
          }
          findMany: {
            args: Prisma.InterventionRequestFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InterventionRequestPayload>[]
          }
          create: {
            args: Prisma.InterventionRequestCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InterventionRequestPayload>
          }
          createMany: {
            args: Prisma.InterventionRequestCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.InterventionRequestCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InterventionRequestPayload>[]
          }
          delete: {
            args: Prisma.InterventionRequestDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InterventionRequestPayload>
          }
          update: {
            args: Prisma.InterventionRequestUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InterventionRequestPayload>
          }
          deleteMany: {
            args: Prisma.InterventionRequestDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InterventionRequestUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.InterventionRequestUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InterventionRequestPayload>[]
          }
          upsert: {
            args: Prisma.InterventionRequestUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InterventionRequestPayload>
          }
          aggregate: {
            args: Prisma.InterventionRequestAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInterventionRequest>
          }
          groupBy: {
            args: Prisma.InterventionRequestGroupByArgs<ExtArgs>
            result: $Utils.Optional<InterventionRequestGroupByOutputType>[]
          }
          count: {
            args: Prisma.InterventionRequestCountArgs<ExtArgs>
            result: $Utils.Optional<InterventionRequestCountAggregateOutputType> | number
          }
        }
      }
      TechnicianAssignement: {
        payload: Prisma.$TechnicianAssignementPayload<ExtArgs>
        fields: Prisma.TechnicianAssignementFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TechnicianAssignementFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TechnicianAssignementPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TechnicianAssignementFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TechnicianAssignementPayload>
          }
          findFirst: {
            args: Prisma.TechnicianAssignementFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TechnicianAssignementPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TechnicianAssignementFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TechnicianAssignementPayload>
          }
          findMany: {
            args: Prisma.TechnicianAssignementFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TechnicianAssignementPayload>[]
          }
          create: {
            args: Prisma.TechnicianAssignementCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TechnicianAssignementPayload>
          }
          createMany: {
            args: Prisma.TechnicianAssignementCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TechnicianAssignementCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TechnicianAssignementPayload>[]
          }
          delete: {
            args: Prisma.TechnicianAssignementDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TechnicianAssignementPayload>
          }
          update: {
            args: Prisma.TechnicianAssignementUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TechnicianAssignementPayload>
          }
          deleteMany: {
            args: Prisma.TechnicianAssignementDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TechnicianAssignementUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TechnicianAssignementUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TechnicianAssignementPayload>[]
          }
          upsert: {
            args: Prisma.TechnicianAssignementUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TechnicianAssignementPayload>
          }
          aggregate: {
            args: Prisma.TechnicianAssignementAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTechnicianAssignement>
          }
          groupBy: {
            args: Prisma.TechnicianAssignementGroupByArgs<ExtArgs>
            result: $Utils.Optional<TechnicianAssignementGroupByOutputType>[]
          }
          count: {
            args: Prisma.TechnicianAssignementCountArgs<ExtArgs>
            result: $Utils.Optional<TechnicianAssignementCountAggregateOutputType> | number
          }
        }
      }
      Interventions: {
        payload: Prisma.$InterventionsPayload<ExtArgs>
        fields: Prisma.InterventionsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InterventionsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InterventionsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InterventionsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InterventionsPayload>
          }
          findFirst: {
            args: Prisma.InterventionsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InterventionsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InterventionsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InterventionsPayload>
          }
          findMany: {
            args: Prisma.InterventionsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InterventionsPayload>[]
          }
          create: {
            args: Prisma.InterventionsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InterventionsPayload>
          }
          createMany: {
            args: Prisma.InterventionsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.InterventionsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InterventionsPayload>[]
          }
          delete: {
            args: Prisma.InterventionsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InterventionsPayload>
          }
          update: {
            args: Prisma.InterventionsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InterventionsPayload>
          }
          deleteMany: {
            args: Prisma.InterventionsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InterventionsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.InterventionsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InterventionsPayload>[]
          }
          upsert: {
            args: Prisma.InterventionsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InterventionsPayload>
          }
          aggregate: {
            args: Prisma.InterventionsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInterventions>
          }
          groupBy: {
            args: Prisma.InterventionsGroupByArgs<ExtArgs>
            result: $Utils.Optional<InterventionsGroupByOutputType>[]
          }
          count: {
            args: Prisma.InterventionsCountArgs<ExtArgs>
            result: $Utils.Optional<InterventionsCountAggregateOutputType> | number
          }
        }
      }
      Report: {
        payload: Prisma.$ReportPayload<ExtArgs>
        fields: Prisma.ReportFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReportFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReportFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>
          }
          findFirst: {
            args: Prisma.ReportFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReportFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>
          }
          findMany: {
            args: Prisma.ReportFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>[]
          }
          create: {
            args: Prisma.ReportCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>
          }
          createMany: {
            args: Prisma.ReportCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ReportCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>[]
          }
          delete: {
            args: Prisma.ReportDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>
          }
          update: {
            args: Prisma.ReportUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>
          }
          deleteMany: {
            args: Prisma.ReportDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReportUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ReportUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>[]
          }
          upsert: {
            args: Prisma.ReportUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>
          }
          aggregate: {
            args: Prisma.ReportAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReport>
          }
          groupBy: {
            args: Prisma.ReportGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReportGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReportCountArgs<ExtArgs>
            result: $Utils.Optional<ReportCountAggregateOutputType> | number
          }
        }
      }
      Schedule: {
        payload: Prisma.$SchedulePayload<ExtArgs>
        fields: Prisma.ScheduleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ScheduleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ScheduleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload>
          }
          findFirst: {
            args: Prisma.ScheduleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ScheduleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload>
          }
          findMany: {
            args: Prisma.ScheduleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload>[]
          }
          create: {
            args: Prisma.ScheduleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload>
          }
          createMany: {
            args: Prisma.ScheduleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ScheduleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload>[]
          }
          delete: {
            args: Prisma.ScheduleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload>
          }
          update: {
            args: Prisma.ScheduleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload>
          }
          deleteMany: {
            args: Prisma.ScheduleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ScheduleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ScheduleUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload>[]
          }
          upsert: {
            args: Prisma.ScheduleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload>
          }
          aggregate: {
            args: Prisma.ScheduleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSchedule>
          }
          groupBy: {
            args: Prisma.ScheduleGroupByArgs<ExtArgs>
            result: $Utils.Optional<ScheduleGroupByOutputType>[]
          }
          count: {
            args: Prisma.ScheduleCountArgs<ExtArgs>
            result: $Utils.Optional<ScheduleCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Technician: {
        payload: Prisma.$TechnicianPayload<ExtArgs>
        fields: Prisma.TechnicianFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TechnicianFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TechnicianPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TechnicianFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TechnicianPayload>
          }
          findFirst: {
            args: Prisma.TechnicianFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TechnicianPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TechnicianFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TechnicianPayload>
          }
          findMany: {
            args: Prisma.TechnicianFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TechnicianPayload>[]
          }
          create: {
            args: Prisma.TechnicianCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TechnicianPayload>
          }
          createMany: {
            args: Prisma.TechnicianCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TechnicianCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TechnicianPayload>[]
          }
          delete: {
            args: Prisma.TechnicianDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TechnicianPayload>
          }
          update: {
            args: Prisma.TechnicianUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TechnicianPayload>
          }
          deleteMany: {
            args: Prisma.TechnicianDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TechnicianUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TechnicianUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TechnicianPayload>[]
          }
          upsert: {
            args: Prisma.TechnicianUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TechnicianPayload>
          }
          aggregate: {
            args: Prisma.TechnicianAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTechnician>
          }
          groupBy: {
            args: Prisma.TechnicianGroupByArgs<ExtArgs>
            result: $Utils.Optional<TechnicianGroupByOutputType>[]
          }
          count: {
            args: Prisma.TechnicianCountArgs<ExtArgs>
            result: $Utils.Optional<TechnicianCountAggregateOutputType> | number
          }
        }
      }
      Profession: {
        payload: Prisma.$ProfessionPayload<ExtArgs>
        fields: Prisma.ProfessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProfessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProfessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionPayload>
          }
          findFirst: {
            args: Prisma.ProfessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProfessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionPayload>
          }
          findMany: {
            args: Prisma.ProfessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionPayload>[]
          }
          create: {
            args: Prisma.ProfessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionPayload>
          }
          createMany: {
            args: Prisma.ProfessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProfessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionPayload>[]
          }
          delete: {
            args: Prisma.ProfessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionPayload>
          }
          update: {
            args: Prisma.ProfessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionPayload>
          }
          deleteMany: {
            args: Prisma.ProfessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProfessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProfessionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionPayload>[]
          }
          upsert: {
            args: Prisma.ProfessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionPayload>
          }
          aggregate: {
            args: Prisma.ProfessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProfession>
          }
          groupBy: {
            args: Prisma.ProfessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProfessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProfessionCountArgs<ExtArgs>
            result: $Utils.Optional<ProfessionCountAggregateOutputType> | number
          }
        }
      }
      TechnicianAvailability: {
        payload: Prisma.$TechnicianAvailabilityPayload<ExtArgs>
        fields: Prisma.TechnicianAvailabilityFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TechnicianAvailabilityFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TechnicianAvailabilityPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TechnicianAvailabilityFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TechnicianAvailabilityPayload>
          }
          findFirst: {
            args: Prisma.TechnicianAvailabilityFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TechnicianAvailabilityPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TechnicianAvailabilityFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TechnicianAvailabilityPayload>
          }
          findMany: {
            args: Prisma.TechnicianAvailabilityFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TechnicianAvailabilityPayload>[]
          }
          create: {
            args: Prisma.TechnicianAvailabilityCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TechnicianAvailabilityPayload>
          }
          createMany: {
            args: Prisma.TechnicianAvailabilityCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TechnicianAvailabilityCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TechnicianAvailabilityPayload>[]
          }
          delete: {
            args: Prisma.TechnicianAvailabilityDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TechnicianAvailabilityPayload>
          }
          update: {
            args: Prisma.TechnicianAvailabilityUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TechnicianAvailabilityPayload>
          }
          deleteMany: {
            args: Prisma.TechnicianAvailabilityDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TechnicianAvailabilityUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TechnicianAvailabilityUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TechnicianAvailabilityPayload>[]
          }
          upsert: {
            args: Prisma.TechnicianAvailabilityUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TechnicianAvailabilityPayload>
          }
          aggregate: {
            args: Prisma.TechnicianAvailabilityAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTechnicianAvailability>
          }
          groupBy: {
            args: Prisma.TechnicianAvailabilityGroupByArgs<ExtArgs>
            result: $Utils.Optional<TechnicianAvailabilityGroupByOutputType>[]
          }
          count: {
            args: Prisma.TechnicianAvailabilityCountArgs<ExtArgs>
            result: $Utils.Optional<TechnicianAvailabilityCountAggregateOutputType> | number
          }
        }
      }
      Notification: {
        payload: Prisma.$NotificationPayload<ExtArgs>
        fields: Prisma.NotificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findFirst: {
            args: Prisma.NotificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findMany: {
            args: Prisma.NotificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          create: {
            args: Prisma.NotificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          createMany: {
            args: Prisma.NotificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NotificationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          delete: {
            args: Prisma.NotificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          update: {
            args: Prisma.NotificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          deleteMany: {
            args: Prisma.NotificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.NotificationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          upsert: {
            args: Prisma.NotificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          aggregate: {
            args: Prisma.NotificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNotification>
          }
          groupBy: {
            args: Prisma.NotificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<NotificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificationCountArgs<ExtArgs>
            result: $Utils.Optional<NotificationCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    asset?: AssetOmit
    category?: CategoryOmit
    categoryClosure?: CategoryClosureOmit
    interventionRequest?: InterventionRequestOmit
    technicianAssignement?: TechnicianAssignementOmit
    interventions?: InterventionsOmit
    report?: ReportOmit
    schedule?: ScheduleOmit
    user?: UserOmit
    technician?: TechnicianOmit
    profession?: ProfessionOmit
    technicianAvailability?: TechnicianAvailabilityOmit
    notification?: NotificationOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type AssetCountOutputType
   */

  export type AssetCountOutputType = {
    subAssets: number
    reports: number
    assignements: number
    schedules: number
  }

  export type AssetCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subAssets?: boolean | AssetCountOutputTypeCountSubAssetsArgs
    reports?: boolean | AssetCountOutputTypeCountReportsArgs
    assignements?: boolean | AssetCountOutputTypeCountAssignementsArgs
    schedules?: boolean | AssetCountOutputTypeCountSchedulesArgs
  }

  // Custom InputTypes
  /**
   * AssetCountOutputType without action
   */
  export type AssetCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetCountOutputType
     */
    select?: AssetCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AssetCountOutputType without action
   */
  export type AssetCountOutputTypeCountSubAssetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssetWhereInput
  }

  /**
   * AssetCountOutputType without action
   */
  export type AssetCountOutputTypeCountReportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReportWhereInput
  }

  /**
   * AssetCountOutputType without action
   */
  export type AssetCountOutputTypeCountAssignementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TechnicianAssignementWhereInput
  }

  /**
   * AssetCountOutputType without action
   */
  export type AssetCountOutputTypeCountSchedulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScheduleWhereInput
  }


  /**
   * Count Type CategoryCountOutputType
   */

  export type CategoryCountOutputType = {
    assets: number
    children: number
    Report: number
    ancestors: number
    descendants: number
    schedules: number
  }

  export type CategoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assets?: boolean | CategoryCountOutputTypeCountAssetsArgs
    children?: boolean | CategoryCountOutputTypeCountChildrenArgs
    Report?: boolean | CategoryCountOutputTypeCountReportArgs
    ancestors?: boolean | CategoryCountOutputTypeCountAncestorsArgs
    descendants?: boolean | CategoryCountOutputTypeCountDescendantsArgs
    schedules?: boolean | CategoryCountOutputTypeCountSchedulesArgs
  }

  // Custom InputTypes
  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryCountOutputType
     */
    select?: CategoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeCountAssetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssetWhereInput
  }

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeCountChildrenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoryWhereInput
  }

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeCountReportArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReportWhereInput
  }

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeCountAncestorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoryClosureWhereInput
  }

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeCountDescendantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoryClosureWhereInput
  }

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeCountSchedulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScheduleWhereInput
  }


  /**
   * Count Type InterventionRequestCountOutputType
   */

  export type InterventionRequestCountOutputType = {
    assignedTo: number
    Interventions: number
  }

  export type InterventionRequestCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assignedTo?: boolean | InterventionRequestCountOutputTypeCountAssignedToArgs
    Interventions?: boolean | InterventionRequestCountOutputTypeCountInterventionsArgs
  }

  // Custom InputTypes
  /**
   * InterventionRequestCountOutputType without action
   */
  export type InterventionRequestCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InterventionRequestCountOutputType
     */
    select?: InterventionRequestCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * InterventionRequestCountOutputType without action
   */
  export type InterventionRequestCountOutputTypeCountAssignedToArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TechnicianAssignementWhereInput
  }

  /**
   * InterventionRequestCountOutputType without action
   */
  export type InterventionRequestCountOutputTypeCountInterventionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InterventionsWhereInput
  }


  /**
   * Count Type ReportCountOutputType
   */

  export type ReportCountOutputType = {
    interventionRequests: number
  }

  export type ReportCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    interventionRequests?: boolean | ReportCountOutputTypeCountInterventionRequestsArgs
  }

  // Custom InputTypes
  /**
   * ReportCountOutputType without action
   */
  export type ReportCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportCountOutputType
     */
    select?: ReportCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ReportCountOutputType without action
   */
  export type ReportCountOutputTypeCountInterventionRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InterventionRequestWhereInput
  }


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    notifications: number
    reports: number
    interventionRequests: number
    createdSchedules: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    notifications?: boolean | UserCountOutputTypeCountNotificationsArgs
    reports?: boolean | UserCountOutputTypeCountReportsArgs
    interventionRequests?: boolean | UserCountOutputTypeCountInterventionRequestsArgs
    createdSchedules?: boolean | UserCountOutputTypeCountCreatedSchedulesArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReportWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountInterventionRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InterventionRequestWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedSchedulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScheduleWhereInput
  }


  /**
   * Count Type TechnicianCountOutputType
   */

  export type TechnicianCountOutputType = {
    availabilities: number
    TechnicianAssignements: number
    Interventions: number
  }

  export type TechnicianCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    availabilities?: boolean | TechnicianCountOutputTypeCountAvailabilitiesArgs
    TechnicianAssignements?: boolean | TechnicianCountOutputTypeCountTechnicianAssignementsArgs
    Interventions?: boolean | TechnicianCountOutputTypeCountInterventionsArgs
  }

  // Custom InputTypes
  /**
   * TechnicianCountOutputType without action
   */
  export type TechnicianCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TechnicianCountOutputType
     */
    select?: TechnicianCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TechnicianCountOutputType without action
   */
  export type TechnicianCountOutputTypeCountAvailabilitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TechnicianAvailabilityWhereInput
  }

  /**
   * TechnicianCountOutputType without action
   */
  export type TechnicianCountOutputTypeCountTechnicianAssignementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TechnicianAssignementWhereInput
  }

  /**
   * TechnicianCountOutputType without action
   */
  export type TechnicianCountOutputTypeCountInterventionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InterventionsWhereInput
  }


  /**
   * Count Type ProfessionCountOutputType
   */

  export type ProfessionCountOutputType = {
    technicians: number
  }

  export type ProfessionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    technicians?: boolean | ProfessionCountOutputTypeCountTechniciansArgs
  }

  // Custom InputTypes
  /**
   * ProfessionCountOutputType without action
   */
  export type ProfessionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionCountOutputType
     */
    select?: ProfessionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProfessionCountOutputType without action
   */
  export type ProfessionCountOutputTypeCountTechniciansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TechnicianWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Asset
   */

  export type AggregateAsset = {
    _count: AssetCountAggregateOutputType | null
    _avg: AssetAvgAggregateOutputType | null
    _sum: AssetSumAggregateOutputType | null
    _min: AssetMinAggregateOutputType | null
    _max: AssetMaxAggregateOutputType | null
  }

  export type AssetAvgAggregateOutputType = {
    id: number | null
    locationId: number | null
    categoryId: number | null
  }

  export type AssetSumAggregateOutputType = {
    id: number | null
    locationId: number | null
    categoryId: number | null
  }

  export type AssetMinAggregateOutputType = {
    id: number | null
    locationId: number | null
    categoryId: number | null
    name: string | null
    inventoryCode: string | null
    status: $Enums.AssetStatus | null
    type: $Enums.AssetType | null
    image: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AssetMaxAggregateOutputType = {
    id: number | null
    locationId: number | null
    categoryId: number | null
    name: string | null
    inventoryCode: string | null
    status: $Enums.AssetStatus | null
    type: $Enums.AssetType | null
    image: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AssetCountAggregateOutputType = {
    id: number
    locationId: number
    categoryId: number
    name: number
    inventoryCode: number
    status: number
    type: number
    image: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AssetAvgAggregateInputType = {
    id?: true
    locationId?: true
    categoryId?: true
  }

  export type AssetSumAggregateInputType = {
    id?: true
    locationId?: true
    categoryId?: true
  }

  export type AssetMinAggregateInputType = {
    id?: true
    locationId?: true
    categoryId?: true
    name?: true
    inventoryCode?: true
    status?: true
    type?: true
    image?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AssetMaxAggregateInputType = {
    id?: true
    locationId?: true
    categoryId?: true
    name?: true
    inventoryCode?: true
    status?: true
    type?: true
    image?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AssetCountAggregateInputType = {
    id?: true
    locationId?: true
    categoryId?: true
    name?: true
    inventoryCode?: true
    status?: true
    type?: true
    image?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AssetAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Asset to aggregate.
     */
    where?: AssetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Assets to fetch.
     */
    orderBy?: AssetOrderByWithRelationInput | AssetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AssetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Assets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Assets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Assets
    **/
    _count?: true | AssetCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AssetAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AssetSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AssetMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AssetMaxAggregateInputType
  }

  export type GetAssetAggregateType<T extends AssetAggregateArgs> = {
        [P in keyof T & keyof AggregateAsset]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAsset[P]>
      : GetScalarType<T[P], AggregateAsset[P]>
  }




  export type AssetGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssetWhereInput
    orderBy?: AssetOrderByWithAggregationInput | AssetOrderByWithAggregationInput[]
    by: AssetScalarFieldEnum[] | AssetScalarFieldEnum
    having?: AssetScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AssetCountAggregateInputType | true
    _avg?: AssetAvgAggregateInputType
    _sum?: AssetSumAggregateInputType
    _min?: AssetMinAggregateInputType
    _max?: AssetMaxAggregateInputType
  }

  export type AssetGroupByOutputType = {
    id: number
    locationId: number | null
    categoryId: number | null
    name: string
    inventoryCode: string
    status: $Enums.AssetStatus
    type: $Enums.AssetType
    image: string | null
    createdAt: Date
    updatedAt: Date
    _count: AssetCountAggregateOutputType | null
    _avg: AssetAvgAggregateOutputType | null
    _sum: AssetSumAggregateOutputType | null
    _min: AssetMinAggregateOutputType | null
    _max: AssetMaxAggregateOutputType | null
  }

  type GetAssetGroupByPayload<T extends AssetGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AssetGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AssetGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AssetGroupByOutputType[P]>
            : GetScalarType<T[P], AssetGroupByOutputType[P]>
        }
      >
    >


  export type AssetSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    locationId?: boolean
    categoryId?: boolean
    name?: boolean
    inventoryCode?: boolean
    status?: boolean
    type?: boolean
    image?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    subAssets?: boolean | Asset$subAssetsArgs<ExtArgs>
    reports?: boolean | Asset$reportsArgs<ExtArgs>
    assignements?: boolean | Asset$assignementsArgs<ExtArgs>
    location?: boolean | Asset$locationArgs<ExtArgs>
    category?: boolean | Asset$categoryArgs<ExtArgs>
    schedules?: boolean | Asset$schedulesArgs<ExtArgs>
    _count?: boolean | AssetCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["asset"]>

  export type AssetSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    locationId?: boolean
    categoryId?: boolean
    name?: boolean
    inventoryCode?: boolean
    status?: boolean
    type?: boolean
    image?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    location?: boolean | Asset$locationArgs<ExtArgs>
    category?: boolean | Asset$categoryArgs<ExtArgs>
  }, ExtArgs["result"]["asset"]>

  export type AssetSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    locationId?: boolean
    categoryId?: boolean
    name?: boolean
    inventoryCode?: boolean
    status?: boolean
    type?: boolean
    image?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    location?: boolean | Asset$locationArgs<ExtArgs>
    category?: boolean | Asset$categoryArgs<ExtArgs>
  }, ExtArgs["result"]["asset"]>

  export type AssetSelectScalar = {
    id?: boolean
    locationId?: boolean
    categoryId?: boolean
    name?: boolean
    inventoryCode?: boolean
    status?: boolean
    type?: boolean
    image?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AssetOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "locationId" | "categoryId" | "name" | "inventoryCode" | "status" | "type" | "image" | "createdAt" | "updatedAt", ExtArgs["result"]["asset"]>
  export type AssetInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subAssets?: boolean | Asset$subAssetsArgs<ExtArgs>
    reports?: boolean | Asset$reportsArgs<ExtArgs>
    assignements?: boolean | Asset$assignementsArgs<ExtArgs>
    location?: boolean | Asset$locationArgs<ExtArgs>
    category?: boolean | Asset$categoryArgs<ExtArgs>
    schedules?: boolean | Asset$schedulesArgs<ExtArgs>
    _count?: boolean | AssetCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AssetIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    location?: boolean | Asset$locationArgs<ExtArgs>
    category?: boolean | Asset$categoryArgs<ExtArgs>
  }
  export type AssetIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    location?: boolean | Asset$locationArgs<ExtArgs>
    category?: boolean | Asset$categoryArgs<ExtArgs>
  }

  export type $AssetPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Asset"
    objects: {
      subAssets: Prisma.$AssetPayload<ExtArgs>[]
      reports: Prisma.$ReportPayload<ExtArgs>[]
      assignements: Prisma.$TechnicianAssignementPayload<ExtArgs>[]
      location: Prisma.$AssetPayload<ExtArgs> | null
      category: Prisma.$CategoryPayload<ExtArgs> | null
      schedules: Prisma.$SchedulePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      locationId: number | null
      categoryId: number | null
      name: string
      inventoryCode: string
      status: $Enums.AssetStatus
      type: $Enums.AssetType
      image: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["asset"]>
    composites: {}
  }

  type AssetGetPayload<S extends boolean | null | undefined | AssetDefaultArgs> = $Result.GetResult<Prisma.$AssetPayload, S>

  type AssetCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AssetFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AssetCountAggregateInputType | true
    }

  export interface AssetDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Asset'], meta: { name: 'Asset' } }
    /**
     * Find zero or one Asset that matches the filter.
     * @param {AssetFindUniqueArgs} args - Arguments to find a Asset
     * @example
     * // Get one Asset
     * const asset = await prisma.asset.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AssetFindUniqueArgs>(args: SelectSubset<T, AssetFindUniqueArgs<ExtArgs>>): Prisma__AssetClient<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Asset that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AssetFindUniqueOrThrowArgs} args - Arguments to find a Asset
     * @example
     * // Get one Asset
     * const asset = await prisma.asset.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AssetFindUniqueOrThrowArgs>(args: SelectSubset<T, AssetFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AssetClient<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Asset that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetFindFirstArgs} args - Arguments to find a Asset
     * @example
     * // Get one Asset
     * const asset = await prisma.asset.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AssetFindFirstArgs>(args?: SelectSubset<T, AssetFindFirstArgs<ExtArgs>>): Prisma__AssetClient<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Asset that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetFindFirstOrThrowArgs} args - Arguments to find a Asset
     * @example
     * // Get one Asset
     * const asset = await prisma.asset.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AssetFindFirstOrThrowArgs>(args?: SelectSubset<T, AssetFindFirstOrThrowArgs<ExtArgs>>): Prisma__AssetClient<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Assets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Assets
     * const assets = await prisma.asset.findMany()
     * 
     * // Get first 10 Assets
     * const assets = await prisma.asset.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const assetWithIdOnly = await prisma.asset.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AssetFindManyArgs>(args?: SelectSubset<T, AssetFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Asset.
     * @param {AssetCreateArgs} args - Arguments to create a Asset.
     * @example
     * // Create one Asset
     * const Asset = await prisma.asset.create({
     *   data: {
     *     // ... data to create a Asset
     *   }
     * })
     * 
     */
    create<T extends AssetCreateArgs>(args: SelectSubset<T, AssetCreateArgs<ExtArgs>>): Prisma__AssetClient<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Assets.
     * @param {AssetCreateManyArgs} args - Arguments to create many Assets.
     * @example
     * // Create many Assets
     * const asset = await prisma.asset.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AssetCreateManyArgs>(args?: SelectSubset<T, AssetCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Assets and returns the data saved in the database.
     * @param {AssetCreateManyAndReturnArgs} args - Arguments to create many Assets.
     * @example
     * // Create many Assets
     * const asset = await prisma.asset.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Assets and only return the `id`
     * const assetWithIdOnly = await prisma.asset.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AssetCreateManyAndReturnArgs>(args?: SelectSubset<T, AssetCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Asset.
     * @param {AssetDeleteArgs} args - Arguments to delete one Asset.
     * @example
     * // Delete one Asset
     * const Asset = await prisma.asset.delete({
     *   where: {
     *     // ... filter to delete one Asset
     *   }
     * })
     * 
     */
    delete<T extends AssetDeleteArgs>(args: SelectSubset<T, AssetDeleteArgs<ExtArgs>>): Prisma__AssetClient<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Asset.
     * @param {AssetUpdateArgs} args - Arguments to update one Asset.
     * @example
     * // Update one Asset
     * const asset = await prisma.asset.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AssetUpdateArgs>(args: SelectSubset<T, AssetUpdateArgs<ExtArgs>>): Prisma__AssetClient<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Assets.
     * @param {AssetDeleteManyArgs} args - Arguments to filter Assets to delete.
     * @example
     * // Delete a few Assets
     * const { count } = await prisma.asset.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AssetDeleteManyArgs>(args?: SelectSubset<T, AssetDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Assets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Assets
     * const asset = await prisma.asset.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AssetUpdateManyArgs>(args: SelectSubset<T, AssetUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Assets and returns the data updated in the database.
     * @param {AssetUpdateManyAndReturnArgs} args - Arguments to update many Assets.
     * @example
     * // Update many Assets
     * const asset = await prisma.asset.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Assets and only return the `id`
     * const assetWithIdOnly = await prisma.asset.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AssetUpdateManyAndReturnArgs>(args: SelectSubset<T, AssetUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Asset.
     * @param {AssetUpsertArgs} args - Arguments to update or create a Asset.
     * @example
     * // Update or create a Asset
     * const asset = await prisma.asset.upsert({
     *   create: {
     *     // ... data to create a Asset
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Asset we want to update
     *   }
     * })
     */
    upsert<T extends AssetUpsertArgs>(args: SelectSubset<T, AssetUpsertArgs<ExtArgs>>): Prisma__AssetClient<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Assets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetCountArgs} args - Arguments to filter Assets to count.
     * @example
     * // Count the number of Assets
     * const count = await prisma.asset.count({
     *   where: {
     *     // ... the filter for the Assets we want to count
     *   }
     * })
    **/
    count<T extends AssetCountArgs>(
      args?: Subset<T, AssetCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AssetCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Asset.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AssetAggregateArgs>(args: Subset<T, AssetAggregateArgs>): Prisma.PrismaPromise<GetAssetAggregateType<T>>

    /**
     * Group by Asset.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AssetGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AssetGroupByArgs['orderBy'] }
        : { orderBy?: AssetGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AssetGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAssetGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Asset model
   */
  readonly fields: AssetFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Asset.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AssetClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    subAssets<T extends Asset$subAssetsArgs<ExtArgs> = {}>(args?: Subset<T, Asset$subAssetsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    reports<T extends Asset$reportsArgs<ExtArgs> = {}>(args?: Subset<T, Asset$reportsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    assignements<T extends Asset$assignementsArgs<ExtArgs> = {}>(args?: Subset<T, Asset$assignementsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TechnicianAssignementPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    location<T extends Asset$locationArgs<ExtArgs> = {}>(args?: Subset<T, Asset$locationArgs<ExtArgs>>): Prisma__AssetClient<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    category<T extends Asset$categoryArgs<ExtArgs> = {}>(args?: Subset<T, Asset$categoryArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    schedules<T extends Asset$schedulesArgs<ExtArgs> = {}>(args?: Subset<T, Asset$schedulesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Asset model
   */
  interface AssetFieldRefs {
    readonly id: FieldRef<"Asset", 'Int'>
    readonly locationId: FieldRef<"Asset", 'Int'>
    readonly categoryId: FieldRef<"Asset", 'Int'>
    readonly name: FieldRef<"Asset", 'String'>
    readonly inventoryCode: FieldRef<"Asset", 'String'>
    readonly status: FieldRef<"Asset", 'AssetStatus'>
    readonly type: FieldRef<"Asset", 'AssetType'>
    readonly image: FieldRef<"Asset", 'String'>
    readonly createdAt: FieldRef<"Asset", 'DateTime'>
    readonly updatedAt: FieldRef<"Asset", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Asset findUnique
   */
  export type AssetFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Asset
     */
    omit?: AssetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetInclude<ExtArgs> | null
    /**
     * Filter, which Asset to fetch.
     */
    where: AssetWhereUniqueInput
  }

  /**
   * Asset findUniqueOrThrow
   */
  export type AssetFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Asset
     */
    omit?: AssetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetInclude<ExtArgs> | null
    /**
     * Filter, which Asset to fetch.
     */
    where: AssetWhereUniqueInput
  }

  /**
   * Asset findFirst
   */
  export type AssetFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Asset
     */
    omit?: AssetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetInclude<ExtArgs> | null
    /**
     * Filter, which Asset to fetch.
     */
    where?: AssetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Assets to fetch.
     */
    orderBy?: AssetOrderByWithRelationInput | AssetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Assets.
     */
    cursor?: AssetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Assets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Assets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Assets.
     */
    distinct?: AssetScalarFieldEnum | AssetScalarFieldEnum[]
  }

  /**
   * Asset findFirstOrThrow
   */
  export type AssetFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Asset
     */
    omit?: AssetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetInclude<ExtArgs> | null
    /**
     * Filter, which Asset to fetch.
     */
    where?: AssetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Assets to fetch.
     */
    orderBy?: AssetOrderByWithRelationInput | AssetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Assets.
     */
    cursor?: AssetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Assets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Assets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Assets.
     */
    distinct?: AssetScalarFieldEnum | AssetScalarFieldEnum[]
  }

  /**
   * Asset findMany
   */
  export type AssetFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Asset
     */
    omit?: AssetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetInclude<ExtArgs> | null
    /**
     * Filter, which Assets to fetch.
     */
    where?: AssetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Assets to fetch.
     */
    orderBy?: AssetOrderByWithRelationInput | AssetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Assets.
     */
    cursor?: AssetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Assets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Assets.
     */
    skip?: number
    distinct?: AssetScalarFieldEnum | AssetScalarFieldEnum[]
  }

  /**
   * Asset create
   */
  export type AssetCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Asset
     */
    omit?: AssetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetInclude<ExtArgs> | null
    /**
     * The data needed to create a Asset.
     */
    data: XOR<AssetCreateInput, AssetUncheckedCreateInput>
  }

  /**
   * Asset createMany
   */
  export type AssetCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Assets.
     */
    data: AssetCreateManyInput | AssetCreateManyInput[]
  }

  /**
   * Asset createManyAndReturn
   */
  export type AssetCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Asset
     */
    omit?: AssetOmit<ExtArgs> | null
    /**
     * The data used to create many Assets.
     */
    data: AssetCreateManyInput | AssetCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Asset update
   */
  export type AssetUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Asset
     */
    omit?: AssetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetInclude<ExtArgs> | null
    /**
     * The data needed to update a Asset.
     */
    data: XOR<AssetUpdateInput, AssetUncheckedUpdateInput>
    /**
     * Choose, which Asset to update.
     */
    where: AssetWhereUniqueInput
  }

  /**
   * Asset updateMany
   */
  export type AssetUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Assets.
     */
    data: XOR<AssetUpdateManyMutationInput, AssetUncheckedUpdateManyInput>
    /**
     * Filter which Assets to update
     */
    where?: AssetWhereInput
    /**
     * Limit how many Assets to update.
     */
    limit?: number
  }

  /**
   * Asset updateManyAndReturn
   */
  export type AssetUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Asset
     */
    omit?: AssetOmit<ExtArgs> | null
    /**
     * The data used to update Assets.
     */
    data: XOR<AssetUpdateManyMutationInput, AssetUncheckedUpdateManyInput>
    /**
     * Filter which Assets to update
     */
    where?: AssetWhereInput
    /**
     * Limit how many Assets to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Asset upsert
   */
  export type AssetUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Asset
     */
    omit?: AssetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetInclude<ExtArgs> | null
    /**
     * The filter to search for the Asset to update in case it exists.
     */
    where: AssetWhereUniqueInput
    /**
     * In case the Asset found by the `where` argument doesn't exist, create a new Asset with this data.
     */
    create: XOR<AssetCreateInput, AssetUncheckedCreateInput>
    /**
     * In case the Asset was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AssetUpdateInput, AssetUncheckedUpdateInput>
  }

  /**
   * Asset delete
   */
  export type AssetDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Asset
     */
    omit?: AssetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetInclude<ExtArgs> | null
    /**
     * Filter which Asset to delete.
     */
    where: AssetWhereUniqueInput
  }

  /**
   * Asset deleteMany
   */
  export type AssetDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Assets to delete
     */
    where?: AssetWhereInput
    /**
     * Limit how many Assets to delete.
     */
    limit?: number
  }

  /**
   * Asset.subAssets
   */
  export type Asset$subAssetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Asset
     */
    omit?: AssetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetInclude<ExtArgs> | null
    where?: AssetWhereInput
    orderBy?: AssetOrderByWithRelationInput | AssetOrderByWithRelationInput[]
    cursor?: AssetWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AssetScalarFieldEnum | AssetScalarFieldEnum[]
  }

  /**
   * Asset.reports
   */
  export type Asset$reportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Report
     */
    omit?: ReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    where?: ReportWhereInput
    orderBy?: ReportOrderByWithRelationInput | ReportOrderByWithRelationInput[]
    cursor?: ReportWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReportScalarFieldEnum | ReportScalarFieldEnum[]
  }

  /**
   * Asset.assignements
   */
  export type Asset$assignementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TechnicianAssignement
     */
    select?: TechnicianAssignementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TechnicianAssignement
     */
    omit?: TechnicianAssignementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TechnicianAssignementInclude<ExtArgs> | null
    where?: TechnicianAssignementWhereInput
    orderBy?: TechnicianAssignementOrderByWithRelationInput | TechnicianAssignementOrderByWithRelationInput[]
    cursor?: TechnicianAssignementWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TechnicianAssignementScalarFieldEnum | TechnicianAssignementScalarFieldEnum[]
  }

  /**
   * Asset.location
   */
  export type Asset$locationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Asset
     */
    omit?: AssetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetInclude<ExtArgs> | null
    where?: AssetWhereInput
  }

  /**
   * Asset.category
   */
  export type Asset$categoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    where?: CategoryWhereInput
  }

  /**
   * Asset.schedules
   */
  export type Asset$schedulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Schedule
     */
    omit?: ScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    where?: ScheduleWhereInput
    orderBy?: ScheduleOrderByWithRelationInput | ScheduleOrderByWithRelationInput[]
    cursor?: ScheduleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ScheduleScalarFieldEnum | ScheduleScalarFieldEnum[]
  }

  /**
   * Asset without action
   */
  export type AssetDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Asset
     */
    omit?: AssetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetInclude<ExtArgs> | null
  }


  /**
   * Model Category
   */

  export type AggregateCategory = {
    _count: CategoryCountAggregateOutputType | null
    _avg: CategoryAvgAggregateOutputType | null
    _sum: CategorySumAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  export type CategoryAvgAggregateOutputType = {
    id: number | null
    parentId: number | null
  }

  export type CategorySumAggregateOutputType = {
    id: number | null
    parentId: number | null
  }

  export type CategoryMinAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    parentId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CategoryMaxAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    parentId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CategoryCountAggregateOutputType = {
    id: number
    name: number
    description: number
    parentId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CategoryAvgAggregateInputType = {
    id?: true
    parentId?: true
  }

  export type CategorySumAggregateInputType = {
    id?: true
    parentId?: true
  }

  export type CategoryMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    parentId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CategoryMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    parentId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CategoryCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    parentId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Category to aggregate.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Categories
    **/
    _count?: true | CategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoryMaxAggregateInputType
  }

  export type GetCategoryAggregateType<T extends CategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategory[P]>
      : GetScalarType<T[P], AggregateCategory[P]>
  }




  export type CategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoryWhereInput
    orderBy?: CategoryOrderByWithAggregationInput | CategoryOrderByWithAggregationInput[]
    by: CategoryScalarFieldEnum[] | CategoryScalarFieldEnum
    having?: CategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoryCountAggregateInputType | true
    _avg?: CategoryAvgAggregateInputType
    _sum?: CategorySumAggregateInputType
    _min?: CategoryMinAggregateInputType
    _max?: CategoryMaxAggregateInputType
  }

  export type CategoryGroupByOutputType = {
    id: number
    name: string
    description: string | null
    parentId: number | null
    createdAt: Date
    updatedAt: Date
    _count: CategoryCountAggregateOutputType | null
    _avg: CategoryAvgAggregateOutputType | null
    _sum: CategorySumAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  type GetCategoryGroupByPayload<T extends CategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoryGroupByOutputType[P]>
            : GetScalarType<T[P], CategoryGroupByOutputType[P]>
        }
      >
    >


  export type CategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    parentId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    assets?: boolean | Category$assetsArgs<ExtArgs>
    children?: boolean | Category$childrenArgs<ExtArgs>
    parent?: boolean | Category$parentArgs<ExtArgs>
    Report?: boolean | Category$ReportArgs<ExtArgs>
    ancestors?: boolean | Category$ancestorsArgs<ExtArgs>
    descendants?: boolean | Category$descendantsArgs<ExtArgs>
    schedules?: boolean | Category$schedulesArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["category"]>

  export type CategorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    parentId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    parent?: boolean | Category$parentArgs<ExtArgs>
  }, ExtArgs["result"]["category"]>

  export type CategorySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    parentId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    parent?: boolean | Category$parentArgs<ExtArgs>
  }, ExtArgs["result"]["category"]>

  export type CategorySelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    parentId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CategoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "parentId" | "createdAt" | "updatedAt", ExtArgs["result"]["category"]>
  export type CategoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assets?: boolean | Category$assetsArgs<ExtArgs>
    children?: boolean | Category$childrenArgs<ExtArgs>
    parent?: boolean | Category$parentArgs<ExtArgs>
    Report?: boolean | Category$ReportArgs<ExtArgs>
    ancestors?: boolean | Category$ancestorsArgs<ExtArgs>
    descendants?: boolean | Category$descendantsArgs<ExtArgs>
    schedules?: boolean | Category$schedulesArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CategoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parent?: boolean | Category$parentArgs<ExtArgs>
  }
  export type CategoryIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parent?: boolean | Category$parentArgs<ExtArgs>
  }

  export type $CategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Category"
    objects: {
      assets: Prisma.$AssetPayload<ExtArgs>[]
      children: Prisma.$CategoryPayload<ExtArgs>[]
      parent: Prisma.$CategoryPayload<ExtArgs> | null
      Report: Prisma.$ReportPayload<ExtArgs>[]
      ancestors: Prisma.$CategoryClosurePayload<ExtArgs>[]
      descendants: Prisma.$CategoryClosurePayload<ExtArgs>[]
      schedules: Prisma.$SchedulePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      description: string | null
      parentId: number | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["category"]>
    composites: {}
  }

  type CategoryGetPayload<S extends boolean | null | undefined | CategoryDefaultArgs> = $Result.GetResult<Prisma.$CategoryPayload, S>

  type CategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CategoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CategoryCountAggregateInputType | true
    }

  export interface CategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Category'], meta: { name: 'Category' } }
    /**
     * Find zero or one Category that matches the filter.
     * @param {CategoryFindUniqueArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CategoryFindUniqueArgs>(args: SelectSubset<T, CategoryFindUniqueArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Category that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CategoryFindUniqueOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CategoryFindUniqueOrThrowArgs>(args: SelectSubset<T, CategoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Category that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CategoryFindFirstArgs>(args?: SelectSubset<T, CategoryFindFirstArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Category that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CategoryFindFirstOrThrowArgs>(args?: SelectSubset<T, CategoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.category.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.category.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoryWithIdOnly = await prisma.category.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CategoryFindManyArgs>(args?: SelectSubset<T, CategoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Category.
     * @param {CategoryCreateArgs} args - Arguments to create a Category.
     * @example
     * // Create one Category
     * const Category = await prisma.category.create({
     *   data: {
     *     // ... data to create a Category
     *   }
     * })
     * 
     */
    create<T extends CategoryCreateArgs>(args: SelectSubset<T, CategoryCreateArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Categories.
     * @param {CategoryCreateManyArgs} args - Arguments to create many Categories.
     * @example
     * // Create many Categories
     * const category = await prisma.category.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CategoryCreateManyArgs>(args?: SelectSubset<T, CategoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Categories and returns the data saved in the database.
     * @param {CategoryCreateManyAndReturnArgs} args - Arguments to create many Categories.
     * @example
     * // Create many Categories
     * const category = await prisma.category.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Categories and only return the `id`
     * const categoryWithIdOnly = await prisma.category.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CategoryCreateManyAndReturnArgs>(args?: SelectSubset<T, CategoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Category.
     * @param {CategoryDeleteArgs} args - Arguments to delete one Category.
     * @example
     * // Delete one Category
     * const Category = await prisma.category.delete({
     *   where: {
     *     // ... filter to delete one Category
     *   }
     * })
     * 
     */
    delete<T extends CategoryDeleteArgs>(args: SelectSubset<T, CategoryDeleteArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Category.
     * @param {CategoryUpdateArgs} args - Arguments to update one Category.
     * @example
     * // Update one Category
     * const category = await prisma.category.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CategoryUpdateArgs>(args: SelectSubset<T, CategoryUpdateArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Categories.
     * @param {CategoryDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.category.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CategoryDeleteManyArgs>(args?: SelectSubset<T, CategoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CategoryUpdateManyArgs>(args: SelectSubset<T, CategoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories and returns the data updated in the database.
     * @param {CategoryUpdateManyAndReturnArgs} args - Arguments to update many Categories.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Categories and only return the `id`
     * const categoryWithIdOnly = await prisma.category.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CategoryUpdateManyAndReturnArgs>(args: SelectSubset<T, CategoryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Category.
     * @param {CategoryUpsertArgs} args - Arguments to update or create a Category.
     * @example
     * // Update or create a Category
     * const category = await prisma.category.upsert({
     *   create: {
     *     // ... data to create a Category
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Category we want to update
     *   }
     * })
     */
    upsert<T extends CategoryUpsertArgs>(args: SelectSubset<T, CategoryUpsertArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.category.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends CategoryCountArgs>(
      args?: Subset<T, CategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoryAggregateArgs>(args: Subset<T, CategoryAggregateArgs>): Prisma.PrismaPromise<GetCategoryAggregateType<T>>

    /**
     * Group by Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoryGroupByArgs['orderBy'] }
        : { orderBy?: CategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Category model
   */
  readonly fields: CategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Category.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    assets<T extends Category$assetsArgs<ExtArgs> = {}>(args?: Subset<T, Category$assetsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    children<T extends Category$childrenArgs<ExtArgs> = {}>(args?: Subset<T, Category$childrenArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    parent<T extends Category$parentArgs<ExtArgs> = {}>(args?: Subset<T, Category$parentArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    Report<T extends Category$ReportArgs<ExtArgs> = {}>(args?: Subset<T, Category$ReportArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    ancestors<T extends Category$ancestorsArgs<ExtArgs> = {}>(args?: Subset<T, Category$ancestorsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryClosurePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    descendants<T extends Category$descendantsArgs<ExtArgs> = {}>(args?: Subset<T, Category$descendantsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryClosurePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    schedules<T extends Category$schedulesArgs<ExtArgs> = {}>(args?: Subset<T, Category$schedulesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Category model
   */
  interface CategoryFieldRefs {
    readonly id: FieldRef<"Category", 'Int'>
    readonly name: FieldRef<"Category", 'String'>
    readonly description: FieldRef<"Category", 'String'>
    readonly parentId: FieldRef<"Category", 'Int'>
    readonly createdAt: FieldRef<"Category", 'DateTime'>
    readonly updatedAt: FieldRef<"Category", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Category findUnique
   */
  export type CategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category findUniqueOrThrow
   */
  export type CategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category findFirst
   */
  export type CategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category findFirstOrThrow
   */
  export type CategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category findMany
   */
  export type CategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Categories to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category create
   */
  export type CategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a Category.
     */
    data: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
  }

  /**
   * Category createMany
   */
  export type CategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Categories.
     */
    data: CategoryCreateManyInput | CategoryCreateManyInput[]
  }

  /**
   * Category createManyAndReturn
   */
  export type CategoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * The data used to create many Categories.
     */
    data: CategoryCreateManyInput | CategoryCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Category update
   */
  export type CategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a Category.
     */
    data: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
    /**
     * Choose, which Category to update.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category updateMany
   */
  export type CategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Categories.
     */
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyInput>
    /**
     * Filter which Categories to update
     */
    where?: CategoryWhereInput
    /**
     * Limit how many Categories to update.
     */
    limit?: number
  }

  /**
   * Category updateManyAndReturn
   */
  export type CategoryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * The data used to update Categories.
     */
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyInput>
    /**
     * Filter which Categories to update
     */
    where?: CategoryWhereInput
    /**
     * Limit how many Categories to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Category upsert
   */
  export type CategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the Category to update in case it exists.
     */
    where: CategoryWhereUniqueInput
    /**
     * In case the Category found by the `where` argument doesn't exist, create a new Category with this data.
     */
    create: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
    /**
     * In case the Category was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
  }

  /**
   * Category delete
   */
  export type CategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter which Category to delete.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category deleteMany
   */
  export type CategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Categories to delete
     */
    where?: CategoryWhereInput
    /**
     * Limit how many Categories to delete.
     */
    limit?: number
  }

  /**
   * Category.assets
   */
  export type Category$assetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Asset
     */
    omit?: AssetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetInclude<ExtArgs> | null
    where?: AssetWhereInput
    orderBy?: AssetOrderByWithRelationInput | AssetOrderByWithRelationInput[]
    cursor?: AssetWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AssetScalarFieldEnum | AssetScalarFieldEnum[]
  }

  /**
   * Category.children
   */
  export type Category$childrenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    where?: CategoryWhereInput
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    cursor?: CategoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category.parent
   */
  export type Category$parentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    where?: CategoryWhereInput
  }

  /**
   * Category.Report
   */
  export type Category$ReportArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Report
     */
    omit?: ReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    where?: ReportWhereInput
    orderBy?: ReportOrderByWithRelationInput | ReportOrderByWithRelationInput[]
    cursor?: ReportWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReportScalarFieldEnum | ReportScalarFieldEnum[]
  }

  /**
   * Category.ancestors
   */
  export type Category$ancestorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryClosure
     */
    select?: CategoryClosureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CategoryClosure
     */
    omit?: CategoryClosureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryClosureInclude<ExtArgs> | null
    where?: CategoryClosureWhereInput
    orderBy?: CategoryClosureOrderByWithRelationInput | CategoryClosureOrderByWithRelationInput[]
    cursor?: CategoryClosureWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CategoryClosureScalarFieldEnum | CategoryClosureScalarFieldEnum[]
  }

  /**
   * Category.descendants
   */
  export type Category$descendantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryClosure
     */
    select?: CategoryClosureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CategoryClosure
     */
    omit?: CategoryClosureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryClosureInclude<ExtArgs> | null
    where?: CategoryClosureWhereInput
    orderBy?: CategoryClosureOrderByWithRelationInput | CategoryClosureOrderByWithRelationInput[]
    cursor?: CategoryClosureWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CategoryClosureScalarFieldEnum | CategoryClosureScalarFieldEnum[]
  }

  /**
   * Category.schedules
   */
  export type Category$schedulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Schedule
     */
    omit?: ScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    where?: ScheduleWhereInput
    orderBy?: ScheduleOrderByWithRelationInput | ScheduleOrderByWithRelationInput[]
    cursor?: ScheduleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ScheduleScalarFieldEnum | ScheduleScalarFieldEnum[]
  }

  /**
   * Category without action
   */
  export type CategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
  }


  /**
   * Model CategoryClosure
   */

  export type AggregateCategoryClosure = {
    _count: CategoryClosureCountAggregateOutputType | null
    _avg: CategoryClosureAvgAggregateOutputType | null
    _sum: CategoryClosureSumAggregateOutputType | null
    _min: CategoryClosureMinAggregateOutputType | null
    _max: CategoryClosureMaxAggregateOutputType | null
  }

  export type CategoryClosureAvgAggregateOutputType = {
    ancestorId: number | null
    descendantId: number | null
    depth: number | null
  }

  export type CategoryClosureSumAggregateOutputType = {
    ancestorId: number | null
    descendantId: number | null
    depth: number | null
  }

  export type CategoryClosureMinAggregateOutputType = {
    ancestorId: number | null
    descendantId: number | null
    depth: number | null
  }

  export type CategoryClosureMaxAggregateOutputType = {
    ancestorId: number | null
    descendantId: number | null
    depth: number | null
  }

  export type CategoryClosureCountAggregateOutputType = {
    ancestorId: number
    descendantId: number
    depth: number
    _all: number
  }


  export type CategoryClosureAvgAggregateInputType = {
    ancestorId?: true
    descendantId?: true
    depth?: true
  }

  export type CategoryClosureSumAggregateInputType = {
    ancestorId?: true
    descendantId?: true
    depth?: true
  }

  export type CategoryClosureMinAggregateInputType = {
    ancestorId?: true
    descendantId?: true
    depth?: true
  }

  export type CategoryClosureMaxAggregateInputType = {
    ancestorId?: true
    descendantId?: true
    depth?: true
  }

  export type CategoryClosureCountAggregateInputType = {
    ancestorId?: true
    descendantId?: true
    depth?: true
    _all?: true
  }

  export type CategoryClosureAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CategoryClosure to aggregate.
     */
    where?: CategoryClosureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CategoryClosures to fetch.
     */
    orderBy?: CategoryClosureOrderByWithRelationInput | CategoryClosureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CategoryClosureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CategoryClosures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CategoryClosures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CategoryClosures
    **/
    _count?: true | CategoryClosureCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategoryClosureAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategoryClosureSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoryClosureMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoryClosureMaxAggregateInputType
  }

  export type GetCategoryClosureAggregateType<T extends CategoryClosureAggregateArgs> = {
        [P in keyof T & keyof AggregateCategoryClosure]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategoryClosure[P]>
      : GetScalarType<T[P], AggregateCategoryClosure[P]>
  }




  export type CategoryClosureGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoryClosureWhereInput
    orderBy?: CategoryClosureOrderByWithAggregationInput | CategoryClosureOrderByWithAggregationInput[]
    by: CategoryClosureScalarFieldEnum[] | CategoryClosureScalarFieldEnum
    having?: CategoryClosureScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoryClosureCountAggregateInputType | true
    _avg?: CategoryClosureAvgAggregateInputType
    _sum?: CategoryClosureSumAggregateInputType
    _min?: CategoryClosureMinAggregateInputType
    _max?: CategoryClosureMaxAggregateInputType
  }

  export type CategoryClosureGroupByOutputType = {
    ancestorId: number
    descendantId: number
    depth: number
    _count: CategoryClosureCountAggregateOutputType | null
    _avg: CategoryClosureAvgAggregateOutputType | null
    _sum: CategoryClosureSumAggregateOutputType | null
    _min: CategoryClosureMinAggregateOutputType | null
    _max: CategoryClosureMaxAggregateOutputType | null
  }

  type GetCategoryClosureGroupByPayload<T extends CategoryClosureGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoryClosureGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoryClosureGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoryClosureGroupByOutputType[P]>
            : GetScalarType<T[P], CategoryClosureGroupByOutputType[P]>
        }
      >
    >


  export type CategoryClosureSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    ancestorId?: boolean
    descendantId?: boolean
    depth?: boolean
    ancestor?: boolean | CategoryDefaultArgs<ExtArgs>
    descendant?: boolean | CategoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["categoryClosure"]>

  export type CategoryClosureSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    ancestorId?: boolean
    descendantId?: boolean
    depth?: boolean
    ancestor?: boolean | CategoryDefaultArgs<ExtArgs>
    descendant?: boolean | CategoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["categoryClosure"]>

  export type CategoryClosureSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    ancestorId?: boolean
    descendantId?: boolean
    depth?: boolean
    ancestor?: boolean | CategoryDefaultArgs<ExtArgs>
    descendant?: boolean | CategoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["categoryClosure"]>

  export type CategoryClosureSelectScalar = {
    ancestorId?: boolean
    descendantId?: boolean
    depth?: boolean
  }

  export type CategoryClosureOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"ancestorId" | "descendantId" | "depth", ExtArgs["result"]["categoryClosure"]>
  export type CategoryClosureInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ancestor?: boolean | CategoryDefaultArgs<ExtArgs>
    descendant?: boolean | CategoryDefaultArgs<ExtArgs>
  }
  export type CategoryClosureIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ancestor?: boolean | CategoryDefaultArgs<ExtArgs>
    descendant?: boolean | CategoryDefaultArgs<ExtArgs>
  }
  export type CategoryClosureIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ancestor?: boolean | CategoryDefaultArgs<ExtArgs>
    descendant?: boolean | CategoryDefaultArgs<ExtArgs>
  }

  export type $CategoryClosurePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CategoryClosure"
    objects: {
      ancestor: Prisma.$CategoryPayload<ExtArgs>
      descendant: Prisma.$CategoryPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      ancestorId: number
      descendantId: number
      depth: number
    }, ExtArgs["result"]["categoryClosure"]>
    composites: {}
  }

  type CategoryClosureGetPayload<S extends boolean | null | undefined | CategoryClosureDefaultArgs> = $Result.GetResult<Prisma.$CategoryClosurePayload, S>

  type CategoryClosureCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CategoryClosureFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CategoryClosureCountAggregateInputType | true
    }

  export interface CategoryClosureDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CategoryClosure'], meta: { name: 'CategoryClosure' } }
    /**
     * Find zero or one CategoryClosure that matches the filter.
     * @param {CategoryClosureFindUniqueArgs} args - Arguments to find a CategoryClosure
     * @example
     * // Get one CategoryClosure
     * const categoryClosure = await prisma.categoryClosure.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CategoryClosureFindUniqueArgs>(args: SelectSubset<T, CategoryClosureFindUniqueArgs<ExtArgs>>): Prisma__CategoryClosureClient<$Result.GetResult<Prisma.$CategoryClosurePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CategoryClosure that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CategoryClosureFindUniqueOrThrowArgs} args - Arguments to find a CategoryClosure
     * @example
     * // Get one CategoryClosure
     * const categoryClosure = await prisma.categoryClosure.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CategoryClosureFindUniqueOrThrowArgs>(args: SelectSubset<T, CategoryClosureFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CategoryClosureClient<$Result.GetResult<Prisma.$CategoryClosurePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CategoryClosure that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryClosureFindFirstArgs} args - Arguments to find a CategoryClosure
     * @example
     * // Get one CategoryClosure
     * const categoryClosure = await prisma.categoryClosure.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CategoryClosureFindFirstArgs>(args?: SelectSubset<T, CategoryClosureFindFirstArgs<ExtArgs>>): Prisma__CategoryClosureClient<$Result.GetResult<Prisma.$CategoryClosurePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CategoryClosure that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryClosureFindFirstOrThrowArgs} args - Arguments to find a CategoryClosure
     * @example
     * // Get one CategoryClosure
     * const categoryClosure = await prisma.categoryClosure.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CategoryClosureFindFirstOrThrowArgs>(args?: SelectSubset<T, CategoryClosureFindFirstOrThrowArgs<ExtArgs>>): Prisma__CategoryClosureClient<$Result.GetResult<Prisma.$CategoryClosurePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CategoryClosures that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryClosureFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CategoryClosures
     * const categoryClosures = await prisma.categoryClosure.findMany()
     * 
     * // Get first 10 CategoryClosures
     * const categoryClosures = await prisma.categoryClosure.findMany({ take: 10 })
     * 
     * // Only select the `ancestorId`
     * const categoryClosureWithAncestorIdOnly = await prisma.categoryClosure.findMany({ select: { ancestorId: true } })
     * 
     */
    findMany<T extends CategoryClosureFindManyArgs>(args?: SelectSubset<T, CategoryClosureFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryClosurePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CategoryClosure.
     * @param {CategoryClosureCreateArgs} args - Arguments to create a CategoryClosure.
     * @example
     * // Create one CategoryClosure
     * const CategoryClosure = await prisma.categoryClosure.create({
     *   data: {
     *     // ... data to create a CategoryClosure
     *   }
     * })
     * 
     */
    create<T extends CategoryClosureCreateArgs>(args: SelectSubset<T, CategoryClosureCreateArgs<ExtArgs>>): Prisma__CategoryClosureClient<$Result.GetResult<Prisma.$CategoryClosurePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CategoryClosures.
     * @param {CategoryClosureCreateManyArgs} args - Arguments to create many CategoryClosures.
     * @example
     * // Create many CategoryClosures
     * const categoryClosure = await prisma.categoryClosure.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CategoryClosureCreateManyArgs>(args?: SelectSubset<T, CategoryClosureCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CategoryClosures and returns the data saved in the database.
     * @param {CategoryClosureCreateManyAndReturnArgs} args - Arguments to create many CategoryClosures.
     * @example
     * // Create many CategoryClosures
     * const categoryClosure = await prisma.categoryClosure.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CategoryClosures and only return the `ancestorId`
     * const categoryClosureWithAncestorIdOnly = await prisma.categoryClosure.createManyAndReturn({
     *   select: { ancestorId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CategoryClosureCreateManyAndReturnArgs>(args?: SelectSubset<T, CategoryClosureCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryClosurePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CategoryClosure.
     * @param {CategoryClosureDeleteArgs} args - Arguments to delete one CategoryClosure.
     * @example
     * // Delete one CategoryClosure
     * const CategoryClosure = await prisma.categoryClosure.delete({
     *   where: {
     *     // ... filter to delete one CategoryClosure
     *   }
     * })
     * 
     */
    delete<T extends CategoryClosureDeleteArgs>(args: SelectSubset<T, CategoryClosureDeleteArgs<ExtArgs>>): Prisma__CategoryClosureClient<$Result.GetResult<Prisma.$CategoryClosurePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CategoryClosure.
     * @param {CategoryClosureUpdateArgs} args - Arguments to update one CategoryClosure.
     * @example
     * // Update one CategoryClosure
     * const categoryClosure = await prisma.categoryClosure.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CategoryClosureUpdateArgs>(args: SelectSubset<T, CategoryClosureUpdateArgs<ExtArgs>>): Prisma__CategoryClosureClient<$Result.GetResult<Prisma.$CategoryClosurePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CategoryClosures.
     * @param {CategoryClosureDeleteManyArgs} args - Arguments to filter CategoryClosures to delete.
     * @example
     * // Delete a few CategoryClosures
     * const { count } = await prisma.categoryClosure.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CategoryClosureDeleteManyArgs>(args?: SelectSubset<T, CategoryClosureDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CategoryClosures.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryClosureUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CategoryClosures
     * const categoryClosure = await prisma.categoryClosure.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CategoryClosureUpdateManyArgs>(args: SelectSubset<T, CategoryClosureUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CategoryClosures and returns the data updated in the database.
     * @param {CategoryClosureUpdateManyAndReturnArgs} args - Arguments to update many CategoryClosures.
     * @example
     * // Update many CategoryClosures
     * const categoryClosure = await prisma.categoryClosure.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CategoryClosures and only return the `ancestorId`
     * const categoryClosureWithAncestorIdOnly = await prisma.categoryClosure.updateManyAndReturn({
     *   select: { ancestorId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CategoryClosureUpdateManyAndReturnArgs>(args: SelectSubset<T, CategoryClosureUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryClosurePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CategoryClosure.
     * @param {CategoryClosureUpsertArgs} args - Arguments to update or create a CategoryClosure.
     * @example
     * // Update or create a CategoryClosure
     * const categoryClosure = await prisma.categoryClosure.upsert({
     *   create: {
     *     // ... data to create a CategoryClosure
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CategoryClosure we want to update
     *   }
     * })
     */
    upsert<T extends CategoryClosureUpsertArgs>(args: SelectSubset<T, CategoryClosureUpsertArgs<ExtArgs>>): Prisma__CategoryClosureClient<$Result.GetResult<Prisma.$CategoryClosurePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CategoryClosures.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryClosureCountArgs} args - Arguments to filter CategoryClosures to count.
     * @example
     * // Count the number of CategoryClosures
     * const count = await prisma.categoryClosure.count({
     *   where: {
     *     // ... the filter for the CategoryClosures we want to count
     *   }
     * })
    **/
    count<T extends CategoryClosureCountArgs>(
      args?: Subset<T, CategoryClosureCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoryClosureCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CategoryClosure.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryClosureAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoryClosureAggregateArgs>(args: Subset<T, CategoryClosureAggregateArgs>): Prisma.PrismaPromise<GetCategoryClosureAggregateType<T>>

    /**
     * Group by CategoryClosure.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryClosureGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoryClosureGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoryClosureGroupByArgs['orderBy'] }
        : { orderBy?: CategoryClosureGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoryClosureGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoryClosureGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CategoryClosure model
   */
  readonly fields: CategoryClosureFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CategoryClosure.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CategoryClosureClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    ancestor<T extends CategoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CategoryDefaultArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    descendant<T extends CategoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CategoryDefaultArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CategoryClosure model
   */
  interface CategoryClosureFieldRefs {
    readonly ancestorId: FieldRef<"CategoryClosure", 'Int'>
    readonly descendantId: FieldRef<"CategoryClosure", 'Int'>
    readonly depth: FieldRef<"CategoryClosure", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * CategoryClosure findUnique
   */
  export type CategoryClosureFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryClosure
     */
    select?: CategoryClosureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CategoryClosure
     */
    omit?: CategoryClosureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryClosureInclude<ExtArgs> | null
    /**
     * Filter, which CategoryClosure to fetch.
     */
    where: CategoryClosureWhereUniqueInput
  }

  /**
   * CategoryClosure findUniqueOrThrow
   */
  export type CategoryClosureFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryClosure
     */
    select?: CategoryClosureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CategoryClosure
     */
    omit?: CategoryClosureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryClosureInclude<ExtArgs> | null
    /**
     * Filter, which CategoryClosure to fetch.
     */
    where: CategoryClosureWhereUniqueInput
  }

  /**
   * CategoryClosure findFirst
   */
  export type CategoryClosureFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryClosure
     */
    select?: CategoryClosureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CategoryClosure
     */
    omit?: CategoryClosureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryClosureInclude<ExtArgs> | null
    /**
     * Filter, which CategoryClosure to fetch.
     */
    where?: CategoryClosureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CategoryClosures to fetch.
     */
    orderBy?: CategoryClosureOrderByWithRelationInput | CategoryClosureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CategoryClosures.
     */
    cursor?: CategoryClosureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CategoryClosures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CategoryClosures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CategoryClosures.
     */
    distinct?: CategoryClosureScalarFieldEnum | CategoryClosureScalarFieldEnum[]
  }

  /**
   * CategoryClosure findFirstOrThrow
   */
  export type CategoryClosureFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryClosure
     */
    select?: CategoryClosureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CategoryClosure
     */
    omit?: CategoryClosureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryClosureInclude<ExtArgs> | null
    /**
     * Filter, which CategoryClosure to fetch.
     */
    where?: CategoryClosureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CategoryClosures to fetch.
     */
    orderBy?: CategoryClosureOrderByWithRelationInput | CategoryClosureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CategoryClosures.
     */
    cursor?: CategoryClosureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CategoryClosures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CategoryClosures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CategoryClosures.
     */
    distinct?: CategoryClosureScalarFieldEnum | CategoryClosureScalarFieldEnum[]
  }

  /**
   * CategoryClosure findMany
   */
  export type CategoryClosureFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryClosure
     */
    select?: CategoryClosureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CategoryClosure
     */
    omit?: CategoryClosureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryClosureInclude<ExtArgs> | null
    /**
     * Filter, which CategoryClosures to fetch.
     */
    where?: CategoryClosureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CategoryClosures to fetch.
     */
    orderBy?: CategoryClosureOrderByWithRelationInput | CategoryClosureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CategoryClosures.
     */
    cursor?: CategoryClosureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CategoryClosures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CategoryClosures.
     */
    skip?: number
    distinct?: CategoryClosureScalarFieldEnum | CategoryClosureScalarFieldEnum[]
  }

  /**
   * CategoryClosure create
   */
  export type CategoryClosureCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryClosure
     */
    select?: CategoryClosureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CategoryClosure
     */
    omit?: CategoryClosureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryClosureInclude<ExtArgs> | null
    /**
     * The data needed to create a CategoryClosure.
     */
    data: XOR<CategoryClosureCreateInput, CategoryClosureUncheckedCreateInput>
  }

  /**
   * CategoryClosure createMany
   */
  export type CategoryClosureCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CategoryClosures.
     */
    data: CategoryClosureCreateManyInput | CategoryClosureCreateManyInput[]
  }

  /**
   * CategoryClosure createManyAndReturn
   */
  export type CategoryClosureCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryClosure
     */
    select?: CategoryClosureSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CategoryClosure
     */
    omit?: CategoryClosureOmit<ExtArgs> | null
    /**
     * The data used to create many CategoryClosures.
     */
    data: CategoryClosureCreateManyInput | CategoryClosureCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryClosureIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CategoryClosure update
   */
  export type CategoryClosureUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryClosure
     */
    select?: CategoryClosureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CategoryClosure
     */
    omit?: CategoryClosureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryClosureInclude<ExtArgs> | null
    /**
     * The data needed to update a CategoryClosure.
     */
    data: XOR<CategoryClosureUpdateInput, CategoryClosureUncheckedUpdateInput>
    /**
     * Choose, which CategoryClosure to update.
     */
    where: CategoryClosureWhereUniqueInput
  }

  /**
   * CategoryClosure updateMany
   */
  export type CategoryClosureUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CategoryClosures.
     */
    data: XOR<CategoryClosureUpdateManyMutationInput, CategoryClosureUncheckedUpdateManyInput>
    /**
     * Filter which CategoryClosures to update
     */
    where?: CategoryClosureWhereInput
    /**
     * Limit how many CategoryClosures to update.
     */
    limit?: number
  }

  /**
   * CategoryClosure updateManyAndReturn
   */
  export type CategoryClosureUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryClosure
     */
    select?: CategoryClosureSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CategoryClosure
     */
    omit?: CategoryClosureOmit<ExtArgs> | null
    /**
     * The data used to update CategoryClosures.
     */
    data: XOR<CategoryClosureUpdateManyMutationInput, CategoryClosureUncheckedUpdateManyInput>
    /**
     * Filter which CategoryClosures to update
     */
    where?: CategoryClosureWhereInput
    /**
     * Limit how many CategoryClosures to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryClosureIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CategoryClosure upsert
   */
  export type CategoryClosureUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryClosure
     */
    select?: CategoryClosureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CategoryClosure
     */
    omit?: CategoryClosureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryClosureInclude<ExtArgs> | null
    /**
     * The filter to search for the CategoryClosure to update in case it exists.
     */
    where: CategoryClosureWhereUniqueInput
    /**
     * In case the CategoryClosure found by the `where` argument doesn't exist, create a new CategoryClosure with this data.
     */
    create: XOR<CategoryClosureCreateInput, CategoryClosureUncheckedCreateInput>
    /**
     * In case the CategoryClosure was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CategoryClosureUpdateInput, CategoryClosureUncheckedUpdateInput>
  }

  /**
   * CategoryClosure delete
   */
  export type CategoryClosureDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryClosure
     */
    select?: CategoryClosureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CategoryClosure
     */
    omit?: CategoryClosureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryClosureInclude<ExtArgs> | null
    /**
     * Filter which CategoryClosure to delete.
     */
    where: CategoryClosureWhereUniqueInput
  }

  /**
   * CategoryClosure deleteMany
   */
  export type CategoryClosureDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CategoryClosures to delete
     */
    where?: CategoryClosureWhereInput
    /**
     * Limit how many CategoryClosures to delete.
     */
    limit?: number
  }

  /**
   * CategoryClosure without action
   */
  export type CategoryClosureDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryClosure
     */
    select?: CategoryClosureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CategoryClosure
     */
    omit?: CategoryClosureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryClosureInclude<ExtArgs> | null
  }


  /**
   * Model InterventionRequest
   */

  export type AggregateInterventionRequest = {
    _count: InterventionRequestCountAggregateOutputType | null
    _avg: InterventionRequestAvgAggregateOutputType | null
    _sum: InterventionRequestSumAggregateOutputType | null
    _min: InterventionRequestMinAggregateOutputType | null
    _max: InterventionRequestMaxAggregateOutputType | null
  }

  export type InterventionRequestAvgAggregateOutputType = {
    id: number | null
    reportId: number | null
    createdBy: number | null
  }

  export type InterventionRequestSumAggregateOutputType = {
    id: number | null
    reportId: number | null
    createdBy: number | null
  }

  export type InterventionRequestMinAggregateOutputType = {
    id: number | null
    reportId: number | null
    title: string | null
    deadline: string | null
    status: $Enums.InterventionRequestStatus | null
    createdBy: number | null
    notified: boolean | null
    createdAt: Date | null
  }

  export type InterventionRequestMaxAggregateOutputType = {
    id: number | null
    reportId: number | null
    title: string | null
    deadline: string | null
    status: $Enums.InterventionRequestStatus | null
    createdBy: number | null
    notified: boolean | null
    createdAt: Date | null
  }

  export type InterventionRequestCountAggregateOutputType = {
    id: number
    reportId: number
    title: number
    deadline: number
    status: number
    createdBy: number
    notified: number
    createdAt: number
    _all: number
  }


  export type InterventionRequestAvgAggregateInputType = {
    id?: true
    reportId?: true
    createdBy?: true
  }

  export type InterventionRequestSumAggregateInputType = {
    id?: true
    reportId?: true
    createdBy?: true
  }

  export type InterventionRequestMinAggregateInputType = {
    id?: true
    reportId?: true
    title?: true
    deadline?: true
    status?: true
    createdBy?: true
    notified?: true
    createdAt?: true
  }

  export type InterventionRequestMaxAggregateInputType = {
    id?: true
    reportId?: true
    title?: true
    deadline?: true
    status?: true
    createdBy?: true
    notified?: true
    createdAt?: true
  }

  export type InterventionRequestCountAggregateInputType = {
    id?: true
    reportId?: true
    title?: true
    deadline?: true
    status?: true
    createdBy?: true
    notified?: true
    createdAt?: true
    _all?: true
  }

  export type InterventionRequestAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InterventionRequest to aggregate.
     */
    where?: InterventionRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InterventionRequests to fetch.
     */
    orderBy?: InterventionRequestOrderByWithRelationInput | InterventionRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InterventionRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InterventionRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InterventionRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned InterventionRequests
    **/
    _count?: true | InterventionRequestCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InterventionRequestAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InterventionRequestSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InterventionRequestMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InterventionRequestMaxAggregateInputType
  }

  export type GetInterventionRequestAggregateType<T extends InterventionRequestAggregateArgs> = {
        [P in keyof T & keyof AggregateInterventionRequest]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInterventionRequest[P]>
      : GetScalarType<T[P], AggregateInterventionRequest[P]>
  }




  export type InterventionRequestGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InterventionRequestWhereInput
    orderBy?: InterventionRequestOrderByWithAggregationInput | InterventionRequestOrderByWithAggregationInput[]
    by: InterventionRequestScalarFieldEnum[] | InterventionRequestScalarFieldEnum
    having?: InterventionRequestScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InterventionRequestCountAggregateInputType | true
    _avg?: InterventionRequestAvgAggregateInputType
    _sum?: InterventionRequestSumAggregateInputType
    _min?: InterventionRequestMinAggregateInputType
    _max?: InterventionRequestMaxAggregateInputType
  }

  export type InterventionRequestGroupByOutputType = {
    id: number
    reportId: number
    title: string
    deadline: string
    status: $Enums.InterventionRequestStatus
    createdBy: number
    notified: boolean
    createdAt: Date
    _count: InterventionRequestCountAggregateOutputType | null
    _avg: InterventionRequestAvgAggregateOutputType | null
    _sum: InterventionRequestSumAggregateOutputType | null
    _min: InterventionRequestMinAggregateOutputType | null
    _max: InterventionRequestMaxAggregateOutputType | null
  }

  type GetInterventionRequestGroupByPayload<T extends InterventionRequestGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InterventionRequestGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InterventionRequestGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InterventionRequestGroupByOutputType[P]>
            : GetScalarType<T[P], InterventionRequestGroupByOutputType[P]>
        }
      >
    >


  export type InterventionRequestSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    reportId?: boolean
    title?: boolean
    deadline?: boolean
    status?: boolean
    createdBy?: boolean
    notified?: boolean
    createdAt?: boolean
    assignedTo?: boolean | InterventionRequest$assignedToArgs<ExtArgs>
    Interventions?: boolean | InterventionRequest$InterventionsArgs<ExtArgs>
    report?: boolean | ReportDefaultArgs<ExtArgs>
    creator?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | InterventionRequestCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["interventionRequest"]>

  export type InterventionRequestSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    reportId?: boolean
    title?: boolean
    deadline?: boolean
    status?: boolean
    createdBy?: boolean
    notified?: boolean
    createdAt?: boolean
    report?: boolean | ReportDefaultArgs<ExtArgs>
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["interventionRequest"]>

  export type InterventionRequestSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    reportId?: boolean
    title?: boolean
    deadline?: boolean
    status?: boolean
    createdBy?: boolean
    notified?: boolean
    createdAt?: boolean
    report?: boolean | ReportDefaultArgs<ExtArgs>
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["interventionRequest"]>

  export type InterventionRequestSelectScalar = {
    id?: boolean
    reportId?: boolean
    title?: boolean
    deadline?: boolean
    status?: boolean
    createdBy?: boolean
    notified?: boolean
    createdAt?: boolean
  }

  export type InterventionRequestOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "reportId" | "title" | "deadline" | "status" | "createdBy" | "notified" | "createdAt", ExtArgs["result"]["interventionRequest"]>
  export type InterventionRequestInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assignedTo?: boolean | InterventionRequest$assignedToArgs<ExtArgs>
    Interventions?: boolean | InterventionRequest$InterventionsArgs<ExtArgs>
    report?: boolean | ReportDefaultArgs<ExtArgs>
    creator?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | InterventionRequestCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type InterventionRequestIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    report?: boolean | ReportDefaultArgs<ExtArgs>
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type InterventionRequestIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    report?: boolean | ReportDefaultArgs<ExtArgs>
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $InterventionRequestPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "InterventionRequest"
    objects: {
      assignedTo: Prisma.$TechnicianAssignementPayload<ExtArgs>[]
      Interventions: Prisma.$InterventionsPayload<ExtArgs>[]
      report: Prisma.$ReportPayload<ExtArgs>
      creator: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      reportId: number
      title: string
      deadline: string
      status: $Enums.InterventionRequestStatus
      createdBy: number
      notified: boolean
      createdAt: Date
    }, ExtArgs["result"]["interventionRequest"]>
    composites: {}
  }

  type InterventionRequestGetPayload<S extends boolean | null | undefined | InterventionRequestDefaultArgs> = $Result.GetResult<Prisma.$InterventionRequestPayload, S>

  type InterventionRequestCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<InterventionRequestFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: InterventionRequestCountAggregateInputType | true
    }

  export interface InterventionRequestDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['InterventionRequest'], meta: { name: 'InterventionRequest' } }
    /**
     * Find zero or one InterventionRequest that matches the filter.
     * @param {InterventionRequestFindUniqueArgs} args - Arguments to find a InterventionRequest
     * @example
     * // Get one InterventionRequest
     * const interventionRequest = await prisma.interventionRequest.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InterventionRequestFindUniqueArgs>(args: SelectSubset<T, InterventionRequestFindUniqueArgs<ExtArgs>>): Prisma__InterventionRequestClient<$Result.GetResult<Prisma.$InterventionRequestPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one InterventionRequest that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {InterventionRequestFindUniqueOrThrowArgs} args - Arguments to find a InterventionRequest
     * @example
     * // Get one InterventionRequest
     * const interventionRequest = await prisma.interventionRequest.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InterventionRequestFindUniqueOrThrowArgs>(args: SelectSubset<T, InterventionRequestFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InterventionRequestClient<$Result.GetResult<Prisma.$InterventionRequestPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first InterventionRequest that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InterventionRequestFindFirstArgs} args - Arguments to find a InterventionRequest
     * @example
     * // Get one InterventionRequest
     * const interventionRequest = await prisma.interventionRequest.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InterventionRequestFindFirstArgs>(args?: SelectSubset<T, InterventionRequestFindFirstArgs<ExtArgs>>): Prisma__InterventionRequestClient<$Result.GetResult<Prisma.$InterventionRequestPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first InterventionRequest that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InterventionRequestFindFirstOrThrowArgs} args - Arguments to find a InterventionRequest
     * @example
     * // Get one InterventionRequest
     * const interventionRequest = await prisma.interventionRequest.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InterventionRequestFindFirstOrThrowArgs>(args?: SelectSubset<T, InterventionRequestFindFirstOrThrowArgs<ExtArgs>>): Prisma__InterventionRequestClient<$Result.GetResult<Prisma.$InterventionRequestPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more InterventionRequests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InterventionRequestFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all InterventionRequests
     * const interventionRequests = await prisma.interventionRequest.findMany()
     * 
     * // Get first 10 InterventionRequests
     * const interventionRequests = await prisma.interventionRequest.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const interventionRequestWithIdOnly = await prisma.interventionRequest.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends InterventionRequestFindManyArgs>(args?: SelectSubset<T, InterventionRequestFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InterventionRequestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a InterventionRequest.
     * @param {InterventionRequestCreateArgs} args - Arguments to create a InterventionRequest.
     * @example
     * // Create one InterventionRequest
     * const InterventionRequest = await prisma.interventionRequest.create({
     *   data: {
     *     // ... data to create a InterventionRequest
     *   }
     * })
     * 
     */
    create<T extends InterventionRequestCreateArgs>(args: SelectSubset<T, InterventionRequestCreateArgs<ExtArgs>>): Prisma__InterventionRequestClient<$Result.GetResult<Prisma.$InterventionRequestPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many InterventionRequests.
     * @param {InterventionRequestCreateManyArgs} args - Arguments to create many InterventionRequests.
     * @example
     * // Create many InterventionRequests
     * const interventionRequest = await prisma.interventionRequest.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InterventionRequestCreateManyArgs>(args?: SelectSubset<T, InterventionRequestCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many InterventionRequests and returns the data saved in the database.
     * @param {InterventionRequestCreateManyAndReturnArgs} args - Arguments to create many InterventionRequests.
     * @example
     * // Create many InterventionRequests
     * const interventionRequest = await prisma.interventionRequest.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many InterventionRequests and only return the `id`
     * const interventionRequestWithIdOnly = await prisma.interventionRequest.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends InterventionRequestCreateManyAndReturnArgs>(args?: SelectSubset<T, InterventionRequestCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InterventionRequestPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a InterventionRequest.
     * @param {InterventionRequestDeleteArgs} args - Arguments to delete one InterventionRequest.
     * @example
     * // Delete one InterventionRequest
     * const InterventionRequest = await prisma.interventionRequest.delete({
     *   where: {
     *     // ... filter to delete one InterventionRequest
     *   }
     * })
     * 
     */
    delete<T extends InterventionRequestDeleteArgs>(args: SelectSubset<T, InterventionRequestDeleteArgs<ExtArgs>>): Prisma__InterventionRequestClient<$Result.GetResult<Prisma.$InterventionRequestPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one InterventionRequest.
     * @param {InterventionRequestUpdateArgs} args - Arguments to update one InterventionRequest.
     * @example
     * // Update one InterventionRequest
     * const interventionRequest = await prisma.interventionRequest.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InterventionRequestUpdateArgs>(args: SelectSubset<T, InterventionRequestUpdateArgs<ExtArgs>>): Prisma__InterventionRequestClient<$Result.GetResult<Prisma.$InterventionRequestPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more InterventionRequests.
     * @param {InterventionRequestDeleteManyArgs} args - Arguments to filter InterventionRequests to delete.
     * @example
     * // Delete a few InterventionRequests
     * const { count } = await prisma.interventionRequest.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InterventionRequestDeleteManyArgs>(args?: SelectSubset<T, InterventionRequestDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more InterventionRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InterventionRequestUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many InterventionRequests
     * const interventionRequest = await prisma.interventionRequest.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InterventionRequestUpdateManyArgs>(args: SelectSubset<T, InterventionRequestUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more InterventionRequests and returns the data updated in the database.
     * @param {InterventionRequestUpdateManyAndReturnArgs} args - Arguments to update many InterventionRequests.
     * @example
     * // Update many InterventionRequests
     * const interventionRequest = await prisma.interventionRequest.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more InterventionRequests and only return the `id`
     * const interventionRequestWithIdOnly = await prisma.interventionRequest.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends InterventionRequestUpdateManyAndReturnArgs>(args: SelectSubset<T, InterventionRequestUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InterventionRequestPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one InterventionRequest.
     * @param {InterventionRequestUpsertArgs} args - Arguments to update or create a InterventionRequest.
     * @example
     * // Update or create a InterventionRequest
     * const interventionRequest = await prisma.interventionRequest.upsert({
     *   create: {
     *     // ... data to create a InterventionRequest
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the InterventionRequest we want to update
     *   }
     * })
     */
    upsert<T extends InterventionRequestUpsertArgs>(args: SelectSubset<T, InterventionRequestUpsertArgs<ExtArgs>>): Prisma__InterventionRequestClient<$Result.GetResult<Prisma.$InterventionRequestPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of InterventionRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InterventionRequestCountArgs} args - Arguments to filter InterventionRequests to count.
     * @example
     * // Count the number of InterventionRequests
     * const count = await prisma.interventionRequest.count({
     *   where: {
     *     // ... the filter for the InterventionRequests we want to count
     *   }
     * })
    **/
    count<T extends InterventionRequestCountArgs>(
      args?: Subset<T, InterventionRequestCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InterventionRequestCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a InterventionRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InterventionRequestAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InterventionRequestAggregateArgs>(args: Subset<T, InterventionRequestAggregateArgs>): Prisma.PrismaPromise<GetInterventionRequestAggregateType<T>>

    /**
     * Group by InterventionRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InterventionRequestGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InterventionRequestGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InterventionRequestGroupByArgs['orderBy'] }
        : { orderBy?: InterventionRequestGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InterventionRequestGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInterventionRequestGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the InterventionRequest model
   */
  readonly fields: InterventionRequestFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for InterventionRequest.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InterventionRequestClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    assignedTo<T extends InterventionRequest$assignedToArgs<ExtArgs> = {}>(args?: Subset<T, InterventionRequest$assignedToArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TechnicianAssignementPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Interventions<T extends InterventionRequest$InterventionsArgs<ExtArgs> = {}>(args?: Subset<T, InterventionRequest$InterventionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InterventionsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    report<T extends ReportDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ReportDefaultArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    creator<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the InterventionRequest model
   */
  interface InterventionRequestFieldRefs {
    readonly id: FieldRef<"InterventionRequest", 'Int'>
    readonly reportId: FieldRef<"InterventionRequest", 'Int'>
    readonly title: FieldRef<"InterventionRequest", 'String'>
    readonly deadline: FieldRef<"InterventionRequest", 'String'>
    readonly status: FieldRef<"InterventionRequest", 'InterventionRequestStatus'>
    readonly createdBy: FieldRef<"InterventionRequest", 'Int'>
    readonly notified: FieldRef<"InterventionRequest", 'Boolean'>
    readonly createdAt: FieldRef<"InterventionRequest", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * InterventionRequest findUnique
   */
  export type InterventionRequestFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InterventionRequest
     */
    select?: InterventionRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InterventionRequest
     */
    omit?: InterventionRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InterventionRequestInclude<ExtArgs> | null
    /**
     * Filter, which InterventionRequest to fetch.
     */
    where: InterventionRequestWhereUniqueInput
  }

  /**
   * InterventionRequest findUniqueOrThrow
   */
  export type InterventionRequestFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InterventionRequest
     */
    select?: InterventionRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InterventionRequest
     */
    omit?: InterventionRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InterventionRequestInclude<ExtArgs> | null
    /**
     * Filter, which InterventionRequest to fetch.
     */
    where: InterventionRequestWhereUniqueInput
  }

  /**
   * InterventionRequest findFirst
   */
  export type InterventionRequestFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InterventionRequest
     */
    select?: InterventionRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InterventionRequest
     */
    omit?: InterventionRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InterventionRequestInclude<ExtArgs> | null
    /**
     * Filter, which InterventionRequest to fetch.
     */
    where?: InterventionRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InterventionRequests to fetch.
     */
    orderBy?: InterventionRequestOrderByWithRelationInput | InterventionRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InterventionRequests.
     */
    cursor?: InterventionRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InterventionRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InterventionRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InterventionRequests.
     */
    distinct?: InterventionRequestScalarFieldEnum | InterventionRequestScalarFieldEnum[]
  }

  /**
   * InterventionRequest findFirstOrThrow
   */
  export type InterventionRequestFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InterventionRequest
     */
    select?: InterventionRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InterventionRequest
     */
    omit?: InterventionRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InterventionRequestInclude<ExtArgs> | null
    /**
     * Filter, which InterventionRequest to fetch.
     */
    where?: InterventionRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InterventionRequests to fetch.
     */
    orderBy?: InterventionRequestOrderByWithRelationInput | InterventionRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InterventionRequests.
     */
    cursor?: InterventionRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InterventionRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InterventionRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InterventionRequests.
     */
    distinct?: InterventionRequestScalarFieldEnum | InterventionRequestScalarFieldEnum[]
  }

  /**
   * InterventionRequest findMany
   */
  export type InterventionRequestFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InterventionRequest
     */
    select?: InterventionRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InterventionRequest
     */
    omit?: InterventionRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InterventionRequestInclude<ExtArgs> | null
    /**
     * Filter, which InterventionRequests to fetch.
     */
    where?: InterventionRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InterventionRequests to fetch.
     */
    orderBy?: InterventionRequestOrderByWithRelationInput | InterventionRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing InterventionRequests.
     */
    cursor?: InterventionRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InterventionRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InterventionRequests.
     */
    skip?: number
    distinct?: InterventionRequestScalarFieldEnum | InterventionRequestScalarFieldEnum[]
  }

  /**
   * InterventionRequest create
   */
  export type InterventionRequestCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InterventionRequest
     */
    select?: InterventionRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InterventionRequest
     */
    omit?: InterventionRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InterventionRequestInclude<ExtArgs> | null
    /**
     * The data needed to create a InterventionRequest.
     */
    data: XOR<InterventionRequestCreateInput, InterventionRequestUncheckedCreateInput>
  }

  /**
   * InterventionRequest createMany
   */
  export type InterventionRequestCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many InterventionRequests.
     */
    data: InterventionRequestCreateManyInput | InterventionRequestCreateManyInput[]
  }

  /**
   * InterventionRequest createManyAndReturn
   */
  export type InterventionRequestCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InterventionRequest
     */
    select?: InterventionRequestSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the InterventionRequest
     */
    omit?: InterventionRequestOmit<ExtArgs> | null
    /**
     * The data used to create many InterventionRequests.
     */
    data: InterventionRequestCreateManyInput | InterventionRequestCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InterventionRequestIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * InterventionRequest update
   */
  export type InterventionRequestUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InterventionRequest
     */
    select?: InterventionRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InterventionRequest
     */
    omit?: InterventionRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InterventionRequestInclude<ExtArgs> | null
    /**
     * The data needed to update a InterventionRequest.
     */
    data: XOR<InterventionRequestUpdateInput, InterventionRequestUncheckedUpdateInput>
    /**
     * Choose, which InterventionRequest to update.
     */
    where: InterventionRequestWhereUniqueInput
  }

  /**
   * InterventionRequest updateMany
   */
  export type InterventionRequestUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update InterventionRequests.
     */
    data: XOR<InterventionRequestUpdateManyMutationInput, InterventionRequestUncheckedUpdateManyInput>
    /**
     * Filter which InterventionRequests to update
     */
    where?: InterventionRequestWhereInput
    /**
     * Limit how many InterventionRequests to update.
     */
    limit?: number
  }

  /**
   * InterventionRequest updateManyAndReturn
   */
  export type InterventionRequestUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InterventionRequest
     */
    select?: InterventionRequestSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the InterventionRequest
     */
    omit?: InterventionRequestOmit<ExtArgs> | null
    /**
     * The data used to update InterventionRequests.
     */
    data: XOR<InterventionRequestUpdateManyMutationInput, InterventionRequestUncheckedUpdateManyInput>
    /**
     * Filter which InterventionRequests to update
     */
    where?: InterventionRequestWhereInput
    /**
     * Limit how many InterventionRequests to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InterventionRequestIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * InterventionRequest upsert
   */
  export type InterventionRequestUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InterventionRequest
     */
    select?: InterventionRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InterventionRequest
     */
    omit?: InterventionRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InterventionRequestInclude<ExtArgs> | null
    /**
     * The filter to search for the InterventionRequest to update in case it exists.
     */
    where: InterventionRequestWhereUniqueInput
    /**
     * In case the InterventionRequest found by the `where` argument doesn't exist, create a new InterventionRequest with this data.
     */
    create: XOR<InterventionRequestCreateInput, InterventionRequestUncheckedCreateInput>
    /**
     * In case the InterventionRequest was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InterventionRequestUpdateInput, InterventionRequestUncheckedUpdateInput>
  }

  /**
   * InterventionRequest delete
   */
  export type InterventionRequestDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InterventionRequest
     */
    select?: InterventionRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InterventionRequest
     */
    omit?: InterventionRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InterventionRequestInclude<ExtArgs> | null
    /**
     * Filter which InterventionRequest to delete.
     */
    where: InterventionRequestWhereUniqueInput
  }

  /**
   * InterventionRequest deleteMany
   */
  export type InterventionRequestDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InterventionRequests to delete
     */
    where?: InterventionRequestWhereInput
    /**
     * Limit how many InterventionRequests to delete.
     */
    limit?: number
  }

  /**
   * InterventionRequest.assignedTo
   */
  export type InterventionRequest$assignedToArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TechnicianAssignement
     */
    select?: TechnicianAssignementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TechnicianAssignement
     */
    omit?: TechnicianAssignementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TechnicianAssignementInclude<ExtArgs> | null
    where?: TechnicianAssignementWhereInput
    orderBy?: TechnicianAssignementOrderByWithRelationInput | TechnicianAssignementOrderByWithRelationInput[]
    cursor?: TechnicianAssignementWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TechnicianAssignementScalarFieldEnum | TechnicianAssignementScalarFieldEnum[]
  }

  /**
   * InterventionRequest.Interventions
   */
  export type InterventionRequest$InterventionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Interventions
     */
    select?: InterventionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Interventions
     */
    omit?: InterventionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InterventionsInclude<ExtArgs> | null
    where?: InterventionsWhereInput
    orderBy?: InterventionsOrderByWithRelationInput | InterventionsOrderByWithRelationInput[]
    cursor?: InterventionsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InterventionsScalarFieldEnum | InterventionsScalarFieldEnum[]
  }

  /**
   * InterventionRequest without action
   */
  export type InterventionRequestDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InterventionRequest
     */
    select?: InterventionRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InterventionRequest
     */
    omit?: InterventionRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InterventionRequestInclude<ExtArgs> | null
  }


  /**
   * Model TechnicianAssignement
   */

  export type AggregateTechnicianAssignement = {
    _count: TechnicianAssignementCountAggregateOutputType | null
    _avg: TechnicianAssignementAvgAggregateOutputType | null
    _sum: TechnicianAssignementSumAggregateOutputType | null
    _min: TechnicianAssignementMinAggregateOutputType | null
    _max: TechnicianAssignementMaxAggregateOutputType | null
  }

  export type TechnicianAssignementAvgAggregateOutputType = {
    id: number | null
    technicianId: number | null
    interventionRequestId: number | null
    locationId: number | null
  }

  export type TechnicianAssignementSumAggregateOutputType = {
    id: number | null
    technicianId: number | null
    interventionRequestId: number | null
    locationId: number | null
  }

  export type TechnicianAssignementMinAggregateOutputType = {
    id: number | null
    technicianId: number | null
    interventionRequestId: number | null
    locationId: number | null
    completed: boolean | null
    details: string | null
    createdAt: Date | null
  }

  export type TechnicianAssignementMaxAggregateOutputType = {
    id: number | null
    technicianId: number | null
    interventionRequestId: number | null
    locationId: number | null
    completed: boolean | null
    details: string | null
    createdAt: Date | null
  }

  export type TechnicianAssignementCountAggregateOutputType = {
    id: number
    technicianId: number
    interventionRequestId: number
    locationId: number
    completed: number
    details: number
    createdAt: number
    _all: number
  }


  export type TechnicianAssignementAvgAggregateInputType = {
    id?: true
    technicianId?: true
    interventionRequestId?: true
    locationId?: true
  }

  export type TechnicianAssignementSumAggregateInputType = {
    id?: true
    technicianId?: true
    interventionRequestId?: true
    locationId?: true
  }

  export type TechnicianAssignementMinAggregateInputType = {
    id?: true
    technicianId?: true
    interventionRequestId?: true
    locationId?: true
    completed?: true
    details?: true
    createdAt?: true
  }

  export type TechnicianAssignementMaxAggregateInputType = {
    id?: true
    technicianId?: true
    interventionRequestId?: true
    locationId?: true
    completed?: true
    details?: true
    createdAt?: true
  }

  export type TechnicianAssignementCountAggregateInputType = {
    id?: true
    technicianId?: true
    interventionRequestId?: true
    locationId?: true
    completed?: true
    details?: true
    createdAt?: true
    _all?: true
  }

  export type TechnicianAssignementAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TechnicianAssignement to aggregate.
     */
    where?: TechnicianAssignementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TechnicianAssignements to fetch.
     */
    orderBy?: TechnicianAssignementOrderByWithRelationInput | TechnicianAssignementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TechnicianAssignementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TechnicianAssignements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TechnicianAssignements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TechnicianAssignements
    **/
    _count?: true | TechnicianAssignementCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TechnicianAssignementAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TechnicianAssignementSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TechnicianAssignementMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TechnicianAssignementMaxAggregateInputType
  }

  export type GetTechnicianAssignementAggregateType<T extends TechnicianAssignementAggregateArgs> = {
        [P in keyof T & keyof AggregateTechnicianAssignement]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTechnicianAssignement[P]>
      : GetScalarType<T[P], AggregateTechnicianAssignement[P]>
  }




  export type TechnicianAssignementGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TechnicianAssignementWhereInput
    orderBy?: TechnicianAssignementOrderByWithAggregationInput | TechnicianAssignementOrderByWithAggregationInput[]
    by: TechnicianAssignementScalarFieldEnum[] | TechnicianAssignementScalarFieldEnum
    having?: TechnicianAssignementScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TechnicianAssignementCountAggregateInputType | true
    _avg?: TechnicianAssignementAvgAggregateInputType
    _sum?: TechnicianAssignementSumAggregateInputType
    _min?: TechnicianAssignementMinAggregateInputType
    _max?: TechnicianAssignementMaxAggregateInputType
  }

  export type TechnicianAssignementGroupByOutputType = {
    id: number
    technicianId: number
    interventionRequestId: number
    locationId: number | null
    completed: boolean
    details: string | null
    createdAt: Date
    _count: TechnicianAssignementCountAggregateOutputType | null
    _avg: TechnicianAssignementAvgAggregateOutputType | null
    _sum: TechnicianAssignementSumAggregateOutputType | null
    _min: TechnicianAssignementMinAggregateOutputType | null
    _max: TechnicianAssignementMaxAggregateOutputType | null
  }

  type GetTechnicianAssignementGroupByPayload<T extends TechnicianAssignementGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TechnicianAssignementGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TechnicianAssignementGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TechnicianAssignementGroupByOutputType[P]>
            : GetScalarType<T[P], TechnicianAssignementGroupByOutputType[P]>
        }
      >
    >


  export type TechnicianAssignementSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    technicianId?: boolean
    interventionRequestId?: boolean
    locationId?: boolean
    completed?: boolean
    details?: boolean
    createdAt?: boolean
    technician?: boolean | TechnicianDefaultArgs<ExtArgs>
    interventionRequest?: boolean | InterventionRequestDefaultArgs<ExtArgs>
    location?: boolean | TechnicianAssignement$locationArgs<ExtArgs>
  }, ExtArgs["result"]["technicianAssignement"]>

  export type TechnicianAssignementSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    technicianId?: boolean
    interventionRequestId?: boolean
    locationId?: boolean
    completed?: boolean
    details?: boolean
    createdAt?: boolean
    technician?: boolean | TechnicianDefaultArgs<ExtArgs>
    interventionRequest?: boolean | InterventionRequestDefaultArgs<ExtArgs>
    location?: boolean | TechnicianAssignement$locationArgs<ExtArgs>
  }, ExtArgs["result"]["technicianAssignement"]>

  export type TechnicianAssignementSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    technicianId?: boolean
    interventionRequestId?: boolean
    locationId?: boolean
    completed?: boolean
    details?: boolean
    createdAt?: boolean
    technician?: boolean | TechnicianDefaultArgs<ExtArgs>
    interventionRequest?: boolean | InterventionRequestDefaultArgs<ExtArgs>
    location?: boolean | TechnicianAssignement$locationArgs<ExtArgs>
  }, ExtArgs["result"]["technicianAssignement"]>

  export type TechnicianAssignementSelectScalar = {
    id?: boolean
    technicianId?: boolean
    interventionRequestId?: boolean
    locationId?: boolean
    completed?: boolean
    details?: boolean
    createdAt?: boolean
  }

  export type TechnicianAssignementOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "technicianId" | "interventionRequestId" | "locationId" | "completed" | "details" | "createdAt", ExtArgs["result"]["technicianAssignement"]>
  export type TechnicianAssignementInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    technician?: boolean | TechnicianDefaultArgs<ExtArgs>
    interventionRequest?: boolean | InterventionRequestDefaultArgs<ExtArgs>
    location?: boolean | TechnicianAssignement$locationArgs<ExtArgs>
  }
  export type TechnicianAssignementIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    technician?: boolean | TechnicianDefaultArgs<ExtArgs>
    interventionRequest?: boolean | InterventionRequestDefaultArgs<ExtArgs>
    location?: boolean | TechnicianAssignement$locationArgs<ExtArgs>
  }
  export type TechnicianAssignementIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    technician?: boolean | TechnicianDefaultArgs<ExtArgs>
    interventionRequest?: boolean | InterventionRequestDefaultArgs<ExtArgs>
    location?: boolean | TechnicianAssignement$locationArgs<ExtArgs>
  }

  export type $TechnicianAssignementPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TechnicianAssignement"
    objects: {
      technician: Prisma.$TechnicianPayload<ExtArgs>
      interventionRequest: Prisma.$InterventionRequestPayload<ExtArgs>
      location: Prisma.$AssetPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      technicianId: number
      interventionRequestId: number
      locationId: number | null
      completed: boolean
      details: string | null
      createdAt: Date
    }, ExtArgs["result"]["technicianAssignement"]>
    composites: {}
  }

  type TechnicianAssignementGetPayload<S extends boolean | null | undefined | TechnicianAssignementDefaultArgs> = $Result.GetResult<Prisma.$TechnicianAssignementPayload, S>

  type TechnicianAssignementCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TechnicianAssignementFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TechnicianAssignementCountAggregateInputType | true
    }

  export interface TechnicianAssignementDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TechnicianAssignement'], meta: { name: 'TechnicianAssignement' } }
    /**
     * Find zero or one TechnicianAssignement that matches the filter.
     * @param {TechnicianAssignementFindUniqueArgs} args - Arguments to find a TechnicianAssignement
     * @example
     * // Get one TechnicianAssignement
     * const technicianAssignement = await prisma.technicianAssignement.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TechnicianAssignementFindUniqueArgs>(args: SelectSubset<T, TechnicianAssignementFindUniqueArgs<ExtArgs>>): Prisma__TechnicianAssignementClient<$Result.GetResult<Prisma.$TechnicianAssignementPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TechnicianAssignement that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TechnicianAssignementFindUniqueOrThrowArgs} args - Arguments to find a TechnicianAssignement
     * @example
     * // Get one TechnicianAssignement
     * const technicianAssignement = await prisma.technicianAssignement.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TechnicianAssignementFindUniqueOrThrowArgs>(args: SelectSubset<T, TechnicianAssignementFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TechnicianAssignementClient<$Result.GetResult<Prisma.$TechnicianAssignementPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TechnicianAssignement that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TechnicianAssignementFindFirstArgs} args - Arguments to find a TechnicianAssignement
     * @example
     * // Get one TechnicianAssignement
     * const technicianAssignement = await prisma.technicianAssignement.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TechnicianAssignementFindFirstArgs>(args?: SelectSubset<T, TechnicianAssignementFindFirstArgs<ExtArgs>>): Prisma__TechnicianAssignementClient<$Result.GetResult<Prisma.$TechnicianAssignementPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TechnicianAssignement that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TechnicianAssignementFindFirstOrThrowArgs} args - Arguments to find a TechnicianAssignement
     * @example
     * // Get one TechnicianAssignement
     * const technicianAssignement = await prisma.technicianAssignement.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TechnicianAssignementFindFirstOrThrowArgs>(args?: SelectSubset<T, TechnicianAssignementFindFirstOrThrowArgs<ExtArgs>>): Prisma__TechnicianAssignementClient<$Result.GetResult<Prisma.$TechnicianAssignementPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TechnicianAssignements that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TechnicianAssignementFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TechnicianAssignements
     * const technicianAssignements = await prisma.technicianAssignement.findMany()
     * 
     * // Get first 10 TechnicianAssignements
     * const technicianAssignements = await prisma.technicianAssignement.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const technicianAssignementWithIdOnly = await prisma.technicianAssignement.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TechnicianAssignementFindManyArgs>(args?: SelectSubset<T, TechnicianAssignementFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TechnicianAssignementPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TechnicianAssignement.
     * @param {TechnicianAssignementCreateArgs} args - Arguments to create a TechnicianAssignement.
     * @example
     * // Create one TechnicianAssignement
     * const TechnicianAssignement = await prisma.technicianAssignement.create({
     *   data: {
     *     // ... data to create a TechnicianAssignement
     *   }
     * })
     * 
     */
    create<T extends TechnicianAssignementCreateArgs>(args: SelectSubset<T, TechnicianAssignementCreateArgs<ExtArgs>>): Prisma__TechnicianAssignementClient<$Result.GetResult<Prisma.$TechnicianAssignementPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TechnicianAssignements.
     * @param {TechnicianAssignementCreateManyArgs} args - Arguments to create many TechnicianAssignements.
     * @example
     * // Create many TechnicianAssignements
     * const technicianAssignement = await prisma.technicianAssignement.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TechnicianAssignementCreateManyArgs>(args?: SelectSubset<T, TechnicianAssignementCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TechnicianAssignements and returns the data saved in the database.
     * @param {TechnicianAssignementCreateManyAndReturnArgs} args - Arguments to create many TechnicianAssignements.
     * @example
     * // Create many TechnicianAssignements
     * const technicianAssignement = await prisma.technicianAssignement.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TechnicianAssignements and only return the `id`
     * const technicianAssignementWithIdOnly = await prisma.technicianAssignement.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TechnicianAssignementCreateManyAndReturnArgs>(args?: SelectSubset<T, TechnicianAssignementCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TechnicianAssignementPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a TechnicianAssignement.
     * @param {TechnicianAssignementDeleteArgs} args - Arguments to delete one TechnicianAssignement.
     * @example
     * // Delete one TechnicianAssignement
     * const TechnicianAssignement = await prisma.technicianAssignement.delete({
     *   where: {
     *     // ... filter to delete one TechnicianAssignement
     *   }
     * })
     * 
     */
    delete<T extends TechnicianAssignementDeleteArgs>(args: SelectSubset<T, TechnicianAssignementDeleteArgs<ExtArgs>>): Prisma__TechnicianAssignementClient<$Result.GetResult<Prisma.$TechnicianAssignementPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TechnicianAssignement.
     * @param {TechnicianAssignementUpdateArgs} args - Arguments to update one TechnicianAssignement.
     * @example
     * // Update one TechnicianAssignement
     * const technicianAssignement = await prisma.technicianAssignement.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TechnicianAssignementUpdateArgs>(args: SelectSubset<T, TechnicianAssignementUpdateArgs<ExtArgs>>): Prisma__TechnicianAssignementClient<$Result.GetResult<Prisma.$TechnicianAssignementPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TechnicianAssignements.
     * @param {TechnicianAssignementDeleteManyArgs} args - Arguments to filter TechnicianAssignements to delete.
     * @example
     * // Delete a few TechnicianAssignements
     * const { count } = await prisma.technicianAssignement.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TechnicianAssignementDeleteManyArgs>(args?: SelectSubset<T, TechnicianAssignementDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TechnicianAssignements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TechnicianAssignementUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TechnicianAssignements
     * const technicianAssignement = await prisma.technicianAssignement.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TechnicianAssignementUpdateManyArgs>(args: SelectSubset<T, TechnicianAssignementUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TechnicianAssignements and returns the data updated in the database.
     * @param {TechnicianAssignementUpdateManyAndReturnArgs} args - Arguments to update many TechnicianAssignements.
     * @example
     * // Update many TechnicianAssignements
     * const technicianAssignement = await prisma.technicianAssignement.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more TechnicianAssignements and only return the `id`
     * const technicianAssignementWithIdOnly = await prisma.technicianAssignement.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TechnicianAssignementUpdateManyAndReturnArgs>(args: SelectSubset<T, TechnicianAssignementUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TechnicianAssignementPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one TechnicianAssignement.
     * @param {TechnicianAssignementUpsertArgs} args - Arguments to update or create a TechnicianAssignement.
     * @example
     * // Update or create a TechnicianAssignement
     * const technicianAssignement = await prisma.technicianAssignement.upsert({
     *   create: {
     *     // ... data to create a TechnicianAssignement
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TechnicianAssignement we want to update
     *   }
     * })
     */
    upsert<T extends TechnicianAssignementUpsertArgs>(args: SelectSubset<T, TechnicianAssignementUpsertArgs<ExtArgs>>): Prisma__TechnicianAssignementClient<$Result.GetResult<Prisma.$TechnicianAssignementPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TechnicianAssignements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TechnicianAssignementCountArgs} args - Arguments to filter TechnicianAssignements to count.
     * @example
     * // Count the number of TechnicianAssignements
     * const count = await prisma.technicianAssignement.count({
     *   where: {
     *     // ... the filter for the TechnicianAssignements we want to count
     *   }
     * })
    **/
    count<T extends TechnicianAssignementCountArgs>(
      args?: Subset<T, TechnicianAssignementCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TechnicianAssignementCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TechnicianAssignement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TechnicianAssignementAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TechnicianAssignementAggregateArgs>(args: Subset<T, TechnicianAssignementAggregateArgs>): Prisma.PrismaPromise<GetTechnicianAssignementAggregateType<T>>

    /**
     * Group by TechnicianAssignement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TechnicianAssignementGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TechnicianAssignementGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TechnicianAssignementGroupByArgs['orderBy'] }
        : { orderBy?: TechnicianAssignementGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TechnicianAssignementGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTechnicianAssignementGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TechnicianAssignement model
   */
  readonly fields: TechnicianAssignementFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TechnicianAssignement.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TechnicianAssignementClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    technician<T extends TechnicianDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TechnicianDefaultArgs<ExtArgs>>): Prisma__TechnicianClient<$Result.GetResult<Prisma.$TechnicianPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    interventionRequest<T extends InterventionRequestDefaultArgs<ExtArgs> = {}>(args?: Subset<T, InterventionRequestDefaultArgs<ExtArgs>>): Prisma__InterventionRequestClient<$Result.GetResult<Prisma.$InterventionRequestPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    location<T extends TechnicianAssignement$locationArgs<ExtArgs> = {}>(args?: Subset<T, TechnicianAssignement$locationArgs<ExtArgs>>): Prisma__AssetClient<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TechnicianAssignement model
   */
  interface TechnicianAssignementFieldRefs {
    readonly id: FieldRef<"TechnicianAssignement", 'Int'>
    readonly technicianId: FieldRef<"TechnicianAssignement", 'Int'>
    readonly interventionRequestId: FieldRef<"TechnicianAssignement", 'Int'>
    readonly locationId: FieldRef<"TechnicianAssignement", 'Int'>
    readonly completed: FieldRef<"TechnicianAssignement", 'Boolean'>
    readonly details: FieldRef<"TechnicianAssignement", 'String'>
    readonly createdAt: FieldRef<"TechnicianAssignement", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TechnicianAssignement findUnique
   */
  export type TechnicianAssignementFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TechnicianAssignement
     */
    select?: TechnicianAssignementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TechnicianAssignement
     */
    omit?: TechnicianAssignementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TechnicianAssignementInclude<ExtArgs> | null
    /**
     * Filter, which TechnicianAssignement to fetch.
     */
    where: TechnicianAssignementWhereUniqueInput
  }

  /**
   * TechnicianAssignement findUniqueOrThrow
   */
  export type TechnicianAssignementFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TechnicianAssignement
     */
    select?: TechnicianAssignementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TechnicianAssignement
     */
    omit?: TechnicianAssignementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TechnicianAssignementInclude<ExtArgs> | null
    /**
     * Filter, which TechnicianAssignement to fetch.
     */
    where: TechnicianAssignementWhereUniqueInput
  }

  /**
   * TechnicianAssignement findFirst
   */
  export type TechnicianAssignementFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TechnicianAssignement
     */
    select?: TechnicianAssignementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TechnicianAssignement
     */
    omit?: TechnicianAssignementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TechnicianAssignementInclude<ExtArgs> | null
    /**
     * Filter, which TechnicianAssignement to fetch.
     */
    where?: TechnicianAssignementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TechnicianAssignements to fetch.
     */
    orderBy?: TechnicianAssignementOrderByWithRelationInput | TechnicianAssignementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TechnicianAssignements.
     */
    cursor?: TechnicianAssignementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TechnicianAssignements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TechnicianAssignements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TechnicianAssignements.
     */
    distinct?: TechnicianAssignementScalarFieldEnum | TechnicianAssignementScalarFieldEnum[]
  }

  /**
   * TechnicianAssignement findFirstOrThrow
   */
  export type TechnicianAssignementFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TechnicianAssignement
     */
    select?: TechnicianAssignementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TechnicianAssignement
     */
    omit?: TechnicianAssignementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TechnicianAssignementInclude<ExtArgs> | null
    /**
     * Filter, which TechnicianAssignement to fetch.
     */
    where?: TechnicianAssignementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TechnicianAssignements to fetch.
     */
    orderBy?: TechnicianAssignementOrderByWithRelationInput | TechnicianAssignementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TechnicianAssignements.
     */
    cursor?: TechnicianAssignementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TechnicianAssignements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TechnicianAssignements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TechnicianAssignements.
     */
    distinct?: TechnicianAssignementScalarFieldEnum | TechnicianAssignementScalarFieldEnum[]
  }

  /**
   * TechnicianAssignement findMany
   */
  export type TechnicianAssignementFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TechnicianAssignement
     */
    select?: TechnicianAssignementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TechnicianAssignement
     */
    omit?: TechnicianAssignementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TechnicianAssignementInclude<ExtArgs> | null
    /**
     * Filter, which TechnicianAssignements to fetch.
     */
    where?: TechnicianAssignementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TechnicianAssignements to fetch.
     */
    orderBy?: TechnicianAssignementOrderByWithRelationInput | TechnicianAssignementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TechnicianAssignements.
     */
    cursor?: TechnicianAssignementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TechnicianAssignements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TechnicianAssignements.
     */
    skip?: number
    distinct?: TechnicianAssignementScalarFieldEnum | TechnicianAssignementScalarFieldEnum[]
  }

  /**
   * TechnicianAssignement create
   */
  export type TechnicianAssignementCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TechnicianAssignement
     */
    select?: TechnicianAssignementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TechnicianAssignement
     */
    omit?: TechnicianAssignementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TechnicianAssignementInclude<ExtArgs> | null
    /**
     * The data needed to create a TechnicianAssignement.
     */
    data: XOR<TechnicianAssignementCreateInput, TechnicianAssignementUncheckedCreateInput>
  }

  /**
   * TechnicianAssignement createMany
   */
  export type TechnicianAssignementCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TechnicianAssignements.
     */
    data: TechnicianAssignementCreateManyInput | TechnicianAssignementCreateManyInput[]
  }

  /**
   * TechnicianAssignement createManyAndReturn
   */
  export type TechnicianAssignementCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TechnicianAssignement
     */
    select?: TechnicianAssignementSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TechnicianAssignement
     */
    omit?: TechnicianAssignementOmit<ExtArgs> | null
    /**
     * The data used to create many TechnicianAssignements.
     */
    data: TechnicianAssignementCreateManyInput | TechnicianAssignementCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TechnicianAssignementIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TechnicianAssignement update
   */
  export type TechnicianAssignementUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TechnicianAssignement
     */
    select?: TechnicianAssignementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TechnicianAssignement
     */
    omit?: TechnicianAssignementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TechnicianAssignementInclude<ExtArgs> | null
    /**
     * The data needed to update a TechnicianAssignement.
     */
    data: XOR<TechnicianAssignementUpdateInput, TechnicianAssignementUncheckedUpdateInput>
    /**
     * Choose, which TechnicianAssignement to update.
     */
    where: TechnicianAssignementWhereUniqueInput
  }

  /**
   * TechnicianAssignement updateMany
   */
  export type TechnicianAssignementUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TechnicianAssignements.
     */
    data: XOR<TechnicianAssignementUpdateManyMutationInput, TechnicianAssignementUncheckedUpdateManyInput>
    /**
     * Filter which TechnicianAssignements to update
     */
    where?: TechnicianAssignementWhereInput
    /**
     * Limit how many TechnicianAssignements to update.
     */
    limit?: number
  }

  /**
   * TechnicianAssignement updateManyAndReturn
   */
  export type TechnicianAssignementUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TechnicianAssignement
     */
    select?: TechnicianAssignementSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TechnicianAssignement
     */
    omit?: TechnicianAssignementOmit<ExtArgs> | null
    /**
     * The data used to update TechnicianAssignements.
     */
    data: XOR<TechnicianAssignementUpdateManyMutationInput, TechnicianAssignementUncheckedUpdateManyInput>
    /**
     * Filter which TechnicianAssignements to update
     */
    where?: TechnicianAssignementWhereInput
    /**
     * Limit how many TechnicianAssignements to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TechnicianAssignementIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * TechnicianAssignement upsert
   */
  export type TechnicianAssignementUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TechnicianAssignement
     */
    select?: TechnicianAssignementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TechnicianAssignement
     */
    omit?: TechnicianAssignementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TechnicianAssignementInclude<ExtArgs> | null
    /**
     * The filter to search for the TechnicianAssignement to update in case it exists.
     */
    where: TechnicianAssignementWhereUniqueInput
    /**
     * In case the TechnicianAssignement found by the `where` argument doesn't exist, create a new TechnicianAssignement with this data.
     */
    create: XOR<TechnicianAssignementCreateInput, TechnicianAssignementUncheckedCreateInput>
    /**
     * In case the TechnicianAssignement was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TechnicianAssignementUpdateInput, TechnicianAssignementUncheckedUpdateInput>
  }

  /**
   * TechnicianAssignement delete
   */
  export type TechnicianAssignementDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TechnicianAssignement
     */
    select?: TechnicianAssignementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TechnicianAssignement
     */
    omit?: TechnicianAssignementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TechnicianAssignementInclude<ExtArgs> | null
    /**
     * Filter which TechnicianAssignement to delete.
     */
    where: TechnicianAssignementWhereUniqueInput
  }

  /**
   * TechnicianAssignement deleteMany
   */
  export type TechnicianAssignementDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TechnicianAssignements to delete
     */
    where?: TechnicianAssignementWhereInput
    /**
     * Limit how many TechnicianAssignements to delete.
     */
    limit?: number
  }

  /**
   * TechnicianAssignement.location
   */
  export type TechnicianAssignement$locationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Asset
     */
    omit?: AssetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetInclude<ExtArgs> | null
    where?: AssetWhereInput
  }

  /**
   * TechnicianAssignement without action
   */
  export type TechnicianAssignementDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TechnicianAssignement
     */
    select?: TechnicianAssignementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TechnicianAssignement
     */
    omit?: TechnicianAssignementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TechnicianAssignementInclude<ExtArgs> | null
  }


  /**
   * Model Interventions
   */

  export type AggregateInterventions = {
    _count: InterventionsCountAggregateOutputType | null
    _avg: InterventionsAvgAggregateOutputType | null
    _sum: InterventionsSumAggregateOutputType | null
    _min: InterventionsMinAggregateOutputType | null
    _max: InterventionsMaxAggregateOutputType | null
  }

  export type InterventionsAvgAggregateOutputType = {
    id: number | null
    technicianId: number | null
    interventionRequestId: number | null
  }

  export type InterventionsSumAggregateOutputType = {
    id: number | null
    technicianId: number | null
    interventionRequestId: number | null
  }

  export type InterventionsMinAggregateOutputType = {
    id: number | null
    technicianId: number | null
    interventionRequestId: number | null
    description: string | null
    createdAt: Date | null
  }

  export type InterventionsMaxAggregateOutputType = {
    id: number | null
    technicianId: number | null
    interventionRequestId: number | null
    description: string | null
    createdAt: Date | null
  }

  export type InterventionsCountAggregateOutputType = {
    id: number
    technicianId: number
    interventionRequestId: number
    description: number
    createdAt: number
    _all: number
  }


  export type InterventionsAvgAggregateInputType = {
    id?: true
    technicianId?: true
    interventionRequestId?: true
  }

  export type InterventionsSumAggregateInputType = {
    id?: true
    technicianId?: true
    interventionRequestId?: true
  }

  export type InterventionsMinAggregateInputType = {
    id?: true
    technicianId?: true
    interventionRequestId?: true
    description?: true
    createdAt?: true
  }

  export type InterventionsMaxAggregateInputType = {
    id?: true
    technicianId?: true
    interventionRequestId?: true
    description?: true
    createdAt?: true
  }

  export type InterventionsCountAggregateInputType = {
    id?: true
    technicianId?: true
    interventionRequestId?: true
    description?: true
    createdAt?: true
    _all?: true
  }

  export type InterventionsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Interventions to aggregate.
     */
    where?: InterventionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Interventions to fetch.
     */
    orderBy?: InterventionsOrderByWithRelationInput | InterventionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InterventionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Interventions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Interventions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Interventions
    **/
    _count?: true | InterventionsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InterventionsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InterventionsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InterventionsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InterventionsMaxAggregateInputType
  }

  export type GetInterventionsAggregateType<T extends InterventionsAggregateArgs> = {
        [P in keyof T & keyof AggregateInterventions]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInterventions[P]>
      : GetScalarType<T[P], AggregateInterventions[P]>
  }




  export type InterventionsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InterventionsWhereInput
    orderBy?: InterventionsOrderByWithAggregationInput | InterventionsOrderByWithAggregationInput[]
    by: InterventionsScalarFieldEnum[] | InterventionsScalarFieldEnum
    having?: InterventionsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InterventionsCountAggregateInputType | true
    _avg?: InterventionsAvgAggregateInputType
    _sum?: InterventionsSumAggregateInputType
    _min?: InterventionsMinAggregateInputType
    _max?: InterventionsMaxAggregateInputType
  }

  export type InterventionsGroupByOutputType = {
    id: number
    technicianId: number
    interventionRequestId: number
    description: string
    createdAt: Date
    _count: InterventionsCountAggregateOutputType | null
    _avg: InterventionsAvgAggregateOutputType | null
    _sum: InterventionsSumAggregateOutputType | null
    _min: InterventionsMinAggregateOutputType | null
    _max: InterventionsMaxAggregateOutputType | null
  }

  type GetInterventionsGroupByPayload<T extends InterventionsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InterventionsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InterventionsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InterventionsGroupByOutputType[P]>
            : GetScalarType<T[P], InterventionsGroupByOutputType[P]>
        }
      >
    >


  export type InterventionsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    technicianId?: boolean
    interventionRequestId?: boolean
    description?: boolean
    createdAt?: boolean
    interventionRequest?: boolean | InterventionRequestDefaultArgs<ExtArgs>
    technician?: boolean | TechnicianDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["interventions"]>

  export type InterventionsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    technicianId?: boolean
    interventionRequestId?: boolean
    description?: boolean
    createdAt?: boolean
    interventionRequest?: boolean | InterventionRequestDefaultArgs<ExtArgs>
    technician?: boolean | TechnicianDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["interventions"]>

  export type InterventionsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    technicianId?: boolean
    interventionRequestId?: boolean
    description?: boolean
    createdAt?: boolean
    interventionRequest?: boolean | InterventionRequestDefaultArgs<ExtArgs>
    technician?: boolean | TechnicianDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["interventions"]>

  export type InterventionsSelectScalar = {
    id?: boolean
    technicianId?: boolean
    interventionRequestId?: boolean
    description?: boolean
    createdAt?: boolean
  }

  export type InterventionsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "technicianId" | "interventionRequestId" | "description" | "createdAt", ExtArgs["result"]["interventions"]>
  export type InterventionsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    interventionRequest?: boolean | InterventionRequestDefaultArgs<ExtArgs>
    technician?: boolean | TechnicianDefaultArgs<ExtArgs>
  }
  export type InterventionsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    interventionRequest?: boolean | InterventionRequestDefaultArgs<ExtArgs>
    technician?: boolean | TechnicianDefaultArgs<ExtArgs>
  }
  export type InterventionsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    interventionRequest?: boolean | InterventionRequestDefaultArgs<ExtArgs>
    technician?: boolean | TechnicianDefaultArgs<ExtArgs>
  }

  export type $InterventionsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Interventions"
    objects: {
      interventionRequest: Prisma.$InterventionRequestPayload<ExtArgs>
      technician: Prisma.$TechnicianPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      technicianId: number
      interventionRequestId: number
      description: string
      createdAt: Date
    }, ExtArgs["result"]["interventions"]>
    composites: {}
  }

  type InterventionsGetPayload<S extends boolean | null | undefined | InterventionsDefaultArgs> = $Result.GetResult<Prisma.$InterventionsPayload, S>

  type InterventionsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<InterventionsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: InterventionsCountAggregateInputType | true
    }

  export interface InterventionsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Interventions'], meta: { name: 'Interventions' } }
    /**
     * Find zero or one Interventions that matches the filter.
     * @param {InterventionsFindUniqueArgs} args - Arguments to find a Interventions
     * @example
     * // Get one Interventions
     * const interventions = await prisma.interventions.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InterventionsFindUniqueArgs>(args: SelectSubset<T, InterventionsFindUniqueArgs<ExtArgs>>): Prisma__InterventionsClient<$Result.GetResult<Prisma.$InterventionsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Interventions that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {InterventionsFindUniqueOrThrowArgs} args - Arguments to find a Interventions
     * @example
     * // Get one Interventions
     * const interventions = await prisma.interventions.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InterventionsFindUniqueOrThrowArgs>(args: SelectSubset<T, InterventionsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InterventionsClient<$Result.GetResult<Prisma.$InterventionsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Interventions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InterventionsFindFirstArgs} args - Arguments to find a Interventions
     * @example
     * // Get one Interventions
     * const interventions = await prisma.interventions.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InterventionsFindFirstArgs>(args?: SelectSubset<T, InterventionsFindFirstArgs<ExtArgs>>): Prisma__InterventionsClient<$Result.GetResult<Prisma.$InterventionsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Interventions that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InterventionsFindFirstOrThrowArgs} args - Arguments to find a Interventions
     * @example
     * // Get one Interventions
     * const interventions = await prisma.interventions.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InterventionsFindFirstOrThrowArgs>(args?: SelectSubset<T, InterventionsFindFirstOrThrowArgs<ExtArgs>>): Prisma__InterventionsClient<$Result.GetResult<Prisma.$InterventionsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Interventions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InterventionsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Interventions
     * const interventions = await prisma.interventions.findMany()
     * 
     * // Get first 10 Interventions
     * const interventions = await prisma.interventions.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const interventionsWithIdOnly = await prisma.interventions.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends InterventionsFindManyArgs>(args?: SelectSubset<T, InterventionsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InterventionsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Interventions.
     * @param {InterventionsCreateArgs} args - Arguments to create a Interventions.
     * @example
     * // Create one Interventions
     * const Interventions = await prisma.interventions.create({
     *   data: {
     *     // ... data to create a Interventions
     *   }
     * })
     * 
     */
    create<T extends InterventionsCreateArgs>(args: SelectSubset<T, InterventionsCreateArgs<ExtArgs>>): Prisma__InterventionsClient<$Result.GetResult<Prisma.$InterventionsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Interventions.
     * @param {InterventionsCreateManyArgs} args - Arguments to create many Interventions.
     * @example
     * // Create many Interventions
     * const interventions = await prisma.interventions.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InterventionsCreateManyArgs>(args?: SelectSubset<T, InterventionsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Interventions and returns the data saved in the database.
     * @param {InterventionsCreateManyAndReturnArgs} args - Arguments to create many Interventions.
     * @example
     * // Create many Interventions
     * const interventions = await prisma.interventions.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Interventions and only return the `id`
     * const interventionsWithIdOnly = await prisma.interventions.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends InterventionsCreateManyAndReturnArgs>(args?: SelectSubset<T, InterventionsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InterventionsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Interventions.
     * @param {InterventionsDeleteArgs} args - Arguments to delete one Interventions.
     * @example
     * // Delete one Interventions
     * const Interventions = await prisma.interventions.delete({
     *   where: {
     *     // ... filter to delete one Interventions
     *   }
     * })
     * 
     */
    delete<T extends InterventionsDeleteArgs>(args: SelectSubset<T, InterventionsDeleteArgs<ExtArgs>>): Prisma__InterventionsClient<$Result.GetResult<Prisma.$InterventionsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Interventions.
     * @param {InterventionsUpdateArgs} args - Arguments to update one Interventions.
     * @example
     * // Update one Interventions
     * const interventions = await prisma.interventions.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InterventionsUpdateArgs>(args: SelectSubset<T, InterventionsUpdateArgs<ExtArgs>>): Prisma__InterventionsClient<$Result.GetResult<Prisma.$InterventionsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Interventions.
     * @param {InterventionsDeleteManyArgs} args - Arguments to filter Interventions to delete.
     * @example
     * // Delete a few Interventions
     * const { count } = await prisma.interventions.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InterventionsDeleteManyArgs>(args?: SelectSubset<T, InterventionsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Interventions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InterventionsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Interventions
     * const interventions = await prisma.interventions.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InterventionsUpdateManyArgs>(args: SelectSubset<T, InterventionsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Interventions and returns the data updated in the database.
     * @param {InterventionsUpdateManyAndReturnArgs} args - Arguments to update many Interventions.
     * @example
     * // Update many Interventions
     * const interventions = await prisma.interventions.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Interventions and only return the `id`
     * const interventionsWithIdOnly = await prisma.interventions.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends InterventionsUpdateManyAndReturnArgs>(args: SelectSubset<T, InterventionsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InterventionsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Interventions.
     * @param {InterventionsUpsertArgs} args - Arguments to update or create a Interventions.
     * @example
     * // Update or create a Interventions
     * const interventions = await prisma.interventions.upsert({
     *   create: {
     *     // ... data to create a Interventions
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Interventions we want to update
     *   }
     * })
     */
    upsert<T extends InterventionsUpsertArgs>(args: SelectSubset<T, InterventionsUpsertArgs<ExtArgs>>): Prisma__InterventionsClient<$Result.GetResult<Prisma.$InterventionsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Interventions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InterventionsCountArgs} args - Arguments to filter Interventions to count.
     * @example
     * // Count the number of Interventions
     * const count = await prisma.interventions.count({
     *   where: {
     *     // ... the filter for the Interventions we want to count
     *   }
     * })
    **/
    count<T extends InterventionsCountArgs>(
      args?: Subset<T, InterventionsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InterventionsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Interventions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InterventionsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InterventionsAggregateArgs>(args: Subset<T, InterventionsAggregateArgs>): Prisma.PrismaPromise<GetInterventionsAggregateType<T>>

    /**
     * Group by Interventions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InterventionsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InterventionsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InterventionsGroupByArgs['orderBy'] }
        : { orderBy?: InterventionsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InterventionsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInterventionsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Interventions model
   */
  readonly fields: InterventionsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Interventions.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InterventionsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    interventionRequest<T extends InterventionRequestDefaultArgs<ExtArgs> = {}>(args?: Subset<T, InterventionRequestDefaultArgs<ExtArgs>>): Prisma__InterventionRequestClient<$Result.GetResult<Prisma.$InterventionRequestPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    technician<T extends TechnicianDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TechnicianDefaultArgs<ExtArgs>>): Prisma__TechnicianClient<$Result.GetResult<Prisma.$TechnicianPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Interventions model
   */
  interface InterventionsFieldRefs {
    readonly id: FieldRef<"Interventions", 'Int'>
    readonly technicianId: FieldRef<"Interventions", 'Int'>
    readonly interventionRequestId: FieldRef<"Interventions", 'Int'>
    readonly description: FieldRef<"Interventions", 'String'>
    readonly createdAt: FieldRef<"Interventions", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Interventions findUnique
   */
  export type InterventionsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Interventions
     */
    select?: InterventionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Interventions
     */
    omit?: InterventionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InterventionsInclude<ExtArgs> | null
    /**
     * Filter, which Interventions to fetch.
     */
    where: InterventionsWhereUniqueInput
  }

  /**
   * Interventions findUniqueOrThrow
   */
  export type InterventionsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Interventions
     */
    select?: InterventionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Interventions
     */
    omit?: InterventionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InterventionsInclude<ExtArgs> | null
    /**
     * Filter, which Interventions to fetch.
     */
    where: InterventionsWhereUniqueInput
  }

  /**
   * Interventions findFirst
   */
  export type InterventionsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Interventions
     */
    select?: InterventionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Interventions
     */
    omit?: InterventionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InterventionsInclude<ExtArgs> | null
    /**
     * Filter, which Interventions to fetch.
     */
    where?: InterventionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Interventions to fetch.
     */
    orderBy?: InterventionsOrderByWithRelationInput | InterventionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Interventions.
     */
    cursor?: InterventionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Interventions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Interventions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Interventions.
     */
    distinct?: InterventionsScalarFieldEnum | InterventionsScalarFieldEnum[]
  }

  /**
   * Interventions findFirstOrThrow
   */
  export type InterventionsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Interventions
     */
    select?: InterventionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Interventions
     */
    omit?: InterventionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InterventionsInclude<ExtArgs> | null
    /**
     * Filter, which Interventions to fetch.
     */
    where?: InterventionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Interventions to fetch.
     */
    orderBy?: InterventionsOrderByWithRelationInput | InterventionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Interventions.
     */
    cursor?: InterventionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Interventions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Interventions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Interventions.
     */
    distinct?: InterventionsScalarFieldEnum | InterventionsScalarFieldEnum[]
  }

  /**
   * Interventions findMany
   */
  export type InterventionsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Interventions
     */
    select?: InterventionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Interventions
     */
    omit?: InterventionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InterventionsInclude<ExtArgs> | null
    /**
     * Filter, which Interventions to fetch.
     */
    where?: InterventionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Interventions to fetch.
     */
    orderBy?: InterventionsOrderByWithRelationInput | InterventionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Interventions.
     */
    cursor?: InterventionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Interventions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Interventions.
     */
    skip?: number
    distinct?: InterventionsScalarFieldEnum | InterventionsScalarFieldEnum[]
  }

  /**
   * Interventions create
   */
  export type InterventionsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Interventions
     */
    select?: InterventionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Interventions
     */
    omit?: InterventionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InterventionsInclude<ExtArgs> | null
    /**
     * The data needed to create a Interventions.
     */
    data: XOR<InterventionsCreateInput, InterventionsUncheckedCreateInput>
  }

  /**
   * Interventions createMany
   */
  export type InterventionsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Interventions.
     */
    data: InterventionsCreateManyInput | InterventionsCreateManyInput[]
  }

  /**
   * Interventions createManyAndReturn
   */
  export type InterventionsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Interventions
     */
    select?: InterventionsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Interventions
     */
    omit?: InterventionsOmit<ExtArgs> | null
    /**
     * The data used to create many Interventions.
     */
    data: InterventionsCreateManyInput | InterventionsCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InterventionsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Interventions update
   */
  export type InterventionsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Interventions
     */
    select?: InterventionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Interventions
     */
    omit?: InterventionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InterventionsInclude<ExtArgs> | null
    /**
     * The data needed to update a Interventions.
     */
    data: XOR<InterventionsUpdateInput, InterventionsUncheckedUpdateInput>
    /**
     * Choose, which Interventions to update.
     */
    where: InterventionsWhereUniqueInput
  }

  /**
   * Interventions updateMany
   */
  export type InterventionsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Interventions.
     */
    data: XOR<InterventionsUpdateManyMutationInput, InterventionsUncheckedUpdateManyInput>
    /**
     * Filter which Interventions to update
     */
    where?: InterventionsWhereInput
    /**
     * Limit how many Interventions to update.
     */
    limit?: number
  }

  /**
   * Interventions updateManyAndReturn
   */
  export type InterventionsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Interventions
     */
    select?: InterventionsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Interventions
     */
    omit?: InterventionsOmit<ExtArgs> | null
    /**
     * The data used to update Interventions.
     */
    data: XOR<InterventionsUpdateManyMutationInput, InterventionsUncheckedUpdateManyInput>
    /**
     * Filter which Interventions to update
     */
    where?: InterventionsWhereInput
    /**
     * Limit how many Interventions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InterventionsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Interventions upsert
   */
  export type InterventionsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Interventions
     */
    select?: InterventionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Interventions
     */
    omit?: InterventionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InterventionsInclude<ExtArgs> | null
    /**
     * The filter to search for the Interventions to update in case it exists.
     */
    where: InterventionsWhereUniqueInput
    /**
     * In case the Interventions found by the `where` argument doesn't exist, create a new Interventions with this data.
     */
    create: XOR<InterventionsCreateInput, InterventionsUncheckedCreateInput>
    /**
     * In case the Interventions was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InterventionsUpdateInput, InterventionsUncheckedUpdateInput>
  }

  /**
   * Interventions delete
   */
  export type InterventionsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Interventions
     */
    select?: InterventionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Interventions
     */
    omit?: InterventionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InterventionsInclude<ExtArgs> | null
    /**
     * Filter which Interventions to delete.
     */
    where: InterventionsWhereUniqueInput
  }

  /**
   * Interventions deleteMany
   */
  export type InterventionsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Interventions to delete
     */
    where?: InterventionsWhereInput
    /**
     * Limit how many Interventions to delete.
     */
    limit?: number
  }

  /**
   * Interventions without action
   */
  export type InterventionsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Interventions
     */
    select?: InterventionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Interventions
     */
    omit?: InterventionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InterventionsInclude<ExtArgs> | null
  }


  /**
   * Model Report
   */

  export type AggregateReport = {
    _count: ReportCountAggregateOutputType | null
    _avg: ReportAvgAggregateOutputType | null
    _sum: ReportSumAggregateOutputType | null
    _min: ReportMinAggregateOutputType | null
    _max: ReportMaxAggregateOutputType | null
  }

  export type ReportAvgAggregateOutputType = {
    id: number | null
    reporterId: number | null
    assetId: number | null
    categoryId: number | null
  }

  export type ReportSumAggregateOutputType = {
    id: number | null
    reporterId: number | null
    assetId: number | null
    categoryId: number | null
  }

  export type ReportMinAggregateOutputType = {
    id: number | null
    reporterId: number | null
    assetId: number | null
    categoryId: number | null
    description: string | null
    imageUrl: string | null
    type: $Enums.OperationType | null
    status: $Enums.ReportStatus | null
    priority: $Enums.Priority | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ReportMaxAggregateOutputType = {
    id: number | null
    reporterId: number | null
    assetId: number | null
    categoryId: number | null
    description: string | null
    imageUrl: string | null
    type: $Enums.OperationType | null
    status: $Enums.ReportStatus | null
    priority: $Enums.Priority | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ReportCountAggregateOutputType = {
    id: number
    reporterId: number
    assetId: number
    categoryId: number
    description: number
    imageUrl: number
    type: number
    status: number
    priority: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ReportAvgAggregateInputType = {
    id?: true
    reporterId?: true
    assetId?: true
    categoryId?: true
  }

  export type ReportSumAggregateInputType = {
    id?: true
    reporterId?: true
    assetId?: true
    categoryId?: true
  }

  export type ReportMinAggregateInputType = {
    id?: true
    reporterId?: true
    assetId?: true
    categoryId?: true
    description?: true
    imageUrl?: true
    type?: true
    status?: true
    priority?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ReportMaxAggregateInputType = {
    id?: true
    reporterId?: true
    assetId?: true
    categoryId?: true
    description?: true
    imageUrl?: true
    type?: true
    status?: true
    priority?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ReportCountAggregateInputType = {
    id?: true
    reporterId?: true
    assetId?: true
    categoryId?: true
    description?: true
    imageUrl?: true
    type?: true
    status?: true
    priority?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ReportAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Report to aggregate.
     */
    where?: ReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reports to fetch.
     */
    orderBy?: ReportOrderByWithRelationInput | ReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Reports
    **/
    _count?: true | ReportCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReportAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReportSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReportMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReportMaxAggregateInputType
  }

  export type GetReportAggregateType<T extends ReportAggregateArgs> = {
        [P in keyof T & keyof AggregateReport]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReport[P]>
      : GetScalarType<T[P], AggregateReport[P]>
  }




  export type ReportGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReportWhereInput
    orderBy?: ReportOrderByWithAggregationInput | ReportOrderByWithAggregationInput[]
    by: ReportScalarFieldEnum[] | ReportScalarFieldEnum
    having?: ReportScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReportCountAggregateInputType | true
    _avg?: ReportAvgAggregateInputType
    _sum?: ReportSumAggregateInputType
    _min?: ReportMinAggregateInputType
    _max?: ReportMaxAggregateInputType
  }

  export type ReportGroupByOutputType = {
    id: number
    reporterId: number
    assetId: number | null
    categoryId: number | null
    description: string | null
    imageUrl: string | null
    type: $Enums.OperationType
    status: $Enums.ReportStatus
    priority: $Enums.Priority
    createdAt: Date
    updatedAt: Date
    _count: ReportCountAggregateOutputType | null
    _avg: ReportAvgAggregateOutputType | null
    _sum: ReportSumAggregateOutputType | null
    _min: ReportMinAggregateOutputType | null
    _max: ReportMaxAggregateOutputType | null
  }

  type GetReportGroupByPayload<T extends ReportGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReportGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReportGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReportGroupByOutputType[P]>
            : GetScalarType<T[P], ReportGroupByOutputType[P]>
        }
      >
    >


  export type ReportSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    reporterId?: boolean
    assetId?: boolean
    categoryId?: boolean
    description?: boolean
    imageUrl?: boolean
    type?: boolean
    status?: boolean
    priority?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    reporter?: boolean | UserDefaultArgs<ExtArgs>
    asset?: boolean | Report$assetArgs<ExtArgs>
    category?: boolean | Report$categoryArgs<ExtArgs>
    interventionRequests?: boolean | Report$interventionRequestsArgs<ExtArgs>
    _count?: boolean | ReportCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["report"]>

  export type ReportSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    reporterId?: boolean
    assetId?: boolean
    categoryId?: boolean
    description?: boolean
    imageUrl?: boolean
    type?: boolean
    status?: boolean
    priority?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    reporter?: boolean | UserDefaultArgs<ExtArgs>
    asset?: boolean | Report$assetArgs<ExtArgs>
    category?: boolean | Report$categoryArgs<ExtArgs>
  }, ExtArgs["result"]["report"]>

  export type ReportSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    reporterId?: boolean
    assetId?: boolean
    categoryId?: boolean
    description?: boolean
    imageUrl?: boolean
    type?: boolean
    status?: boolean
    priority?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    reporter?: boolean | UserDefaultArgs<ExtArgs>
    asset?: boolean | Report$assetArgs<ExtArgs>
    category?: boolean | Report$categoryArgs<ExtArgs>
  }, ExtArgs["result"]["report"]>

  export type ReportSelectScalar = {
    id?: boolean
    reporterId?: boolean
    assetId?: boolean
    categoryId?: boolean
    description?: boolean
    imageUrl?: boolean
    type?: boolean
    status?: boolean
    priority?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ReportOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "reporterId" | "assetId" | "categoryId" | "description" | "imageUrl" | "type" | "status" | "priority" | "createdAt" | "updatedAt", ExtArgs["result"]["report"]>
  export type ReportInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reporter?: boolean | UserDefaultArgs<ExtArgs>
    asset?: boolean | Report$assetArgs<ExtArgs>
    category?: boolean | Report$categoryArgs<ExtArgs>
    interventionRequests?: boolean | Report$interventionRequestsArgs<ExtArgs>
    _count?: boolean | ReportCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ReportIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reporter?: boolean | UserDefaultArgs<ExtArgs>
    asset?: boolean | Report$assetArgs<ExtArgs>
    category?: boolean | Report$categoryArgs<ExtArgs>
  }
  export type ReportIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reporter?: boolean | UserDefaultArgs<ExtArgs>
    asset?: boolean | Report$assetArgs<ExtArgs>
    category?: boolean | Report$categoryArgs<ExtArgs>
  }

  export type $ReportPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Report"
    objects: {
      reporter: Prisma.$UserPayload<ExtArgs>
      asset: Prisma.$AssetPayload<ExtArgs> | null
      category: Prisma.$CategoryPayload<ExtArgs> | null
      interventionRequests: Prisma.$InterventionRequestPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      reporterId: number
      assetId: number | null
      categoryId: number | null
      description: string | null
      imageUrl: string | null
      type: $Enums.OperationType
      status: $Enums.ReportStatus
      priority: $Enums.Priority
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["report"]>
    composites: {}
  }

  type ReportGetPayload<S extends boolean | null | undefined | ReportDefaultArgs> = $Result.GetResult<Prisma.$ReportPayload, S>

  type ReportCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ReportFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ReportCountAggregateInputType | true
    }

  export interface ReportDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Report'], meta: { name: 'Report' } }
    /**
     * Find zero or one Report that matches the filter.
     * @param {ReportFindUniqueArgs} args - Arguments to find a Report
     * @example
     * // Get one Report
     * const report = await prisma.report.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReportFindUniqueArgs>(args: SelectSubset<T, ReportFindUniqueArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Report that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ReportFindUniqueOrThrowArgs} args - Arguments to find a Report
     * @example
     * // Get one Report
     * const report = await prisma.report.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReportFindUniqueOrThrowArgs>(args: SelectSubset<T, ReportFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Report that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportFindFirstArgs} args - Arguments to find a Report
     * @example
     * // Get one Report
     * const report = await prisma.report.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReportFindFirstArgs>(args?: SelectSubset<T, ReportFindFirstArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Report that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportFindFirstOrThrowArgs} args - Arguments to find a Report
     * @example
     * // Get one Report
     * const report = await prisma.report.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReportFindFirstOrThrowArgs>(args?: SelectSubset<T, ReportFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Reports that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Reports
     * const reports = await prisma.report.findMany()
     * 
     * // Get first 10 Reports
     * const reports = await prisma.report.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reportWithIdOnly = await prisma.report.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ReportFindManyArgs>(args?: SelectSubset<T, ReportFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Report.
     * @param {ReportCreateArgs} args - Arguments to create a Report.
     * @example
     * // Create one Report
     * const Report = await prisma.report.create({
     *   data: {
     *     // ... data to create a Report
     *   }
     * })
     * 
     */
    create<T extends ReportCreateArgs>(args: SelectSubset<T, ReportCreateArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Reports.
     * @param {ReportCreateManyArgs} args - Arguments to create many Reports.
     * @example
     * // Create many Reports
     * const report = await prisma.report.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReportCreateManyArgs>(args?: SelectSubset<T, ReportCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Reports and returns the data saved in the database.
     * @param {ReportCreateManyAndReturnArgs} args - Arguments to create many Reports.
     * @example
     * // Create many Reports
     * const report = await prisma.report.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Reports and only return the `id`
     * const reportWithIdOnly = await prisma.report.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ReportCreateManyAndReturnArgs>(args?: SelectSubset<T, ReportCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Report.
     * @param {ReportDeleteArgs} args - Arguments to delete one Report.
     * @example
     * // Delete one Report
     * const Report = await prisma.report.delete({
     *   where: {
     *     // ... filter to delete one Report
     *   }
     * })
     * 
     */
    delete<T extends ReportDeleteArgs>(args: SelectSubset<T, ReportDeleteArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Report.
     * @param {ReportUpdateArgs} args - Arguments to update one Report.
     * @example
     * // Update one Report
     * const report = await prisma.report.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReportUpdateArgs>(args: SelectSubset<T, ReportUpdateArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Reports.
     * @param {ReportDeleteManyArgs} args - Arguments to filter Reports to delete.
     * @example
     * // Delete a few Reports
     * const { count } = await prisma.report.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReportDeleteManyArgs>(args?: SelectSubset<T, ReportDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Reports
     * const report = await prisma.report.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReportUpdateManyArgs>(args: SelectSubset<T, ReportUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reports and returns the data updated in the database.
     * @param {ReportUpdateManyAndReturnArgs} args - Arguments to update many Reports.
     * @example
     * // Update many Reports
     * const report = await prisma.report.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Reports and only return the `id`
     * const reportWithIdOnly = await prisma.report.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ReportUpdateManyAndReturnArgs>(args: SelectSubset<T, ReportUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Report.
     * @param {ReportUpsertArgs} args - Arguments to update or create a Report.
     * @example
     * // Update or create a Report
     * const report = await prisma.report.upsert({
     *   create: {
     *     // ... data to create a Report
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Report we want to update
     *   }
     * })
     */
    upsert<T extends ReportUpsertArgs>(args: SelectSubset<T, ReportUpsertArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Reports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportCountArgs} args - Arguments to filter Reports to count.
     * @example
     * // Count the number of Reports
     * const count = await prisma.report.count({
     *   where: {
     *     // ... the filter for the Reports we want to count
     *   }
     * })
    **/
    count<T extends ReportCountArgs>(
      args?: Subset<T, ReportCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReportCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Report.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReportAggregateArgs>(args: Subset<T, ReportAggregateArgs>): Prisma.PrismaPromise<GetReportAggregateType<T>>

    /**
     * Group by Report.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReportGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReportGroupByArgs['orderBy'] }
        : { orderBy?: ReportGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReportGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReportGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Report model
   */
  readonly fields: ReportFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Report.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReportClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    reporter<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    asset<T extends Report$assetArgs<ExtArgs> = {}>(args?: Subset<T, Report$assetArgs<ExtArgs>>): Prisma__AssetClient<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    category<T extends Report$categoryArgs<ExtArgs> = {}>(args?: Subset<T, Report$categoryArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    interventionRequests<T extends Report$interventionRequestsArgs<ExtArgs> = {}>(args?: Subset<T, Report$interventionRequestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InterventionRequestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Report model
   */
  interface ReportFieldRefs {
    readonly id: FieldRef<"Report", 'Int'>
    readonly reporterId: FieldRef<"Report", 'Int'>
    readonly assetId: FieldRef<"Report", 'Int'>
    readonly categoryId: FieldRef<"Report", 'Int'>
    readonly description: FieldRef<"Report", 'String'>
    readonly imageUrl: FieldRef<"Report", 'String'>
    readonly type: FieldRef<"Report", 'OperationType'>
    readonly status: FieldRef<"Report", 'ReportStatus'>
    readonly priority: FieldRef<"Report", 'Priority'>
    readonly createdAt: FieldRef<"Report", 'DateTime'>
    readonly updatedAt: FieldRef<"Report", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Report findUnique
   */
  export type ReportFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Report
     */
    omit?: ReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * Filter, which Report to fetch.
     */
    where: ReportWhereUniqueInput
  }

  /**
   * Report findUniqueOrThrow
   */
  export type ReportFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Report
     */
    omit?: ReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * Filter, which Report to fetch.
     */
    where: ReportWhereUniqueInput
  }

  /**
   * Report findFirst
   */
  export type ReportFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Report
     */
    omit?: ReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * Filter, which Report to fetch.
     */
    where?: ReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reports to fetch.
     */
    orderBy?: ReportOrderByWithRelationInput | ReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reports.
     */
    cursor?: ReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reports.
     */
    distinct?: ReportScalarFieldEnum | ReportScalarFieldEnum[]
  }

  /**
   * Report findFirstOrThrow
   */
  export type ReportFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Report
     */
    omit?: ReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * Filter, which Report to fetch.
     */
    where?: ReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reports to fetch.
     */
    orderBy?: ReportOrderByWithRelationInput | ReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reports.
     */
    cursor?: ReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reports.
     */
    distinct?: ReportScalarFieldEnum | ReportScalarFieldEnum[]
  }

  /**
   * Report findMany
   */
  export type ReportFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Report
     */
    omit?: ReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * Filter, which Reports to fetch.
     */
    where?: ReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reports to fetch.
     */
    orderBy?: ReportOrderByWithRelationInput | ReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Reports.
     */
    cursor?: ReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reports.
     */
    skip?: number
    distinct?: ReportScalarFieldEnum | ReportScalarFieldEnum[]
  }

  /**
   * Report create
   */
  export type ReportCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Report
     */
    omit?: ReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * The data needed to create a Report.
     */
    data: XOR<ReportCreateInput, ReportUncheckedCreateInput>
  }

  /**
   * Report createMany
   */
  export type ReportCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Reports.
     */
    data: ReportCreateManyInput | ReportCreateManyInput[]
  }

  /**
   * Report createManyAndReturn
   */
  export type ReportCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Report
     */
    omit?: ReportOmit<ExtArgs> | null
    /**
     * The data used to create many Reports.
     */
    data: ReportCreateManyInput | ReportCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Report update
   */
  export type ReportUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Report
     */
    omit?: ReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * The data needed to update a Report.
     */
    data: XOR<ReportUpdateInput, ReportUncheckedUpdateInput>
    /**
     * Choose, which Report to update.
     */
    where: ReportWhereUniqueInput
  }

  /**
   * Report updateMany
   */
  export type ReportUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Reports.
     */
    data: XOR<ReportUpdateManyMutationInput, ReportUncheckedUpdateManyInput>
    /**
     * Filter which Reports to update
     */
    where?: ReportWhereInput
    /**
     * Limit how many Reports to update.
     */
    limit?: number
  }

  /**
   * Report updateManyAndReturn
   */
  export type ReportUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Report
     */
    omit?: ReportOmit<ExtArgs> | null
    /**
     * The data used to update Reports.
     */
    data: XOR<ReportUpdateManyMutationInput, ReportUncheckedUpdateManyInput>
    /**
     * Filter which Reports to update
     */
    where?: ReportWhereInput
    /**
     * Limit how many Reports to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Report upsert
   */
  export type ReportUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Report
     */
    omit?: ReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * The filter to search for the Report to update in case it exists.
     */
    where: ReportWhereUniqueInput
    /**
     * In case the Report found by the `where` argument doesn't exist, create a new Report with this data.
     */
    create: XOR<ReportCreateInput, ReportUncheckedCreateInput>
    /**
     * In case the Report was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReportUpdateInput, ReportUncheckedUpdateInput>
  }

  /**
   * Report delete
   */
  export type ReportDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Report
     */
    omit?: ReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * Filter which Report to delete.
     */
    where: ReportWhereUniqueInput
  }

  /**
   * Report deleteMany
   */
  export type ReportDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Reports to delete
     */
    where?: ReportWhereInput
    /**
     * Limit how many Reports to delete.
     */
    limit?: number
  }

  /**
   * Report.asset
   */
  export type Report$assetArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Asset
     */
    omit?: AssetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetInclude<ExtArgs> | null
    where?: AssetWhereInput
  }

  /**
   * Report.category
   */
  export type Report$categoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    where?: CategoryWhereInput
  }

  /**
   * Report.interventionRequests
   */
  export type Report$interventionRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InterventionRequest
     */
    select?: InterventionRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InterventionRequest
     */
    omit?: InterventionRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InterventionRequestInclude<ExtArgs> | null
    where?: InterventionRequestWhereInput
    orderBy?: InterventionRequestOrderByWithRelationInput | InterventionRequestOrderByWithRelationInput[]
    cursor?: InterventionRequestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InterventionRequestScalarFieldEnum | InterventionRequestScalarFieldEnum[]
  }

  /**
   * Report without action
   */
  export type ReportDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Report
     */
    omit?: ReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
  }


  /**
   * Model Schedule
   */

  export type AggregateSchedule = {
    _count: ScheduleCountAggregateOutputType | null
    _avg: ScheduleAvgAggregateOutputType | null
    _sum: ScheduleSumAggregateOutputType | null
    _min: ScheduleMinAggregateOutputType | null
    _max: ScheduleMaxAggregateOutputType | null
  }

  export type ScheduleAvgAggregateOutputType = {
    id: number | null
    assetId: number | null
    schedulerId: number | null
    categoryId: number | null
    frequency: number | null
  }

  export type ScheduleSumAggregateOutputType = {
    id: number | null
    assetId: number | null
    schedulerId: number | null
    categoryId: number | null
    frequency: number | null
  }

  export type ScheduleMinAggregateOutputType = {
    id: number | null
    assetId: number | null
    schedulerId: number | null
    categoryId: number | null
    description: string | null
    lastMaintenanceDate: string | null
    frequency: number | null
    priority: $Enums.Priority | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ScheduleMaxAggregateOutputType = {
    id: number | null
    assetId: number | null
    schedulerId: number | null
    categoryId: number | null
    description: string | null
    lastMaintenanceDate: string | null
    frequency: number | null
    priority: $Enums.Priority | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ScheduleCountAggregateOutputType = {
    id: number
    assetId: number
    schedulerId: number
    categoryId: number
    description: number
    lastMaintenanceDate: number
    frequency: number
    priority: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ScheduleAvgAggregateInputType = {
    id?: true
    assetId?: true
    schedulerId?: true
    categoryId?: true
    frequency?: true
  }

  export type ScheduleSumAggregateInputType = {
    id?: true
    assetId?: true
    schedulerId?: true
    categoryId?: true
    frequency?: true
  }

  export type ScheduleMinAggregateInputType = {
    id?: true
    assetId?: true
    schedulerId?: true
    categoryId?: true
    description?: true
    lastMaintenanceDate?: true
    frequency?: true
    priority?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ScheduleMaxAggregateInputType = {
    id?: true
    assetId?: true
    schedulerId?: true
    categoryId?: true
    description?: true
    lastMaintenanceDate?: true
    frequency?: true
    priority?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ScheduleCountAggregateInputType = {
    id?: true
    assetId?: true
    schedulerId?: true
    categoryId?: true
    description?: true
    lastMaintenanceDate?: true
    frequency?: true
    priority?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ScheduleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Schedule to aggregate.
     */
    where?: ScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Schedules to fetch.
     */
    orderBy?: ScheduleOrderByWithRelationInput | ScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Schedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Schedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Schedules
    **/
    _count?: true | ScheduleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ScheduleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ScheduleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ScheduleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ScheduleMaxAggregateInputType
  }

  export type GetScheduleAggregateType<T extends ScheduleAggregateArgs> = {
        [P in keyof T & keyof AggregateSchedule]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSchedule[P]>
      : GetScalarType<T[P], AggregateSchedule[P]>
  }




  export type ScheduleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScheduleWhereInput
    orderBy?: ScheduleOrderByWithAggregationInput | ScheduleOrderByWithAggregationInput[]
    by: ScheduleScalarFieldEnum[] | ScheduleScalarFieldEnum
    having?: ScheduleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ScheduleCountAggregateInputType | true
    _avg?: ScheduleAvgAggregateInputType
    _sum?: ScheduleSumAggregateInputType
    _min?: ScheduleMinAggregateInputType
    _max?: ScheduleMaxAggregateInputType
  }

  export type ScheduleGroupByOutputType = {
    id: number
    assetId: number | null
    schedulerId: number
    categoryId: number | null
    description: string | null
    lastMaintenanceDate: string
    frequency: number
    priority: $Enums.Priority
    createdAt: Date
    updatedAt: Date
    _count: ScheduleCountAggregateOutputType | null
    _avg: ScheduleAvgAggregateOutputType | null
    _sum: ScheduleSumAggregateOutputType | null
    _min: ScheduleMinAggregateOutputType | null
    _max: ScheduleMaxAggregateOutputType | null
  }

  type GetScheduleGroupByPayload<T extends ScheduleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ScheduleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ScheduleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ScheduleGroupByOutputType[P]>
            : GetScalarType<T[P], ScheduleGroupByOutputType[P]>
        }
      >
    >


  export type ScheduleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    assetId?: boolean
    schedulerId?: boolean
    categoryId?: boolean
    description?: boolean
    lastMaintenanceDate?: boolean
    frequency?: boolean
    priority?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    asset?: boolean | Schedule$assetArgs<ExtArgs>
    category?: boolean | Schedule$categoryArgs<ExtArgs>
    scheduler?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["schedule"]>

  export type ScheduleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    assetId?: boolean
    schedulerId?: boolean
    categoryId?: boolean
    description?: boolean
    lastMaintenanceDate?: boolean
    frequency?: boolean
    priority?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    asset?: boolean | Schedule$assetArgs<ExtArgs>
    category?: boolean | Schedule$categoryArgs<ExtArgs>
    scheduler?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["schedule"]>

  export type ScheduleSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    assetId?: boolean
    schedulerId?: boolean
    categoryId?: boolean
    description?: boolean
    lastMaintenanceDate?: boolean
    frequency?: boolean
    priority?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    asset?: boolean | Schedule$assetArgs<ExtArgs>
    category?: boolean | Schedule$categoryArgs<ExtArgs>
    scheduler?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["schedule"]>

  export type ScheduleSelectScalar = {
    id?: boolean
    assetId?: boolean
    schedulerId?: boolean
    categoryId?: boolean
    description?: boolean
    lastMaintenanceDate?: boolean
    frequency?: boolean
    priority?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ScheduleOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "assetId" | "schedulerId" | "categoryId" | "description" | "lastMaintenanceDate" | "frequency" | "priority" | "createdAt" | "updatedAt", ExtArgs["result"]["schedule"]>
  export type ScheduleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    asset?: boolean | Schedule$assetArgs<ExtArgs>
    category?: boolean | Schedule$categoryArgs<ExtArgs>
    scheduler?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ScheduleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    asset?: boolean | Schedule$assetArgs<ExtArgs>
    category?: boolean | Schedule$categoryArgs<ExtArgs>
    scheduler?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ScheduleIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    asset?: boolean | Schedule$assetArgs<ExtArgs>
    category?: boolean | Schedule$categoryArgs<ExtArgs>
    scheduler?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $SchedulePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Schedule"
    objects: {
      asset: Prisma.$AssetPayload<ExtArgs> | null
      category: Prisma.$CategoryPayload<ExtArgs> | null
      scheduler: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      assetId: number | null
      schedulerId: number
      categoryId: number | null
      description: string | null
      lastMaintenanceDate: string
      frequency: number
      priority: $Enums.Priority
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["schedule"]>
    composites: {}
  }

  type ScheduleGetPayload<S extends boolean | null | undefined | ScheduleDefaultArgs> = $Result.GetResult<Prisma.$SchedulePayload, S>

  type ScheduleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ScheduleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ScheduleCountAggregateInputType | true
    }

  export interface ScheduleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Schedule'], meta: { name: 'Schedule' } }
    /**
     * Find zero or one Schedule that matches the filter.
     * @param {ScheduleFindUniqueArgs} args - Arguments to find a Schedule
     * @example
     * // Get one Schedule
     * const schedule = await prisma.schedule.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ScheduleFindUniqueArgs>(args: SelectSubset<T, ScheduleFindUniqueArgs<ExtArgs>>): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Schedule that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ScheduleFindUniqueOrThrowArgs} args - Arguments to find a Schedule
     * @example
     * // Get one Schedule
     * const schedule = await prisma.schedule.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ScheduleFindUniqueOrThrowArgs>(args: SelectSubset<T, ScheduleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Schedule that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleFindFirstArgs} args - Arguments to find a Schedule
     * @example
     * // Get one Schedule
     * const schedule = await prisma.schedule.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ScheduleFindFirstArgs>(args?: SelectSubset<T, ScheduleFindFirstArgs<ExtArgs>>): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Schedule that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleFindFirstOrThrowArgs} args - Arguments to find a Schedule
     * @example
     * // Get one Schedule
     * const schedule = await prisma.schedule.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ScheduleFindFirstOrThrowArgs>(args?: SelectSubset<T, ScheduleFindFirstOrThrowArgs<ExtArgs>>): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Schedules that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Schedules
     * const schedules = await prisma.schedule.findMany()
     * 
     * // Get first 10 Schedules
     * const schedules = await prisma.schedule.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const scheduleWithIdOnly = await prisma.schedule.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ScheduleFindManyArgs>(args?: SelectSubset<T, ScheduleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Schedule.
     * @param {ScheduleCreateArgs} args - Arguments to create a Schedule.
     * @example
     * // Create one Schedule
     * const Schedule = await prisma.schedule.create({
     *   data: {
     *     // ... data to create a Schedule
     *   }
     * })
     * 
     */
    create<T extends ScheduleCreateArgs>(args: SelectSubset<T, ScheduleCreateArgs<ExtArgs>>): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Schedules.
     * @param {ScheduleCreateManyArgs} args - Arguments to create many Schedules.
     * @example
     * // Create many Schedules
     * const schedule = await prisma.schedule.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ScheduleCreateManyArgs>(args?: SelectSubset<T, ScheduleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Schedules and returns the data saved in the database.
     * @param {ScheduleCreateManyAndReturnArgs} args - Arguments to create many Schedules.
     * @example
     * // Create many Schedules
     * const schedule = await prisma.schedule.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Schedules and only return the `id`
     * const scheduleWithIdOnly = await prisma.schedule.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ScheduleCreateManyAndReturnArgs>(args?: SelectSubset<T, ScheduleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Schedule.
     * @param {ScheduleDeleteArgs} args - Arguments to delete one Schedule.
     * @example
     * // Delete one Schedule
     * const Schedule = await prisma.schedule.delete({
     *   where: {
     *     // ... filter to delete one Schedule
     *   }
     * })
     * 
     */
    delete<T extends ScheduleDeleteArgs>(args: SelectSubset<T, ScheduleDeleteArgs<ExtArgs>>): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Schedule.
     * @param {ScheduleUpdateArgs} args - Arguments to update one Schedule.
     * @example
     * // Update one Schedule
     * const schedule = await prisma.schedule.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ScheduleUpdateArgs>(args: SelectSubset<T, ScheduleUpdateArgs<ExtArgs>>): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Schedules.
     * @param {ScheduleDeleteManyArgs} args - Arguments to filter Schedules to delete.
     * @example
     * // Delete a few Schedules
     * const { count } = await prisma.schedule.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ScheduleDeleteManyArgs>(args?: SelectSubset<T, ScheduleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Schedules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Schedules
     * const schedule = await prisma.schedule.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ScheduleUpdateManyArgs>(args: SelectSubset<T, ScheduleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Schedules and returns the data updated in the database.
     * @param {ScheduleUpdateManyAndReturnArgs} args - Arguments to update many Schedules.
     * @example
     * // Update many Schedules
     * const schedule = await prisma.schedule.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Schedules and only return the `id`
     * const scheduleWithIdOnly = await prisma.schedule.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ScheduleUpdateManyAndReturnArgs>(args: SelectSubset<T, ScheduleUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Schedule.
     * @param {ScheduleUpsertArgs} args - Arguments to update or create a Schedule.
     * @example
     * // Update or create a Schedule
     * const schedule = await prisma.schedule.upsert({
     *   create: {
     *     // ... data to create a Schedule
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Schedule we want to update
     *   }
     * })
     */
    upsert<T extends ScheduleUpsertArgs>(args: SelectSubset<T, ScheduleUpsertArgs<ExtArgs>>): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Schedules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleCountArgs} args - Arguments to filter Schedules to count.
     * @example
     * // Count the number of Schedules
     * const count = await prisma.schedule.count({
     *   where: {
     *     // ... the filter for the Schedules we want to count
     *   }
     * })
    **/
    count<T extends ScheduleCountArgs>(
      args?: Subset<T, ScheduleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ScheduleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Schedule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ScheduleAggregateArgs>(args: Subset<T, ScheduleAggregateArgs>): Prisma.PrismaPromise<GetScheduleAggregateType<T>>

    /**
     * Group by Schedule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ScheduleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ScheduleGroupByArgs['orderBy'] }
        : { orderBy?: ScheduleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ScheduleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetScheduleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Schedule model
   */
  readonly fields: ScheduleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Schedule.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ScheduleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    asset<T extends Schedule$assetArgs<ExtArgs> = {}>(args?: Subset<T, Schedule$assetArgs<ExtArgs>>): Prisma__AssetClient<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    category<T extends Schedule$categoryArgs<ExtArgs> = {}>(args?: Subset<T, Schedule$categoryArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    scheduler<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Schedule model
   */
  interface ScheduleFieldRefs {
    readonly id: FieldRef<"Schedule", 'Int'>
    readonly assetId: FieldRef<"Schedule", 'Int'>
    readonly schedulerId: FieldRef<"Schedule", 'Int'>
    readonly categoryId: FieldRef<"Schedule", 'Int'>
    readonly description: FieldRef<"Schedule", 'String'>
    readonly lastMaintenanceDate: FieldRef<"Schedule", 'String'>
    readonly frequency: FieldRef<"Schedule", 'Int'>
    readonly priority: FieldRef<"Schedule", 'Priority'>
    readonly createdAt: FieldRef<"Schedule", 'DateTime'>
    readonly updatedAt: FieldRef<"Schedule", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Schedule findUnique
   */
  export type ScheduleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Schedule
     */
    omit?: ScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * Filter, which Schedule to fetch.
     */
    where: ScheduleWhereUniqueInput
  }

  /**
   * Schedule findUniqueOrThrow
   */
  export type ScheduleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Schedule
     */
    omit?: ScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * Filter, which Schedule to fetch.
     */
    where: ScheduleWhereUniqueInput
  }

  /**
   * Schedule findFirst
   */
  export type ScheduleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Schedule
     */
    omit?: ScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * Filter, which Schedule to fetch.
     */
    where?: ScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Schedules to fetch.
     */
    orderBy?: ScheduleOrderByWithRelationInput | ScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Schedules.
     */
    cursor?: ScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Schedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Schedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Schedules.
     */
    distinct?: ScheduleScalarFieldEnum | ScheduleScalarFieldEnum[]
  }

  /**
   * Schedule findFirstOrThrow
   */
  export type ScheduleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Schedule
     */
    omit?: ScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * Filter, which Schedule to fetch.
     */
    where?: ScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Schedules to fetch.
     */
    orderBy?: ScheduleOrderByWithRelationInput | ScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Schedules.
     */
    cursor?: ScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Schedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Schedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Schedules.
     */
    distinct?: ScheduleScalarFieldEnum | ScheduleScalarFieldEnum[]
  }

  /**
   * Schedule findMany
   */
  export type ScheduleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Schedule
     */
    omit?: ScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * Filter, which Schedules to fetch.
     */
    where?: ScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Schedules to fetch.
     */
    orderBy?: ScheduleOrderByWithRelationInput | ScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Schedules.
     */
    cursor?: ScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Schedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Schedules.
     */
    skip?: number
    distinct?: ScheduleScalarFieldEnum | ScheduleScalarFieldEnum[]
  }

  /**
   * Schedule create
   */
  export type ScheduleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Schedule
     */
    omit?: ScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * The data needed to create a Schedule.
     */
    data: XOR<ScheduleCreateInput, ScheduleUncheckedCreateInput>
  }

  /**
   * Schedule createMany
   */
  export type ScheduleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Schedules.
     */
    data: ScheduleCreateManyInput | ScheduleCreateManyInput[]
  }

  /**
   * Schedule createManyAndReturn
   */
  export type ScheduleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Schedule
     */
    omit?: ScheduleOmit<ExtArgs> | null
    /**
     * The data used to create many Schedules.
     */
    data: ScheduleCreateManyInput | ScheduleCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Schedule update
   */
  export type ScheduleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Schedule
     */
    omit?: ScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * The data needed to update a Schedule.
     */
    data: XOR<ScheduleUpdateInput, ScheduleUncheckedUpdateInput>
    /**
     * Choose, which Schedule to update.
     */
    where: ScheduleWhereUniqueInput
  }

  /**
   * Schedule updateMany
   */
  export type ScheduleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Schedules.
     */
    data: XOR<ScheduleUpdateManyMutationInput, ScheduleUncheckedUpdateManyInput>
    /**
     * Filter which Schedules to update
     */
    where?: ScheduleWhereInput
    /**
     * Limit how many Schedules to update.
     */
    limit?: number
  }

  /**
   * Schedule updateManyAndReturn
   */
  export type ScheduleUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Schedule
     */
    omit?: ScheduleOmit<ExtArgs> | null
    /**
     * The data used to update Schedules.
     */
    data: XOR<ScheduleUpdateManyMutationInput, ScheduleUncheckedUpdateManyInput>
    /**
     * Filter which Schedules to update
     */
    where?: ScheduleWhereInput
    /**
     * Limit how many Schedules to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Schedule upsert
   */
  export type ScheduleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Schedule
     */
    omit?: ScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * The filter to search for the Schedule to update in case it exists.
     */
    where: ScheduleWhereUniqueInput
    /**
     * In case the Schedule found by the `where` argument doesn't exist, create a new Schedule with this data.
     */
    create: XOR<ScheduleCreateInput, ScheduleUncheckedCreateInput>
    /**
     * In case the Schedule was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ScheduleUpdateInput, ScheduleUncheckedUpdateInput>
  }

  /**
   * Schedule delete
   */
  export type ScheduleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Schedule
     */
    omit?: ScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * Filter which Schedule to delete.
     */
    where: ScheduleWhereUniqueInput
  }

  /**
   * Schedule deleteMany
   */
  export type ScheduleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Schedules to delete
     */
    where?: ScheduleWhereInput
    /**
     * Limit how many Schedules to delete.
     */
    limit?: number
  }

  /**
   * Schedule.asset
   */
  export type Schedule$assetArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Asset
     */
    omit?: AssetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetInclude<ExtArgs> | null
    where?: AssetWhereInput
  }

  /**
   * Schedule.category
   */
  export type Schedule$categoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    where?: CategoryWhereInput
  }

  /**
   * Schedule without action
   */
  export type ScheduleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Schedule
     */
    omit?: ScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    password: string | null
    avatarUrl: string | null
    role: $Enums.Role | null
    approvalStatus: $Enums.ApprovalStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    password: string | null
    avatarUrl: string | null
    role: $Enums.Role | null
    approvalStatus: $Enums.ApprovalStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    email: number
    password: number
    avatarUrl: number
    role: number
    approvalStatus: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    avatarUrl?: true
    role?: true
    approvalStatus?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    avatarUrl?: true
    role?: true
    approvalStatus?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    avatarUrl?: true
    role?: true
    approvalStatus?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    name: string
    email: string
    password: string
    avatarUrl: string | null
    role: $Enums.Role
    approvalStatus: $Enums.ApprovalStatus
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    avatarUrl?: boolean
    role?: boolean
    approvalStatus?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    technicianData?: boolean | User$technicianDataArgs<ExtArgs>
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    reports?: boolean | User$reportsArgs<ExtArgs>
    interventionRequests?: boolean | User$interventionRequestsArgs<ExtArgs>
    createdSchedules?: boolean | User$createdSchedulesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    avatarUrl?: boolean
    role?: boolean
    approvalStatus?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    avatarUrl?: boolean
    role?: boolean
    approvalStatus?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    avatarUrl?: boolean
    role?: boolean
    approvalStatus?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "email" | "password" | "avatarUrl" | "role" | "approvalStatus" | "createdAt" | "updatedAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    technicianData?: boolean | User$technicianDataArgs<ExtArgs>
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    reports?: boolean | User$reportsArgs<ExtArgs>
    interventionRequests?: boolean | User$interventionRequestsArgs<ExtArgs>
    createdSchedules?: boolean | User$createdSchedulesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      technicianData: Prisma.$TechnicianPayload<ExtArgs> | null
      notifications: Prisma.$NotificationPayload<ExtArgs>[]
      reports: Prisma.$ReportPayload<ExtArgs>[]
      interventionRequests: Prisma.$InterventionRequestPayload<ExtArgs>[]
      createdSchedules: Prisma.$SchedulePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      email: string
      password: string
      avatarUrl: string | null
      role: $Enums.Role
      approvalStatus: $Enums.ApprovalStatus
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    technicianData<T extends User$technicianDataArgs<ExtArgs> = {}>(args?: Subset<T, User$technicianDataArgs<ExtArgs>>): Prisma__TechnicianClient<$Result.GetResult<Prisma.$TechnicianPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    notifications<T extends User$notificationsArgs<ExtArgs> = {}>(args?: Subset<T, User$notificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    reports<T extends User$reportsArgs<ExtArgs> = {}>(args?: Subset<T, User$reportsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    interventionRequests<T extends User$interventionRequestsArgs<ExtArgs> = {}>(args?: Subset<T, User$interventionRequestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InterventionRequestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    createdSchedules<T extends User$createdSchedulesArgs<ExtArgs> = {}>(args?: Subset<T, User$createdSchedulesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly name: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly avatarUrl: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'Role'>
    readonly approvalStatus: FieldRef<"User", 'ApprovalStatus'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.technicianData
   */
  export type User$technicianDataArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Technician
     */
    select?: TechnicianSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Technician
     */
    omit?: TechnicianOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TechnicianInclude<ExtArgs> | null
    where?: TechnicianWhereInput
  }

  /**
   * User.notifications
   */
  export type User$notificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    cursor?: NotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * User.reports
   */
  export type User$reportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Report
     */
    omit?: ReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    where?: ReportWhereInput
    orderBy?: ReportOrderByWithRelationInput | ReportOrderByWithRelationInput[]
    cursor?: ReportWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReportScalarFieldEnum | ReportScalarFieldEnum[]
  }

  /**
   * User.interventionRequests
   */
  export type User$interventionRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InterventionRequest
     */
    select?: InterventionRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InterventionRequest
     */
    omit?: InterventionRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InterventionRequestInclude<ExtArgs> | null
    where?: InterventionRequestWhereInput
    orderBy?: InterventionRequestOrderByWithRelationInput | InterventionRequestOrderByWithRelationInput[]
    cursor?: InterventionRequestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InterventionRequestScalarFieldEnum | InterventionRequestScalarFieldEnum[]
  }

  /**
   * User.createdSchedules
   */
  export type User$createdSchedulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Schedule
     */
    omit?: ScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    where?: ScheduleWhereInput
    orderBy?: ScheduleOrderByWithRelationInput | ScheduleOrderByWithRelationInput[]
    cursor?: ScheduleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ScheduleScalarFieldEnum | ScheduleScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Technician
   */

  export type AggregateTechnician = {
    _count: TechnicianCountAggregateOutputType | null
    _avg: TechnicianAvgAggregateOutputType | null
    _sum: TechnicianSumAggregateOutputType | null
    _min: TechnicianMinAggregateOutputType | null
    _max: TechnicianMaxAggregateOutputType | null
  }

  export type TechnicianAvgAggregateOutputType = {
    userId: number | null
    professionId: number | null
  }

  export type TechnicianSumAggregateOutputType = {
    userId: number | null
    professionId: number | null
  }

  export type TechnicianMinAggregateOutputType = {
    userId: number | null
    professionId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TechnicianMaxAggregateOutputType = {
    userId: number | null
    professionId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TechnicianCountAggregateOutputType = {
    userId: number
    professionId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TechnicianAvgAggregateInputType = {
    userId?: true
    professionId?: true
  }

  export type TechnicianSumAggregateInputType = {
    userId?: true
    professionId?: true
  }

  export type TechnicianMinAggregateInputType = {
    userId?: true
    professionId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TechnicianMaxAggregateInputType = {
    userId?: true
    professionId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TechnicianCountAggregateInputType = {
    userId?: true
    professionId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TechnicianAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Technician to aggregate.
     */
    where?: TechnicianWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Technicians to fetch.
     */
    orderBy?: TechnicianOrderByWithRelationInput | TechnicianOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TechnicianWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Technicians from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Technicians.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Technicians
    **/
    _count?: true | TechnicianCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TechnicianAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TechnicianSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TechnicianMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TechnicianMaxAggregateInputType
  }

  export type GetTechnicianAggregateType<T extends TechnicianAggregateArgs> = {
        [P in keyof T & keyof AggregateTechnician]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTechnician[P]>
      : GetScalarType<T[P], AggregateTechnician[P]>
  }




  export type TechnicianGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TechnicianWhereInput
    orderBy?: TechnicianOrderByWithAggregationInput | TechnicianOrderByWithAggregationInput[]
    by: TechnicianScalarFieldEnum[] | TechnicianScalarFieldEnum
    having?: TechnicianScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TechnicianCountAggregateInputType | true
    _avg?: TechnicianAvgAggregateInputType
    _sum?: TechnicianSumAggregateInputType
    _min?: TechnicianMinAggregateInputType
    _max?: TechnicianMaxAggregateInputType
  }

  export type TechnicianGroupByOutputType = {
    userId: number
    professionId: number | null
    createdAt: Date
    updatedAt: Date
    _count: TechnicianCountAggregateOutputType | null
    _avg: TechnicianAvgAggregateOutputType | null
    _sum: TechnicianSumAggregateOutputType | null
    _min: TechnicianMinAggregateOutputType | null
    _max: TechnicianMaxAggregateOutputType | null
  }

  type GetTechnicianGroupByPayload<T extends TechnicianGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TechnicianGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TechnicianGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TechnicianGroupByOutputType[P]>
            : GetScalarType<T[P], TechnicianGroupByOutputType[P]>
        }
      >
    >


  export type TechnicianSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    professionId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    availabilities?: boolean | Technician$availabilitiesArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    profession?: boolean | Technician$professionArgs<ExtArgs>
    TechnicianAssignements?: boolean | Technician$TechnicianAssignementsArgs<ExtArgs>
    Interventions?: boolean | Technician$InterventionsArgs<ExtArgs>
    _count?: boolean | TechnicianCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["technician"]>

  export type TechnicianSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    professionId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    profession?: boolean | Technician$professionArgs<ExtArgs>
  }, ExtArgs["result"]["technician"]>

  export type TechnicianSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    professionId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    profession?: boolean | Technician$professionArgs<ExtArgs>
  }, ExtArgs["result"]["technician"]>

  export type TechnicianSelectScalar = {
    userId?: boolean
    professionId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TechnicianOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"userId" | "professionId" | "createdAt" | "updatedAt", ExtArgs["result"]["technician"]>
  export type TechnicianInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    availabilities?: boolean | Technician$availabilitiesArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    profession?: boolean | Technician$professionArgs<ExtArgs>
    TechnicianAssignements?: boolean | Technician$TechnicianAssignementsArgs<ExtArgs>
    Interventions?: boolean | Technician$InterventionsArgs<ExtArgs>
    _count?: boolean | TechnicianCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TechnicianIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    profession?: boolean | Technician$professionArgs<ExtArgs>
  }
  export type TechnicianIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    profession?: boolean | Technician$professionArgs<ExtArgs>
  }

  export type $TechnicianPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Technician"
    objects: {
      availabilities: Prisma.$TechnicianAvailabilityPayload<ExtArgs>[]
      user: Prisma.$UserPayload<ExtArgs>
      profession: Prisma.$ProfessionPayload<ExtArgs> | null
      TechnicianAssignements: Prisma.$TechnicianAssignementPayload<ExtArgs>[]
      Interventions: Prisma.$InterventionsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      userId: number
      professionId: number | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["technician"]>
    composites: {}
  }

  type TechnicianGetPayload<S extends boolean | null | undefined | TechnicianDefaultArgs> = $Result.GetResult<Prisma.$TechnicianPayload, S>

  type TechnicianCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TechnicianFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TechnicianCountAggregateInputType | true
    }

  export interface TechnicianDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Technician'], meta: { name: 'Technician' } }
    /**
     * Find zero or one Technician that matches the filter.
     * @param {TechnicianFindUniqueArgs} args - Arguments to find a Technician
     * @example
     * // Get one Technician
     * const technician = await prisma.technician.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TechnicianFindUniqueArgs>(args: SelectSubset<T, TechnicianFindUniqueArgs<ExtArgs>>): Prisma__TechnicianClient<$Result.GetResult<Prisma.$TechnicianPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Technician that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TechnicianFindUniqueOrThrowArgs} args - Arguments to find a Technician
     * @example
     * // Get one Technician
     * const technician = await prisma.technician.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TechnicianFindUniqueOrThrowArgs>(args: SelectSubset<T, TechnicianFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TechnicianClient<$Result.GetResult<Prisma.$TechnicianPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Technician that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TechnicianFindFirstArgs} args - Arguments to find a Technician
     * @example
     * // Get one Technician
     * const technician = await prisma.technician.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TechnicianFindFirstArgs>(args?: SelectSubset<T, TechnicianFindFirstArgs<ExtArgs>>): Prisma__TechnicianClient<$Result.GetResult<Prisma.$TechnicianPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Technician that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TechnicianFindFirstOrThrowArgs} args - Arguments to find a Technician
     * @example
     * // Get one Technician
     * const technician = await prisma.technician.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TechnicianFindFirstOrThrowArgs>(args?: SelectSubset<T, TechnicianFindFirstOrThrowArgs<ExtArgs>>): Prisma__TechnicianClient<$Result.GetResult<Prisma.$TechnicianPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Technicians that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TechnicianFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Technicians
     * const technicians = await prisma.technician.findMany()
     * 
     * // Get first 10 Technicians
     * const technicians = await prisma.technician.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const technicianWithUserIdOnly = await prisma.technician.findMany({ select: { userId: true } })
     * 
     */
    findMany<T extends TechnicianFindManyArgs>(args?: SelectSubset<T, TechnicianFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TechnicianPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Technician.
     * @param {TechnicianCreateArgs} args - Arguments to create a Technician.
     * @example
     * // Create one Technician
     * const Technician = await prisma.technician.create({
     *   data: {
     *     // ... data to create a Technician
     *   }
     * })
     * 
     */
    create<T extends TechnicianCreateArgs>(args: SelectSubset<T, TechnicianCreateArgs<ExtArgs>>): Prisma__TechnicianClient<$Result.GetResult<Prisma.$TechnicianPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Technicians.
     * @param {TechnicianCreateManyArgs} args - Arguments to create many Technicians.
     * @example
     * // Create many Technicians
     * const technician = await prisma.technician.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TechnicianCreateManyArgs>(args?: SelectSubset<T, TechnicianCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Technicians and returns the data saved in the database.
     * @param {TechnicianCreateManyAndReturnArgs} args - Arguments to create many Technicians.
     * @example
     * // Create many Technicians
     * const technician = await prisma.technician.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Technicians and only return the `userId`
     * const technicianWithUserIdOnly = await prisma.technician.createManyAndReturn({
     *   select: { userId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TechnicianCreateManyAndReturnArgs>(args?: SelectSubset<T, TechnicianCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TechnicianPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Technician.
     * @param {TechnicianDeleteArgs} args - Arguments to delete one Technician.
     * @example
     * // Delete one Technician
     * const Technician = await prisma.technician.delete({
     *   where: {
     *     // ... filter to delete one Technician
     *   }
     * })
     * 
     */
    delete<T extends TechnicianDeleteArgs>(args: SelectSubset<T, TechnicianDeleteArgs<ExtArgs>>): Prisma__TechnicianClient<$Result.GetResult<Prisma.$TechnicianPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Technician.
     * @param {TechnicianUpdateArgs} args - Arguments to update one Technician.
     * @example
     * // Update one Technician
     * const technician = await prisma.technician.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TechnicianUpdateArgs>(args: SelectSubset<T, TechnicianUpdateArgs<ExtArgs>>): Prisma__TechnicianClient<$Result.GetResult<Prisma.$TechnicianPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Technicians.
     * @param {TechnicianDeleteManyArgs} args - Arguments to filter Technicians to delete.
     * @example
     * // Delete a few Technicians
     * const { count } = await prisma.technician.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TechnicianDeleteManyArgs>(args?: SelectSubset<T, TechnicianDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Technicians.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TechnicianUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Technicians
     * const technician = await prisma.technician.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TechnicianUpdateManyArgs>(args: SelectSubset<T, TechnicianUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Technicians and returns the data updated in the database.
     * @param {TechnicianUpdateManyAndReturnArgs} args - Arguments to update many Technicians.
     * @example
     * // Update many Technicians
     * const technician = await prisma.technician.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Technicians and only return the `userId`
     * const technicianWithUserIdOnly = await prisma.technician.updateManyAndReturn({
     *   select: { userId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TechnicianUpdateManyAndReturnArgs>(args: SelectSubset<T, TechnicianUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TechnicianPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Technician.
     * @param {TechnicianUpsertArgs} args - Arguments to update or create a Technician.
     * @example
     * // Update or create a Technician
     * const technician = await prisma.technician.upsert({
     *   create: {
     *     // ... data to create a Technician
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Technician we want to update
     *   }
     * })
     */
    upsert<T extends TechnicianUpsertArgs>(args: SelectSubset<T, TechnicianUpsertArgs<ExtArgs>>): Prisma__TechnicianClient<$Result.GetResult<Prisma.$TechnicianPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Technicians.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TechnicianCountArgs} args - Arguments to filter Technicians to count.
     * @example
     * // Count the number of Technicians
     * const count = await prisma.technician.count({
     *   where: {
     *     // ... the filter for the Technicians we want to count
     *   }
     * })
    **/
    count<T extends TechnicianCountArgs>(
      args?: Subset<T, TechnicianCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TechnicianCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Technician.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TechnicianAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TechnicianAggregateArgs>(args: Subset<T, TechnicianAggregateArgs>): Prisma.PrismaPromise<GetTechnicianAggregateType<T>>

    /**
     * Group by Technician.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TechnicianGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TechnicianGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TechnicianGroupByArgs['orderBy'] }
        : { orderBy?: TechnicianGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TechnicianGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTechnicianGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Technician model
   */
  readonly fields: TechnicianFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Technician.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TechnicianClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    availabilities<T extends Technician$availabilitiesArgs<ExtArgs> = {}>(args?: Subset<T, Technician$availabilitiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TechnicianAvailabilityPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    profession<T extends Technician$professionArgs<ExtArgs> = {}>(args?: Subset<T, Technician$professionArgs<ExtArgs>>): Prisma__ProfessionClient<$Result.GetResult<Prisma.$ProfessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    TechnicianAssignements<T extends Technician$TechnicianAssignementsArgs<ExtArgs> = {}>(args?: Subset<T, Technician$TechnicianAssignementsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TechnicianAssignementPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Interventions<T extends Technician$InterventionsArgs<ExtArgs> = {}>(args?: Subset<T, Technician$InterventionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InterventionsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Technician model
   */
  interface TechnicianFieldRefs {
    readonly userId: FieldRef<"Technician", 'Int'>
    readonly professionId: FieldRef<"Technician", 'Int'>
    readonly createdAt: FieldRef<"Technician", 'DateTime'>
    readonly updatedAt: FieldRef<"Technician", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Technician findUnique
   */
  export type TechnicianFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Technician
     */
    select?: TechnicianSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Technician
     */
    omit?: TechnicianOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TechnicianInclude<ExtArgs> | null
    /**
     * Filter, which Technician to fetch.
     */
    where: TechnicianWhereUniqueInput
  }

  /**
   * Technician findUniqueOrThrow
   */
  export type TechnicianFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Technician
     */
    select?: TechnicianSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Technician
     */
    omit?: TechnicianOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TechnicianInclude<ExtArgs> | null
    /**
     * Filter, which Technician to fetch.
     */
    where: TechnicianWhereUniqueInput
  }

  /**
   * Technician findFirst
   */
  export type TechnicianFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Technician
     */
    select?: TechnicianSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Technician
     */
    omit?: TechnicianOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TechnicianInclude<ExtArgs> | null
    /**
     * Filter, which Technician to fetch.
     */
    where?: TechnicianWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Technicians to fetch.
     */
    orderBy?: TechnicianOrderByWithRelationInput | TechnicianOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Technicians.
     */
    cursor?: TechnicianWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Technicians from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Technicians.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Technicians.
     */
    distinct?: TechnicianScalarFieldEnum | TechnicianScalarFieldEnum[]
  }

  /**
   * Technician findFirstOrThrow
   */
  export type TechnicianFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Technician
     */
    select?: TechnicianSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Technician
     */
    omit?: TechnicianOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TechnicianInclude<ExtArgs> | null
    /**
     * Filter, which Technician to fetch.
     */
    where?: TechnicianWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Technicians to fetch.
     */
    orderBy?: TechnicianOrderByWithRelationInput | TechnicianOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Technicians.
     */
    cursor?: TechnicianWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Technicians from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Technicians.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Technicians.
     */
    distinct?: TechnicianScalarFieldEnum | TechnicianScalarFieldEnum[]
  }

  /**
   * Technician findMany
   */
  export type TechnicianFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Technician
     */
    select?: TechnicianSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Technician
     */
    omit?: TechnicianOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TechnicianInclude<ExtArgs> | null
    /**
     * Filter, which Technicians to fetch.
     */
    where?: TechnicianWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Technicians to fetch.
     */
    orderBy?: TechnicianOrderByWithRelationInput | TechnicianOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Technicians.
     */
    cursor?: TechnicianWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Technicians from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Technicians.
     */
    skip?: number
    distinct?: TechnicianScalarFieldEnum | TechnicianScalarFieldEnum[]
  }

  /**
   * Technician create
   */
  export type TechnicianCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Technician
     */
    select?: TechnicianSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Technician
     */
    omit?: TechnicianOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TechnicianInclude<ExtArgs> | null
    /**
     * The data needed to create a Technician.
     */
    data: XOR<TechnicianCreateInput, TechnicianUncheckedCreateInput>
  }

  /**
   * Technician createMany
   */
  export type TechnicianCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Technicians.
     */
    data: TechnicianCreateManyInput | TechnicianCreateManyInput[]
  }

  /**
   * Technician createManyAndReturn
   */
  export type TechnicianCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Technician
     */
    select?: TechnicianSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Technician
     */
    omit?: TechnicianOmit<ExtArgs> | null
    /**
     * The data used to create many Technicians.
     */
    data: TechnicianCreateManyInput | TechnicianCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TechnicianIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Technician update
   */
  export type TechnicianUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Technician
     */
    select?: TechnicianSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Technician
     */
    omit?: TechnicianOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TechnicianInclude<ExtArgs> | null
    /**
     * The data needed to update a Technician.
     */
    data: XOR<TechnicianUpdateInput, TechnicianUncheckedUpdateInput>
    /**
     * Choose, which Technician to update.
     */
    where: TechnicianWhereUniqueInput
  }

  /**
   * Technician updateMany
   */
  export type TechnicianUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Technicians.
     */
    data: XOR<TechnicianUpdateManyMutationInput, TechnicianUncheckedUpdateManyInput>
    /**
     * Filter which Technicians to update
     */
    where?: TechnicianWhereInput
    /**
     * Limit how many Technicians to update.
     */
    limit?: number
  }

  /**
   * Technician updateManyAndReturn
   */
  export type TechnicianUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Technician
     */
    select?: TechnicianSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Technician
     */
    omit?: TechnicianOmit<ExtArgs> | null
    /**
     * The data used to update Technicians.
     */
    data: XOR<TechnicianUpdateManyMutationInput, TechnicianUncheckedUpdateManyInput>
    /**
     * Filter which Technicians to update
     */
    where?: TechnicianWhereInput
    /**
     * Limit how many Technicians to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TechnicianIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Technician upsert
   */
  export type TechnicianUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Technician
     */
    select?: TechnicianSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Technician
     */
    omit?: TechnicianOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TechnicianInclude<ExtArgs> | null
    /**
     * The filter to search for the Technician to update in case it exists.
     */
    where: TechnicianWhereUniqueInput
    /**
     * In case the Technician found by the `where` argument doesn't exist, create a new Technician with this data.
     */
    create: XOR<TechnicianCreateInput, TechnicianUncheckedCreateInput>
    /**
     * In case the Technician was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TechnicianUpdateInput, TechnicianUncheckedUpdateInput>
  }

  /**
   * Technician delete
   */
  export type TechnicianDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Technician
     */
    select?: TechnicianSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Technician
     */
    omit?: TechnicianOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TechnicianInclude<ExtArgs> | null
    /**
     * Filter which Technician to delete.
     */
    where: TechnicianWhereUniqueInput
  }

  /**
   * Technician deleteMany
   */
  export type TechnicianDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Technicians to delete
     */
    where?: TechnicianWhereInput
    /**
     * Limit how many Technicians to delete.
     */
    limit?: number
  }

  /**
   * Technician.availabilities
   */
  export type Technician$availabilitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TechnicianAvailability
     */
    select?: TechnicianAvailabilitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the TechnicianAvailability
     */
    omit?: TechnicianAvailabilityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TechnicianAvailabilityInclude<ExtArgs> | null
    where?: TechnicianAvailabilityWhereInput
    orderBy?: TechnicianAvailabilityOrderByWithRelationInput | TechnicianAvailabilityOrderByWithRelationInput[]
    cursor?: TechnicianAvailabilityWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TechnicianAvailabilityScalarFieldEnum | TechnicianAvailabilityScalarFieldEnum[]
  }

  /**
   * Technician.profession
   */
  export type Technician$professionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profession
     */
    select?: ProfessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profession
     */
    omit?: ProfessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionInclude<ExtArgs> | null
    where?: ProfessionWhereInput
  }

  /**
   * Technician.TechnicianAssignements
   */
  export type Technician$TechnicianAssignementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TechnicianAssignement
     */
    select?: TechnicianAssignementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TechnicianAssignement
     */
    omit?: TechnicianAssignementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TechnicianAssignementInclude<ExtArgs> | null
    where?: TechnicianAssignementWhereInput
    orderBy?: TechnicianAssignementOrderByWithRelationInput | TechnicianAssignementOrderByWithRelationInput[]
    cursor?: TechnicianAssignementWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TechnicianAssignementScalarFieldEnum | TechnicianAssignementScalarFieldEnum[]
  }

  /**
   * Technician.Interventions
   */
  export type Technician$InterventionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Interventions
     */
    select?: InterventionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Interventions
     */
    omit?: InterventionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InterventionsInclude<ExtArgs> | null
    where?: InterventionsWhereInput
    orderBy?: InterventionsOrderByWithRelationInput | InterventionsOrderByWithRelationInput[]
    cursor?: InterventionsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InterventionsScalarFieldEnum | InterventionsScalarFieldEnum[]
  }

  /**
   * Technician without action
   */
  export type TechnicianDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Technician
     */
    select?: TechnicianSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Technician
     */
    omit?: TechnicianOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TechnicianInclude<ExtArgs> | null
  }


  /**
   * Model Profession
   */

  export type AggregateProfession = {
    _count: ProfessionCountAggregateOutputType | null
    _avg: ProfessionAvgAggregateOutputType | null
    _sum: ProfessionSumAggregateOutputType | null
    _min: ProfessionMinAggregateOutputType | null
    _max: ProfessionMaxAggregateOutputType | null
  }

  export type ProfessionAvgAggregateOutputType = {
    id: number | null
  }

  export type ProfessionSumAggregateOutputType = {
    id: number | null
  }

  export type ProfessionMinAggregateOutputType = {
    id: number | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProfessionMaxAggregateOutputType = {
    id: number | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProfessionCountAggregateOutputType = {
    id: number
    name: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ProfessionAvgAggregateInputType = {
    id?: true
  }

  export type ProfessionSumAggregateInputType = {
    id?: true
  }

  export type ProfessionMinAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProfessionMaxAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProfessionCountAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ProfessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Profession to aggregate.
     */
    where?: ProfessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Professions to fetch.
     */
    orderBy?: ProfessionOrderByWithRelationInput | ProfessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProfessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Professions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Professions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Professions
    **/
    _count?: true | ProfessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProfessionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProfessionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProfessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProfessionMaxAggregateInputType
  }

  export type GetProfessionAggregateType<T extends ProfessionAggregateArgs> = {
        [P in keyof T & keyof AggregateProfession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProfession[P]>
      : GetScalarType<T[P], AggregateProfession[P]>
  }




  export type ProfessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProfessionWhereInput
    orderBy?: ProfessionOrderByWithAggregationInput | ProfessionOrderByWithAggregationInput[]
    by: ProfessionScalarFieldEnum[] | ProfessionScalarFieldEnum
    having?: ProfessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProfessionCountAggregateInputType | true
    _avg?: ProfessionAvgAggregateInputType
    _sum?: ProfessionSumAggregateInputType
    _min?: ProfessionMinAggregateInputType
    _max?: ProfessionMaxAggregateInputType
  }

  export type ProfessionGroupByOutputType = {
    id: number
    name: string
    createdAt: Date
    updatedAt: Date
    _count: ProfessionCountAggregateOutputType | null
    _avg: ProfessionAvgAggregateOutputType | null
    _sum: ProfessionSumAggregateOutputType | null
    _min: ProfessionMinAggregateOutputType | null
    _max: ProfessionMaxAggregateOutputType | null
  }

  type GetProfessionGroupByPayload<T extends ProfessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProfessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProfessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProfessionGroupByOutputType[P]>
            : GetScalarType<T[P], ProfessionGroupByOutputType[P]>
        }
      >
    >


  export type ProfessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    technicians?: boolean | Profession$techniciansArgs<ExtArgs>
    _count?: boolean | ProfessionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["profession"]>

  export type ProfessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["profession"]>

  export type ProfessionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["profession"]>

  export type ProfessionSelectScalar = {
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ProfessionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "createdAt" | "updatedAt", ExtArgs["result"]["profession"]>
  export type ProfessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    technicians?: boolean | Profession$techniciansArgs<ExtArgs>
    _count?: boolean | ProfessionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProfessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ProfessionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ProfessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Profession"
    objects: {
      technicians: Prisma.$TechnicianPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["profession"]>
    composites: {}
  }

  type ProfessionGetPayload<S extends boolean | null | undefined | ProfessionDefaultArgs> = $Result.GetResult<Prisma.$ProfessionPayload, S>

  type ProfessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProfessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProfessionCountAggregateInputType | true
    }

  export interface ProfessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Profession'], meta: { name: 'Profession' } }
    /**
     * Find zero or one Profession that matches the filter.
     * @param {ProfessionFindUniqueArgs} args - Arguments to find a Profession
     * @example
     * // Get one Profession
     * const profession = await prisma.profession.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProfessionFindUniqueArgs>(args: SelectSubset<T, ProfessionFindUniqueArgs<ExtArgs>>): Prisma__ProfessionClient<$Result.GetResult<Prisma.$ProfessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Profession that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProfessionFindUniqueOrThrowArgs} args - Arguments to find a Profession
     * @example
     * // Get one Profession
     * const profession = await prisma.profession.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProfessionFindUniqueOrThrowArgs>(args: SelectSubset<T, ProfessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProfessionClient<$Result.GetResult<Prisma.$ProfessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Profession that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessionFindFirstArgs} args - Arguments to find a Profession
     * @example
     * // Get one Profession
     * const profession = await prisma.profession.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProfessionFindFirstArgs>(args?: SelectSubset<T, ProfessionFindFirstArgs<ExtArgs>>): Prisma__ProfessionClient<$Result.GetResult<Prisma.$ProfessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Profession that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessionFindFirstOrThrowArgs} args - Arguments to find a Profession
     * @example
     * // Get one Profession
     * const profession = await prisma.profession.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProfessionFindFirstOrThrowArgs>(args?: SelectSubset<T, ProfessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProfessionClient<$Result.GetResult<Prisma.$ProfessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Professions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Professions
     * const professions = await prisma.profession.findMany()
     * 
     * // Get first 10 Professions
     * const professions = await prisma.profession.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const professionWithIdOnly = await prisma.profession.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProfessionFindManyArgs>(args?: SelectSubset<T, ProfessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Profession.
     * @param {ProfessionCreateArgs} args - Arguments to create a Profession.
     * @example
     * // Create one Profession
     * const Profession = await prisma.profession.create({
     *   data: {
     *     // ... data to create a Profession
     *   }
     * })
     * 
     */
    create<T extends ProfessionCreateArgs>(args: SelectSubset<T, ProfessionCreateArgs<ExtArgs>>): Prisma__ProfessionClient<$Result.GetResult<Prisma.$ProfessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Professions.
     * @param {ProfessionCreateManyArgs} args - Arguments to create many Professions.
     * @example
     * // Create many Professions
     * const profession = await prisma.profession.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProfessionCreateManyArgs>(args?: SelectSubset<T, ProfessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Professions and returns the data saved in the database.
     * @param {ProfessionCreateManyAndReturnArgs} args - Arguments to create many Professions.
     * @example
     * // Create many Professions
     * const profession = await prisma.profession.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Professions and only return the `id`
     * const professionWithIdOnly = await prisma.profession.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProfessionCreateManyAndReturnArgs>(args?: SelectSubset<T, ProfessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfessionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Profession.
     * @param {ProfessionDeleteArgs} args - Arguments to delete one Profession.
     * @example
     * // Delete one Profession
     * const Profession = await prisma.profession.delete({
     *   where: {
     *     // ... filter to delete one Profession
     *   }
     * })
     * 
     */
    delete<T extends ProfessionDeleteArgs>(args: SelectSubset<T, ProfessionDeleteArgs<ExtArgs>>): Prisma__ProfessionClient<$Result.GetResult<Prisma.$ProfessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Profession.
     * @param {ProfessionUpdateArgs} args - Arguments to update one Profession.
     * @example
     * // Update one Profession
     * const profession = await prisma.profession.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProfessionUpdateArgs>(args: SelectSubset<T, ProfessionUpdateArgs<ExtArgs>>): Prisma__ProfessionClient<$Result.GetResult<Prisma.$ProfessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Professions.
     * @param {ProfessionDeleteManyArgs} args - Arguments to filter Professions to delete.
     * @example
     * // Delete a few Professions
     * const { count } = await prisma.profession.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProfessionDeleteManyArgs>(args?: SelectSubset<T, ProfessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Professions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Professions
     * const profession = await prisma.profession.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProfessionUpdateManyArgs>(args: SelectSubset<T, ProfessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Professions and returns the data updated in the database.
     * @param {ProfessionUpdateManyAndReturnArgs} args - Arguments to update many Professions.
     * @example
     * // Update many Professions
     * const profession = await prisma.profession.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Professions and only return the `id`
     * const professionWithIdOnly = await prisma.profession.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProfessionUpdateManyAndReturnArgs>(args: SelectSubset<T, ProfessionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfessionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Profession.
     * @param {ProfessionUpsertArgs} args - Arguments to update or create a Profession.
     * @example
     * // Update or create a Profession
     * const profession = await prisma.profession.upsert({
     *   create: {
     *     // ... data to create a Profession
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Profession we want to update
     *   }
     * })
     */
    upsert<T extends ProfessionUpsertArgs>(args: SelectSubset<T, ProfessionUpsertArgs<ExtArgs>>): Prisma__ProfessionClient<$Result.GetResult<Prisma.$ProfessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Professions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessionCountArgs} args - Arguments to filter Professions to count.
     * @example
     * // Count the number of Professions
     * const count = await prisma.profession.count({
     *   where: {
     *     // ... the filter for the Professions we want to count
     *   }
     * })
    **/
    count<T extends ProfessionCountArgs>(
      args?: Subset<T, ProfessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProfessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Profession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProfessionAggregateArgs>(args: Subset<T, ProfessionAggregateArgs>): Prisma.PrismaPromise<GetProfessionAggregateType<T>>

    /**
     * Group by Profession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProfessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProfessionGroupByArgs['orderBy'] }
        : { orderBy?: ProfessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProfessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProfessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Profession model
   */
  readonly fields: ProfessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Profession.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProfessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    technicians<T extends Profession$techniciansArgs<ExtArgs> = {}>(args?: Subset<T, Profession$techniciansArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TechnicianPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Profession model
   */
  interface ProfessionFieldRefs {
    readonly id: FieldRef<"Profession", 'Int'>
    readonly name: FieldRef<"Profession", 'String'>
    readonly createdAt: FieldRef<"Profession", 'DateTime'>
    readonly updatedAt: FieldRef<"Profession", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Profession findUnique
   */
  export type ProfessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profession
     */
    select?: ProfessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profession
     */
    omit?: ProfessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionInclude<ExtArgs> | null
    /**
     * Filter, which Profession to fetch.
     */
    where: ProfessionWhereUniqueInput
  }

  /**
   * Profession findUniqueOrThrow
   */
  export type ProfessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profession
     */
    select?: ProfessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profession
     */
    omit?: ProfessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionInclude<ExtArgs> | null
    /**
     * Filter, which Profession to fetch.
     */
    where: ProfessionWhereUniqueInput
  }

  /**
   * Profession findFirst
   */
  export type ProfessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profession
     */
    select?: ProfessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profession
     */
    omit?: ProfessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionInclude<ExtArgs> | null
    /**
     * Filter, which Profession to fetch.
     */
    where?: ProfessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Professions to fetch.
     */
    orderBy?: ProfessionOrderByWithRelationInput | ProfessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Professions.
     */
    cursor?: ProfessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Professions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Professions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Professions.
     */
    distinct?: ProfessionScalarFieldEnum | ProfessionScalarFieldEnum[]
  }

  /**
   * Profession findFirstOrThrow
   */
  export type ProfessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profession
     */
    select?: ProfessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profession
     */
    omit?: ProfessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionInclude<ExtArgs> | null
    /**
     * Filter, which Profession to fetch.
     */
    where?: ProfessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Professions to fetch.
     */
    orderBy?: ProfessionOrderByWithRelationInput | ProfessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Professions.
     */
    cursor?: ProfessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Professions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Professions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Professions.
     */
    distinct?: ProfessionScalarFieldEnum | ProfessionScalarFieldEnum[]
  }

  /**
   * Profession findMany
   */
  export type ProfessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profession
     */
    select?: ProfessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profession
     */
    omit?: ProfessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionInclude<ExtArgs> | null
    /**
     * Filter, which Professions to fetch.
     */
    where?: ProfessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Professions to fetch.
     */
    orderBy?: ProfessionOrderByWithRelationInput | ProfessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Professions.
     */
    cursor?: ProfessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Professions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Professions.
     */
    skip?: number
    distinct?: ProfessionScalarFieldEnum | ProfessionScalarFieldEnum[]
  }

  /**
   * Profession create
   */
  export type ProfessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profession
     */
    select?: ProfessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profession
     */
    omit?: ProfessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionInclude<ExtArgs> | null
    /**
     * The data needed to create a Profession.
     */
    data: XOR<ProfessionCreateInput, ProfessionUncheckedCreateInput>
  }

  /**
   * Profession createMany
   */
  export type ProfessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Professions.
     */
    data: ProfessionCreateManyInput | ProfessionCreateManyInput[]
  }

  /**
   * Profession createManyAndReturn
   */
  export type ProfessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profession
     */
    select?: ProfessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Profession
     */
    omit?: ProfessionOmit<ExtArgs> | null
    /**
     * The data used to create many Professions.
     */
    data: ProfessionCreateManyInput | ProfessionCreateManyInput[]
  }

  /**
   * Profession update
   */
  export type ProfessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profession
     */
    select?: ProfessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profession
     */
    omit?: ProfessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionInclude<ExtArgs> | null
    /**
     * The data needed to update a Profession.
     */
    data: XOR<ProfessionUpdateInput, ProfessionUncheckedUpdateInput>
    /**
     * Choose, which Profession to update.
     */
    where: ProfessionWhereUniqueInput
  }

  /**
   * Profession updateMany
   */
  export type ProfessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Professions.
     */
    data: XOR<ProfessionUpdateManyMutationInput, ProfessionUncheckedUpdateManyInput>
    /**
     * Filter which Professions to update
     */
    where?: ProfessionWhereInput
    /**
     * Limit how many Professions to update.
     */
    limit?: number
  }

  /**
   * Profession updateManyAndReturn
   */
  export type ProfessionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profession
     */
    select?: ProfessionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Profession
     */
    omit?: ProfessionOmit<ExtArgs> | null
    /**
     * The data used to update Professions.
     */
    data: XOR<ProfessionUpdateManyMutationInput, ProfessionUncheckedUpdateManyInput>
    /**
     * Filter which Professions to update
     */
    where?: ProfessionWhereInput
    /**
     * Limit how many Professions to update.
     */
    limit?: number
  }

  /**
   * Profession upsert
   */
  export type ProfessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profession
     */
    select?: ProfessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profession
     */
    omit?: ProfessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionInclude<ExtArgs> | null
    /**
     * The filter to search for the Profession to update in case it exists.
     */
    where: ProfessionWhereUniqueInput
    /**
     * In case the Profession found by the `where` argument doesn't exist, create a new Profession with this data.
     */
    create: XOR<ProfessionCreateInput, ProfessionUncheckedCreateInput>
    /**
     * In case the Profession was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProfessionUpdateInput, ProfessionUncheckedUpdateInput>
  }

  /**
   * Profession delete
   */
  export type ProfessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profession
     */
    select?: ProfessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profession
     */
    omit?: ProfessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionInclude<ExtArgs> | null
    /**
     * Filter which Profession to delete.
     */
    where: ProfessionWhereUniqueInput
  }

  /**
   * Profession deleteMany
   */
  export type ProfessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Professions to delete
     */
    where?: ProfessionWhereInput
    /**
     * Limit how many Professions to delete.
     */
    limit?: number
  }

  /**
   * Profession.technicians
   */
  export type Profession$techniciansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Technician
     */
    select?: TechnicianSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Technician
     */
    omit?: TechnicianOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TechnicianInclude<ExtArgs> | null
    where?: TechnicianWhereInput
    orderBy?: TechnicianOrderByWithRelationInput | TechnicianOrderByWithRelationInput[]
    cursor?: TechnicianWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TechnicianScalarFieldEnum | TechnicianScalarFieldEnum[]
  }

  /**
   * Profession without action
   */
  export type ProfessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profession
     */
    select?: ProfessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profession
     */
    omit?: ProfessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionInclude<ExtArgs> | null
  }


  /**
   * Model TechnicianAvailability
   */

  export type AggregateTechnicianAvailability = {
    _count: TechnicianAvailabilityCountAggregateOutputType | null
    _avg: TechnicianAvailabilityAvgAggregateOutputType | null
    _sum: TechnicianAvailabilitySumAggregateOutputType | null
    _min: TechnicianAvailabilityMinAggregateOutputType | null
    _max: TechnicianAvailabilityMaxAggregateOutputType | null
  }

  export type TechnicianAvailabilityAvgAggregateOutputType = {
    technicianId: number | null
    startHour: number | null
    endHour: number | null
  }

  export type TechnicianAvailabilitySumAggregateOutputType = {
    technicianId: number | null
    startHour: number | null
    endHour: number | null
  }

  export type TechnicianAvailabilityMinAggregateOutputType = {
    technicianId: number | null
    day: $Enums.Day | null
    startHour: number | null
    endHour: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TechnicianAvailabilityMaxAggregateOutputType = {
    technicianId: number | null
    day: $Enums.Day | null
    startHour: number | null
    endHour: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TechnicianAvailabilityCountAggregateOutputType = {
    technicianId: number
    day: number
    startHour: number
    endHour: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TechnicianAvailabilityAvgAggregateInputType = {
    technicianId?: true
    startHour?: true
    endHour?: true
  }

  export type TechnicianAvailabilitySumAggregateInputType = {
    technicianId?: true
    startHour?: true
    endHour?: true
  }

  export type TechnicianAvailabilityMinAggregateInputType = {
    technicianId?: true
    day?: true
    startHour?: true
    endHour?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TechnicianAvailabilityMaxAggregateInputType = {
    technicianId?: true
    day?: true
    startHour?: true
    endHour?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TechnicianAvailabilityCountAggregateInputType = {
    technicianId?: true
    day?: true
    startHour?: true
    endHour?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TechnicianAvailabilityAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TechnicianAvailability to aggregate.
     */
    where?: TechnicianAvailabilityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TechnicianAvailabilities to fetch.
     */
    orderBy?: TechnicianAvailabilityOrderByWithRelationInput | TechnicianAvailabilityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TechnicianAvailabilityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TechnicianAvailabilities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TechnicianAvailabilities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TechnicianAvailabilities
    **/
    _count?: true | TechnicianAvailabilityCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TechnicianAvailabilityAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TechnicianAvailabilitySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TechnicianAvailabilityMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TechnicianAvailabilityMaxAggregateInputType
  }

  export type GetTechnicianAvailabilityAggregateType<T extends TechnicianAvailabilityAggregateArgs> = {
        [P in keyof T & keyof AggregateTechnicianAvailability]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTechnicianAvailability[P]>
      : GetScalarType<T[P], AggregateTechnicianAvailability[P]>
  }




  export type TechnicianAvailabilityGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TechnicianAvailabilityWhereInput
    orderBy?: TechnicianAvailabilityOrderByWithAggregationInput | TechnicianAvailabilityOrderByWithAggregationInput[]
    by: TechnicianAvailabilityScalarFieldEnum[] | TechnicianAvailabilityScalarFieldEnum
    having?: TechnicianAvailabilityScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TechnicianAvailabilityCountAggregateInputType | true
    _avg?: TechnicianAvailabilityAvgAggregateInputType
    _sum?: TechnicianAvailabilitySumAggregateInputType
    _min?: TechnicianAvailabilityMinAggregateInputType
    _max?: TechnicianAvailabilityMaxAggregateInputType
  }

  export type TechnicianAvailabilityGroupByOutputType = {
    technicianId: number
    day: $Enums.Day
    startHour: number
    endHour: number
    createdAt: Date
    updatedAt: Date
    _count: TechnicianAvailabilityCountAggregateOutputType | null
    _avg: TechnicianAvailabilityAvgAggregateOutputType | null
    _sum: TechnicianAvailabilitySumAggregateOutputType | null
    _min: TechnicianAvailabilityMinAggregateOutputType | null
    _max: TechnicianAvailabilityMaxAggregateOutputType | null
  }

  type GetTechnicianAvailabilityGroupByPayload<T extends TechnicianAvailabilityGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TechnicianAvailabilityGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TechnicianAvailabilityGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TechnicianAvailabilityGroupByOutputType[P]>
            : GetScalarType<T[P], TechnicianAvailabilityGroupByOutputType[P]>
        }
      >
    >


  export type TechnicianAvailabilitySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    technicianId?: boolean
    day?: boolean
    startHour?: boolean
    endHour?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    technician?: boolean | TechnicianDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["technicianAvailability"]>

  export type TechnicianAvailabilitySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    technicianId?: boolean
    day?: boolean
    startHour?: boolean
    endHour?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    technician?: boolean | TechnicianDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["technicianAvailability"]>

  export type TechnicianAvailabilitySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    technicianId?: boolean
    day?: boolean
    startHour?: boolean
    endHour?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    technician?: boolean | TechnicianDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["technicianAvailability"]>

  export type TechnicianAvailabilitySelectScalar = {
    technicianId?: boolean
    day?: boolean
    startHour?: boolean
    endHour?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TechnicianAvailabilityOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"technicianId" | "day" | "startHour" | "endHour" | "createdAt" | "updatedAt", ExtArgs["result"]["technicianAvailability"]>
  export type TechnicianAvailabilityInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    technician?: boolean | TechnicianDefaultArgs<ExtArgs>
  }
  export type TechnicianAvailabilityIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    technician?: boolean | TechnicianDefaultArgs<ExtArgs>
  }
  export type TechnicianAvailabilityIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    technician?: boolean | TechnicianDefaultArgs<ExtArgs>
  }

  export type $TechnicianAvailabilityPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TechnicianAvailability"
    objects: {
      technician: Prisma.$TechnicianPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      technicianId: number
      day: $Enums.Day
      startHour: number
      endHour: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["technicianAvailability"]>
    composites: {}
  }

  type TechnicianAvailabilityGetPayload<S extends boolean | null | undefined | TechnicianAvailabilityDefaultArgs> = $Result.GetResult<Prisma.$TechnicianAvailabilityPayload, S>

  type TechnicianAvailabilityCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TechnicianAvailabilityFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TechnicianAvailabilityCountAggregateInputType | true
    }

  export interface TechnicianAvailabilityDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TechnicianAvailability'], meta: { name: 'TechnicianAvailability' } }
    /**
     * Find zero or one TechnicianAvailability that matches the filter.
     * @param {TechnicianAvailabilityFindUniqueArgs} args - Arguments to find a TechnicianAvailability
     * @example
     * // Get one TechnicianAvailability
     * const technicianAvailability = await prisma.technicianAvailability.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TechnicianAvailabilityFindUniqueArgs>(args: SelectSubset<T, TechnicianAvailabilityFindUniqueArgs<ExtArgs>>): Prisma__TechnicianAvailabilityClient<$Result.GetResult<Prisma.$TechnicianAvailabilityPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TechnicianAvailability that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TechnicianAvailabilityFindUniqueOrThrowArgs} args - Arguments to find a TechnicianAvailability
     * @example
     * // Get one TechnicianAvailability
     * const technicianAvailability = await prisma.technicianAvailability.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TechnicianAvailabilityFindUniqueOrThrowArgs>(args: SelectSubset<T, TechnicianAvailabilityFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TechnicianAvailabilityClient<$Result.GetResult<Prisma.$TechnicianAvailabilityPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TechnicianAvailability that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TechnicianAvailabilityFindFirstArgs} args - Arguments to find a TechnicianAvailability
     * @example
     * // Get one TechnicianAvailability
     * const technicianAvailability = await prisma.technicianAvailability.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TechnicianAvailabilityFindFirstArgs>(args?: SelectSubset<T, TechnicianAvailabilityFindFirstArgs<ExtArgs>>): Prisma__TechnicianAvailabilityClient<$Result.GetResult<Prisma.$TechnicianAvailabilityPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TechnicianAvailability that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TechnicianAvailabilityFindFirstOrThrowArgs} args - Arguments to find a TechnicianAvailability
     * @example
     * // Get one TechnicianAvailability
     * const technicianAvailability = await prisma.technicianAvailability.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TechnicianAvailabilityFindFirstOrThrowArgs>(args?: SelectSubset<T, TechnicianAvailabilityFindFirstOrThrowArgs<ExtArgs>>): Prisma__TechnicianAvailabilityClient<$Result.GetResult<Prisma.$TechnicianAvailabilityPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TechnicianAvailabilities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TechnicianAvailabilityFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TechnicianAvailabilities
     * const technicianAvailabilities = await prisma.technicianAvailability.findMany()
     * 
     * // Get first 10 TechnicianAvailabilities
     * const technicianAvailabilities = await prisma.technicianAvailability.findMany({ take: 10 })
     * 
     * // Only select the `technicianId`
     * const technicianAvailabilityWithTechnicianIdOnly = await prisma.technicianAvailability.findMany({ select: { technicianId: true } })
     * 
     */
    findMany<T extends TechnicianAvailabilityFindManyArgs>(args?: SelectSubset<T, TechnicianAvailabilityFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TechnicianAvailabilityPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TechnicianAvailability.
     * @param {TechnicianAvailabilityCreateArgs} args - Arguments to create a TechnicianAvailability.
     * @example
     * // Create one TechnicianAvailability
     * const TechnicianAvailability = await prisma.technicianAvailability.create({
     *   data: {
     *     // ... data to create a TechnicianAvailability
     *   }
     * })
     * 
     */
    create<T extends TechnicianAvailabilityCreateArgs>(args: SelectSubset<T, TechnicianAvailabilityCreateArgs<ExtArgs>>): Prisma__TechnicianAvailabilityClient<$Result.GetResult<Prisma.$TechnicianAvailabilityPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TechnicianAvailabilities.
     * @param {TechnicianAvailabilityCreateManyArgs} args - Arguments to create many TechnicianAvailabilities.
     * @example
     * // Create many TechnicianAvailabilities
     * const technicianAvailability = await prisma.technicianAvailability.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TechnicianAvailabilityCreateManyArgs>(args?: SelectSubset<T, TechnicianAvailabilityCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TechnicianAvailabilities and returns the data saved in the database.
     * @param {TechnicianAvailabilityCreateManyAndReturnArgs} args - Arguments to create many TechnicianAvailabilities.
     * @example
     * // Create many TechnicianAvailabilities
     * const technicianAvailability = await prisma.technicianAvailability.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TechnicianAvailabilities and only return the `technicianId`
     * const technicianAvailabilityWithTechnicianIdOnly = await prisma.technicianAvailability.createManyAndReturn({
     *   select: { technicianId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TechnicianAvailabilityCreateManyAndReturnArgs>(args?: SelectSubset<T, TechnicianAvailabilityCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TechnicianAvailabilityPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a TechnicianAvailability.
     * @param {TechnicianAvailabilityDeleteArgs} args - Arguments to delete one TechnicianAvailability.
     * @example
     * // Delete one TechnicianAvailability
     * const TechnicianAvailability = await prisma.technicianAvailability.delete({
     *   where: {
     *     // ... filter to delete one TechnicianAvailability
     *   }
     * })
     * 
     */
    delete<T extends TechnicianAvailabilityDeleteArgs>(args: SelectSubset<T, TechnicianAvailabilityDeleteArgs<ExtArgs>>): Prisma__TechnicianAvailabilityClient<$Result.GetResult<Prisma.$TechnicianAvailabilityPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TechnicianAvailability.
     * @param {TechnicianAvailabilityUpdateArgs} args - Arguments to update one TechnicianAvailability.
     * @example
     * // Update one TechnicianAvailability
     * const technicianAvailability = await prisma.technicianAvailability.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TechnicianAvailabilityUpdateArgs>(args: SelectSubset<T, TechnicianAvailabilityUpdateArgs<ExtArgs>>): Prisma__TechnicianAvailabilityClient<$Result.GetResult<Prisma.$TechnicianAvailabilityPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TechnicianAvailabilities.
     * @param {TechnicianAvailabilityDeleteManyArgs} args - Arguments to filter TechnicianAvailabilities to delete.
     * @example
     * // Delete a few TechnicianAvailabilities
     * const { count } = await prisma.technicianAvailability.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TechnicianAvailabilityDeleteManyArgs>(args?: SelectSubset<T, TechnicianAvailabilityDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TechnicianAvailabilities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TechnicianAvailabilityUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TechnicianAvailabilities
     * const technicianAvailability = await prisma.technicianAvailability.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TechnicianAvailabilityUpdateManyArgs>(args: SelectSubset<T, TechnicianAvailabilityUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TechnicianAvailabilities and returns the data updated in the database.
     * @param {TechnicianAvailabilityUpdateManyAndReturnArgs} args - Arguments to update many TechnicianAvailabilities.
     * @example
     * // Update many TechnicianAvailabilities
     * const technicianAvailability = await prisma.technicianAvailability.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more TechnicianAvailabilities and only return the `technicianId`
     * const technicianAvailabilityWithTechnicianIdOnly = await prisma.technicianAvailability.updateManyAndReturn({
     *   select: { technicianId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TechnicianAvailabilityUpdateManyAndReturnArgs>(args: SelectSubset<T, TechnicianAvailabilityUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TechnicianAvailabilityPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one TechnicianAvailability.
     * @param {TechnicianAvailabilityUpsertArgs} args - Arguments to update or create a TechnicianAvailability.
     * @example
     * // Update or create a TechnicianAvailability
     * const technicianAvailability = await prisma.technicianAvailability.upsert({
     *   create: {
     *     // ... data to create a TechnicianAvailability
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TechnicianAvailability we want to update
     *   }
     * })
     */
    upsert<T extends TechnicianAvailabilityUpsertArgs>(args: SelectSubset<T, TechnicianAvailabilityUpsertArgs<ExtArgs>>): Prisma__TechnicianAvailabilityClient<$Result.GetResult<Prisma.$TechnicianAvailabilityPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TechnicianAvailabilities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TechnicianAvailabilityCountArgs} args - Arguments to filter TechnicianAvailabilities to count.
     * @example
     * // Count the number of TechnicianAvailabilities
     * const count = await prisma.technicianAvailability.count({
     *   where: {
     *     // ... the filter for the TechnicianAvailabilities we want to count
     *   }
     * })
    **/
    count<T extends TechnicianAvailabilityCountArgs>(
      args?: Subset<T, TechnicianAvailabilityCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TechnicianAvailabilityCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TechnicianAvailability.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TechnicianAvailabilityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TechnicianAvailabilityAggregateArgs>(args: Subset<T, TechnicianAvailabilityAggregateArgs>): Prisma.PrismaPromise<GetTechnicianAvailabilityAggregateType<T>>

    /**
     * Group by TechnicianAvailability.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TechnicianAvailabilityGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TechnicianAvailabilityGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TechnicianAvailabilityGroupByArgs['orderBy'] }
        : { orderBy?: TechnicianAvailabilityGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TechnicianAvailabilityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTechnicianAvailabilityGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TechnicianAvailability model
   */
  readonly fields: TechnicianAvailabilityFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TechnicianAvailability.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TechnicianAvailabilityClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    technician<T extends TechnicianDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TechnicianDefaultArgs<ExtArgs>>): Prisma__TechnicianClient<$Result.GetResult<Prisma.$TechnicianPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TechnicianAvailability model
   */
  interface TechnicianAvailabilityFieldRefs {
    readonly technicianId: FieldRef<"TechnicianAvailability", 'Int'>
    readonly day: FieldRef<"TechnicianAvailability", 'Day'>
    readonly startHour: FieldRef<"TechnicianAvailability", 'Int'>
    readonly endHour: FieldRef<"TechnicianAvailability", 'Int'>
    readonly createdAt: FieldRef<"TechnicianAvailability", 'DateTime'>
    readonly updatedAt: FieldRef<"TechnicianAvailability", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TechnicianAvailability findUnique
   */
  export type TechnicianAvailabilityFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TechnicianAvailability
     */
    select?: TechnicianAvailabilitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the TechnicianAvailability
     */
    omit?: TechnicianAvailabilityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TechnicianAvailabilityInclude<ExtArgs> | null
    /**
     * Filter, which TechnicianAvailability to fetch.
     */
    where: TechnicianAvailabilityWhereUniqueInput
  }

  /**
   * TechnicianAvailability findUniqueOrThrow
   */
  export type TechnicianAvailabilityFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TechnicianAvailability
     */
    select?: TechnicianAvailabilitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the TechnicianAvailability
     */
    omit?: TechnicianAvailabilityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TechnicianAvailabilityInclude<ExtArgs> | null
    /**
     * Filter, which TechnicianAvailability to fetch.
     */
    where: TechnicianAvailabilityWhereUniqueInput
  }

  /**
   * TechnicianAvailability findFirst
   */
  export type TechnicianAvailabilityFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TechnicianAvailability
     */
    select?: TechnicianAvailabilitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the TechnicianAvailability
     */
    omit?: TechnicianAvailabilityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TechnicianAvailabilityInclude<ExtArgs> | null
    /**
     * Filter, which TechnicianAvailability to fetch.
     */
    where?: TechnicianAvailabilityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TechnicianAvailabilities to fetch.
     */
    orderBy?: TechnicianAvailabilityOrderByWithRelationInput | TechnicianAvailabilityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TechnicianAvailabilities.
     */
    cursor?: TechnicianAvailabilityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TechnicianAvailabilities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TechnicianAvailabilities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TechnicianAvailabilities.
     */
    distinct?: TechnicianAvailabilityScalarFieldEnum | TechnicianAvailabilityScalarFieldEnum[]
  }

  /**
   * TechnicianAvailability findFirstOrThrow
   */
  export type TechnicianAvailabilityFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TechnicianAvailability
     */
    select?: TechnicianAvailabilitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the TechnicianAvailability
     */
    omit?: TechnicianAvailabilityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TechnicianAvailabilityInclude<ExtArgs> | null
    /**
     * Filter, which TechnicianAvailability to fetch.
     */
    where?: TechnicianAvailabilityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TechnicianAvailabilities to fetch.
     */
    orderBy?: TechnicianAvailabilityOrderByWithRelationInput | TechnicianAvailabilityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TechnicianAvailabilities.
     */
    cursor?: TechnicianAvailabilityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TechnicianAvailabilities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TechnicianAvailabilities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TechnicianAvailabilities.
     */
    distinct?: TechnicianAvailabilityScalarFieldEnum | TechnicianAvailabilityScalarFieldEnum[]
  }

  /**
   * TechnicianAvailability findMany
   */
  export type TechnicianAvailabilityFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TechnicianAvailability
     */
    select?: TechnicianAvailabilitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the TechnicianAvailability
     */
    omit?: TechnicianAvailabilityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TechnicianAvailabilityInclude<ExtArgs> | null
    /**
     * Filter, which TechnicianAvailabilities to fetch.
     */
    where?: TechnicianAvailabilityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TechnicianAvailabilities to fetch.
     */
    orderBy?: TechnicianAvailabilityOrderByWithRelationInput | TechnicianAvailabilityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TechnicianAvailabilities.
     */
    cursor?: TechnicianAvailabilityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TechnicianAvailabilities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TechnicianAvailabilities.
     */
    skip?: number
    distinct?: TechnicianAvailabilityScalarFieldEnum | TechnicianAvailabilityScalarFieldEnum[]
  }

  /**
   * TechnicianAvailability create
   */
  export type TechnicianAvailabilityCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TechnicianAvailability
     */
    select?: TechnicianAvailabilitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the TechnicianAvailability
     */
    omit?: TechnicianAvailabilityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TechnicianAvailabilityInclude<ExtArgs> | null
    /**
     * The data needed to create a TechnicianAvailability.
     */
    data: XOR<TechnicianAvailabilityCreateInput, TechnicianAvailabilityUncheckedCreateInput>
  }

  /**
   * TechnicianAvailability createMany
   */
  export type TechnicianAvailabilityCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TechnicianAvailabilities.
     */
    data: TechnicianAvailabilityCreateManyInput | TechnicianAvailabilityCreateManyInput[]
  }

  /**
   * TechnicianAvailability createManyAndReturn
   */
  export type TechnicianAvailabilityCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TechnicianAvailability
     */
    select?: TechnicianAvailabilitySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TechnicianAvailability
     */
    omit?: TechnicianAvailabilityOmit<ExtArgs> | null
    /**
     * The data used to create many TechnicianAvailabilities.
     */
    data: TechnicianAvailabilityCreateManyInput | TechnicianAvailabilityCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TechnicianAvailabilityIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TechnicianAvailability update
   */
  export type TechnicianAvailabilityUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TechnicianAvailability
     */
    select?: TechnicianAvailabilitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the TechnicianAvailability
     */
    omit?: TechnicianAvailabilityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TechnicianAvailabilityInclude<ExtArgs> | null
    /**
     * The data needed to update a TechnicianAvailability.
     */
    data: XOR<TechnicianAvailabilityUpdateInput, TechnicianAvailabilityUncheckedUpdateInput>
    /**
     * Choose, which TechnicianAvailability to update.
     */
    where: TechnicianAvailabilityWhereUniqueInput
  }

  /**
   * TechnicianAvailability updateMany
   */
  export type TechnicianAvailabilityUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TechnicianAvailabilities.
     */
    data: XOR<TechnicianAvailabilityUpdateManyMutationInput, TechnicianAvailabilityUncheckedUpdateManyInput>
    /**
     * Filter which TechnicianAvailabilities to update
     */
    where?: TechnicianAvailabilityWhereInput
    /**
     * Limit how many TechnicianAvailabilities to update.
     */
    limit?: number
  }

  /**
   * TechnicianAvailability updateManyAndReturn
   */
  export type TechnicianAvailabilityUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TechnicianAvailability
     */
    select?: TechnicianAvailabilitySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TechnicianAvailability
     */
    omit?: TechnicianAvailabilityOmit<ExtArgs> | null
    /**
     * The data used to update TechnicianAvailabilities.
     */
    data: XOR<TechnicianAvailabilityUpdateManyMutationInput, TechnicianAvailabilityUncheckedUpdateManyInput>
    /**
     * Filter which TechnicianAvailabilities to update
     */
    where?: TechnicianAvailabilityWhereInput
    /**
     * Limit how many TechnicianAvailabilities to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TechnicianAvailabilityIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * TechnicianAvailability upsert
   */
  export type TechnicianAvailabilityUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TechnicianAvailability
     */
    select?: TechnicianAvailabilitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the TechnicianAvailability
     */
    omit?: TechnicianAvailabilityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TechnicianAvailabilityInclude<ExtArgs> | null
    /**
     * The filter to search for the TechnicianAvailability to update in case it exists.
     */
    where: TechnicianAvailabilityWhereUniqueInput
    /**
     * In case the TechnicianAvailability found by the `where` argument doesn't exist, create a new TechnicianAvailability with this data.
     */
    create: XOR<TechnicianAvailabilityCreateInput, TechnicianAvailabilityUncheckedCreateInput>
    /**
     * In case the TechnicianAvailability was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TechnicianAvailabilityUpdateInput, TechnicianAvailabilityUncheckedUpdateInput>
  }

  /**
   * TechnicianAvailability delete
   */
  export type TechnicianAvailabilityDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TechnicianAvailability
     */
    select?: TechnicianAvailabilitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the TechnicianAvailability
     */
    omit?: TechnicianAvailabilityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TechnicianAvailabilityInclude<ExtArgs> | null
    /**
     * Filter which TechnicianAvailability to delete.
     */
    where: TechnicianAvailabilityWhereUniqueInput
  }

  /**
   * TechnicianAvailability deleteMany
   */
  export type TechnicianAvailabilityDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TechnicianAvailabilities to delete
     */
    where?: TechnicianAvailabilityWhereInput
    /**
     * Limit how many TechnicianAvailabilities to delete.
     */
    limit?: number
  }

  /**
   * TechnicianAvailability without action
   */
  export type TechnicianAvailabilityDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TechnicianAvailability
     */
    select?: TechnicianAvailabilitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the TechnicianAvailability
     */
    omit?: TechnicianAvailabilityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TechnicianAvailabilityInclude<ExtArgs> | null
  }


  /**
   * Model Notification
   */

  export type AggregateNotification = {
    _count: NotificationCountAggregateOutputType | null
    _avg: NotificationAvgAggregateOutputType | null
    _sum: NotificationSumAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  export type NotificationAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type NotificationSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type NotificationMinAggregateOutputType = {
    id: number | null
    userId: number | null
    title: string | null
    message: string | null
    read: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type NotificationMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    title: string | null
    message: string | null
    read: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type NotificationCountAggregateOutputType = {
    id: number
    userId: number
    title: number
    message: number
    read: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type NotificationAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type NotificationSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type NotificationMinAggregateInputType = {
    id?: true
    userId?: true
    title?: true
    message?: true
    read?: true
    createdAt?: true
    updatedAt?: true
  }

  export type NotificationMaxAggregateInputType = {
    id?: true
    userId?: true
    title?: true
    message?: true
    read?: true
    createdAt?: true
    updatedAt?: true
  }

  export type NotificationCountAggregateInputType = {
    id?: true
    userId?: true
    title?: true
    message?: true
    read?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type NotificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notification to aggregate.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notifications
    **/
    _count?: true | NotificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NotificationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NotificationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationMaxAggregateInputType
  }

  export type GetNotificationAggregateType<T extends NotificationAggregateArgs> = {
        [P in keyof T & keyof AggregateNotification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotification[P]>
      : GetScalarType<T[P], AggregateNotification[P]>
  }




  export type NotificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithAggregationInput | NotificationOrderByWithAggregationInput[]
    by: NotificationScalarFieldEnum[] | NotificationScalarFieldEnum
    having?: NotificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationCountAggregateInputType | true
    _avg?: NotificationAvgAggregateInputType
    _sum?: NotificationSumAggregateInputType
    _min?: NotificationMinAggregateInputType
    _max?: NotificationMaxAggregateInputType
  }

  export type NotificationGroupByOutputType = {
    id: number
    userId: number
    title: string
    message: string
    read: boolean
    createdAt: Date
    updatedAt: Date
    _count: NotificationCountAggregateOutputType | null
    _avg: NotificationAvgAggregateOutputType | null
    _sum: NotificationSumAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  type GetNotificationGroupByPayload<T extends NotificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationGroupByOutputType[P]>
        }
      >
    >


  export type NotificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    title?: boolean
    message?: boolean
    read?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    title?: boolean
    message?: boolean
    read?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    title?: boolean
    message?: boolean
    read?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectScalar = {
    id?: boolean
    userId?: boolean
    title?: boolean
    message?: boolean
    read?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type NotificationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "title" | "message" | "read" | "createdAt" | "updatedAt", ExtArgs["result"]["notification"]>
  export type NotificationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type NotificationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type NotificationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $NotificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Notification"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      title: string
      message: string
      read: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["notification"]>
    composites: {}
  }

  type NotificationGetPayload<S extends boolean | null | undefined | NotificationDefaultArgs> = $Result.GetResult<Prisma.$NotificationPayload, S>

  type NotificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<NotificationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: NotificationCountAggregateInputType | true
    }

  export interface NotificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Notification'], meta: { name: 'Notification' } }
    /**
     * Find zero or one Notification that matches the filter.
     * @param {NotificationFindUniqueArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NotificationFindUniqueArgs>(args: SelectSubset<T, NotificationFindUniqueArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Notification that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {NotificationFindUniqueOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NotificationFindUniqueOrThrowArgs>(args: SelectSubset<T, NotificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Notification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NotificationFindFirstArgs>(args?: SelectSubset<T, NotificationFindFirstArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Notification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NotificationFindFirstOrThrowArgs>(args?: SelectSubset<T, NotificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notifications
     * const notifications = await prisma.notification.findMany()
     * 
     * // Get first 10 Notifications
     * const notifications = await prisma.notification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationWithIdOnly = await prisma.notification.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NotificationFindManyArgs>(args?: SelectSubset<T, NotificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Notification.
     * @param {NotificationCreateArgs} args - Arguments to create a Notification.
     * @example
     * // Create one Notification
     * const Notification = await prisma.notification.create({
     *   data: {
     *     // ... data to create a Notification
     *   }
     * })
     * 
     */
    create<T extends NotificationCreateArgs>(args: SelectSubset<T, NotificationCreateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Notifications.
     * @param {NotificationCreateManyArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NotificationCreateManyArgs>(args?: SelectSubset<T, NotificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Notifications and returns the data saved in the database.
     * @param {NotificationCreateManyAndReturnArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Notifications and only return the `id`
     * const notificationWithIdOnly = await prisma.notification.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NotificationCreateManyAndReturnArgs>(args?: SelectSubset<T, NotificationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Notification.
     * @param {NotificationDeleteArgs} args - Arguments to delete one Notification.
     * @example
     * // Delete one Notification
     * const Notification = await prisma.notification.delete({
     *   where: {
     *     // ... filter to delete one Notification
     *   }
     * })
     * 
     */
    delete<T extends NotificationDeleteArgs>(args: SelectSubset<T, NotificationDeleteArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Notification.
     * @param {NotificationUpdateArgs} args - Arguments to update one Notification.
     * @example
     * // Update one Notification
     * const notification = await prisma.notification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NotificationUpdateArgs>(args: SelectSubset<T, NotificationUpdateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Notifications.
     * @param {NotificationDeleteManyArgs} args - Arguments to filter Notifications to delete.
     * @example
     * // Delete a few Notifications
     * const { count } = await prisma.notification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NotificationDeleteManyArgs>(args?: SelectSubset<T, NotificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NotificationUpdateManyArgs>(args: SelectSubset<T, NotificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications and returns the data updated in the database.
     * @param {NotificationUpdateManyAndReturnArgs} args - Arguments to update many Notifications.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Notifications and only return the `id`
     * const notificationWithIdOnly = await prisma.notification.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends NotificationUpdateManyAndReturnArgs>(args: SelectSubset<T, NotificationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Notification.
     * @param {NotificationUpsertArgs} args - Arguments to update or create a Notification.
     * @example
     * // Update or create a Notification
     * const notification = await prisma.notification.upsert({
     *   create: {
     *     // ... data to create a Notification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notification we want to update
     *   }
     * })
     */
    upsert<T extends NotificationUpsertArgs>(args: SelectSubset<T, NotificationUpsertArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationCountArgs} args - Arguments to filter Notifications to count.
     * @example
     * // Count the number of Notifications
     * const count = await prisma.notification.count({
     *   where: {
     *     // ... the filter for the Notifications we want to count
     *   }
     * })
    **/
    count<T extends NotificationCountArgs>(
      args?: Subset<T, NotificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationAggregateArgs>(args: Subset<T, NotificationAggregateArgs>): Prisma.PrismaPromise<GetNotificationAggregateType<T>>

    /**
     * Group by Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationGroupByArgs['orderBy'] }
        : { orderBy?: NotificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Notification model
   */
  readonly fields: NotificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Notification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Notification model
   */
  interface NotificationFieldRefs {
    readonly id: FieldRef<"Notification", 'Int'>
    readonly userId: FieldRef<"Notification", 'Int'>
    readonly title: FieldRef<"Notification", 'String'>
    readonly message: FieldRef<"Notification", 'String'>
    readonly read: FieldRef<"Notification", 'Boolean'>
    readonly createdAt: FieldRef<"Notification", 'DateTime'>
    readonly updatedAt: FieldRef<"Notification", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Notification findUnique
   */
  export type NotificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findUniqueOrThrow
   */
  export type NotificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findFirst
   */
  export type NotificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findFirstOrThrow
   */
  export type NotificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findMany
   */
  export type NotificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notifications to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification create
   */
  export type NotificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to create a Notification.
     */
    data: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
  }

  /**
   * Notification createMany
   */
  export type NotificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
  }

  /**
   * Notification createManyAndReturn
   */
  export type NotificationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Notification update
   */
  export type NotificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to update a Notification.
     */
    data: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
    /**
     * Choose, which Notification to update.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification updateMany
   */
  export type NotificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
    /**
     * Limit how many Notifications to update.
     */
    limit?: number
  }

  /**
   * Notification updateManyAndReturn
   */
  export type NotificationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
    /**
     * Limit how many Notifications to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Notification upsert
   */
  export type NotificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The filter to search for the Notification to update in case it exists.
     */
    where: NotificationWhereUniqueInput
    /**
     * In case the Notification found by the `where` argument doesn't exist, create a new Notification with this data.
     */
    create: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
    /**
     * In case the Notification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
  }

  /**
   * Notification delete
   */
  export type NotificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter which Notification to delete.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification deleteMany
   */
  export type NotificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notifications to delete
     */
    where?: NotificationWhereInput
    /**
     * Limit how many Notifications to delete.
     */
    limit?: number
  }

  /**
   * Notification without action
   */
  export type NotificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const AssetScalarFieldEnum: {
    id: 'id',
    locationId: 'locationId',
    categoryId: 'categoryId',
    name: 'name',
    inventoryCode: 'inventoryCode',
    status: 'status',
    type: 'type',
    image: 'image',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AssetScalarFieldEnum = (typeof AssetScalarFieldEnum)[keyof typeof AssetScalarFieldEnum]


  export const CategoryScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    parentId: 'parentId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CategoryScalarFieldEnum = (typeof CategoryScalarFieldEnum)[keyof typeof CategoryScalarFieldEnum]


  export const CategoryClosureScalarFieldEnum: {
    ancestorId: 'ancestorId',
    descendantId: 'descendantId',
    depth: 'depth'
  };

  export type CategoryClosureScalarFieldEnum = (typeof CategoryClosureScalarFieldEnum)[keyof typeof CategoryClosureScalarFieldEnum]


  export const InterventionRequestScalarFieldEnum: {
    id: 'id',
    reportId: 'reportId',
    title: 'title',
    deadline: 'deadline',
    status: 'status',
    createdBy: 'createdBy',
    notified: 'notified',
    createdAt: 'createdAt'
  };

  export type InterventionRequestScalarFieldEnum = (typeof InterventionRequestScalarFieldEnum)[keyof typeof InterventionRequestScalarFieldEnum]


  export const TechnicianAssignementScalarFieldEnum: {
    id: 'id',
    technicianId: 'technicianId',
    interventionRequestId: 'interventionRequestId',
    locationId: 'locationId',
    completed: 'completed',
    details: 'details',
    createdAt: 'createdAt'
  };

  export type TechnicianAssignementScalarFieldEnum = (typeof TechnicianAssignementScalarFieldEnum)[keyof typeof TechnicianAssignementScalarFieldEnum]


  export const InterventionsScalarFieldEnum: {
    id: 'id',
    technicianId: 'technicianId',
    interventionRequestId: 'interventionRequestId',
    description: 'description',
    createdAt: 'createdAt'
  };

  export type InterventionsScalarFieldEnum = (typeof InterventionsScalarFieldEnum)[keyof typeof InterventionsScalarFieldEnum]


  export const ReportScalarFieldEnum: {
    id: 'id',
    reporterId: 'reporterId',
    assetId: 'assetId',
    categoryId: 'categoryId',
    description: 'description',
    imageUrl: 'imageUrl',
    type: 'type',
    status: 'status',
    priority: 'priority',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ReportScalarFieldEnum = (typeof ReportScalarFieldEnum)[keyof typeof ReportScalarFieldEnum]


  export const ScheduleScalarFieldEnum: {
    id: 'id',
    assetId: 'assetId',
    schedulerId: 'schedulerId',
    categoryId: 'categoryId',
    description: 'description',
    lastMaintenanceDate: 'lastMaintenanceDate',
    frequency: 'frequency',
    priority: 'priority',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ScheduleScalarFieldEnum = (typeof ScheduleScalarFieldEnum)[keyof typeof ScheduleScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    password: 'password',
    avatarUrl: 'avatarUrl',
    role: 'role',
    approvalStatus: 'approvalStatus',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const TechnicianScalarFieldEnum: {
    userId: 'userId',
    professionId: 'professionId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TechnicianScalarFieldEnum = (typeof TechnicianScalarFieldEnum)[keyof typeof TechnicianScalarFieldEnum]


  export const ProfessionScalarFieldEnum: {
    id: 'id',
    name: 'name',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ProfessionScalarFieldEnum = (typeof ProfessionScalarFieldEnum)[keyof typeof ProfessionScalarFieldEnum]


  export const TechnicianAvailabilityScalarFieldEnum: {
    technicianId: 'technicianId',
    day: 'day',
    startHour: 'startHour',
    endHour: 'endHour',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TechnicianAvailabilityScalarFieldEnum = (typeof TechnicianAvailabilityScalarFieldEnum)[keyof typeof TechnicianAvailabilityScalarFieldEnum]


  export const NotificationScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    title: 'title',
    message: 'message',
    read: 'read',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type NotificationScalarFieldEnum = (typeof NotificationScalarFieldEnum)[keyof typeof NotificationScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'AssetStatus'
   */
  export type EnumAssetStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AssetStatus'>
    


  /**
   * Reference to a field of type 'AssetType'
   */
  export type EnumAssetTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AssetType'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'InterventionRequestStatus'
   */
  export type EnumInterventionRequestStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'InterventionRequestStatus'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'OperationType'
   */
  export type EnumOperationTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'OperationType'>
    


  /**
   * Reference to a field of type 'ReportStatus'
   */
  export type EnumReportStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ReportStatus'>
    


  /**
   * Reference to a field of type 'Priority'
   */
  export type EnumPriorityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Priority'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'ApprovalStatus'
   */
  export type EnumApprovalStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ApprovalStatus'>
    


  /**
   * Reference to a field of type 'Day'
   */
  export type EnumDayFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Day'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type AssetWhereInput = {
    AND?: AssetWhereInput | AssetWhereInput[]
    OR?: AssetWhereInput[]
    NOT?: AssetWhereInput | AssetWhereInput[]
    id?: IntFilter<"Asset"> | number
    locationId?: IntNullableFilter<"Asset"> | number | null
    categoryId?: IntNullableFilter<"Asset"> | number | null
    name?: StringFilter<"Asset"> | string
    inventoryCode?: StringFilter<"Asset"> | string
    status?: EnumAssetStatusFilter<"Asset"> | $Enums.AssetStatus
    type?: EnumAssetTypeFilter<"Asset"> | $Enums.AssetType
    image?: StringNullableFilter<"Asset"> | string | null
    createdAt?: DateTimeFilter<"Asset"> | Date | string
    updatedAt?: DateTimeFilter<"Asset"> | Date | string
    subAssets?: AssetListRelationFilter
    reports?: ReportListRelationFilter
    assignements?: TechnicianAssignementListRelationFilter
    location?: XOR<AssetNullableScalarRelationFilter, AssetWhereInput> | null
    category?: XOR<CategoryNullableScalarRelationFilter, CategoryWhereInput> | null
    schedules?: ScheduleListRelationFilter
  }

  export type AssetOrderByWithRelationInput = {
    id?: SortOrder
    locationId?: SortOrderInput | SortOrder
    categoryId?: SortOrderInput | SortOrder
    name?: SortOrder
    inventoryCode?: SortOrder
    status?: SortOrder
    type?: SortOrder
    image?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    subAssets?: AssetOrderByRelationAggregateInput
    reports?: ReportOrderByRelationAggregateInput
    assignements?: TechnicianAssignementOrderByRelationAggregateInput
    location?: AssetOrderByWithRelationInput
    category?: CategoryOrderByWithRelationInput
    schedules?: ScheduleOrderByRelationAggregateInput
  }

  export type AssetWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AssetWhereInput | AssetWhereInput[]
    OR?: AssetWhereInput[]
    NOT?: AssetWhereInput | AssetWhereInput[]
    locationId?: IntNullableFilter<"Asset"> | number | null
    categoryId?: IntNullableFilter<"Asset"> | number | null
    name?: StringFilter<"Asset"> | string
    inventoryCode?: StringFilter<"Asset"> | string
    status?: EnumAssetStatusFilter<"Asset"> | $Enums.AssetStatus
    type?: EnumAssetTypeFilter<"Asset"> | $Enums.AssetType
    image?: StringNullableFilter<"Asset"> | string | null
    createdAt?: DateTimeFilter<"Asset"> | Date | string
    updatedAt?: DateTimeFilter<"Asset"> | Date | string
    subAssets?: AssetListRelationFilter
    reports?: ReportListRelationFilter
    assignements?: TechnicianAssignementListRelationFilter
    location?: XOR<AssetNullableScalarRelationFilter, AssetWhereInput> | null
    category?: XOR<CategoryNullableScalarRelationFilter, CategoryWhereInput> | null
    schedules?: ScheduleListRelationFilter
  }, "id">

  export type AssetOrderByWithAggregationInput = {
    id?: SortOrder
    locationId?: SortOrderInput | SortOrder
    categoryId?: SortOrderInput | SortOrder
    name?: SortOrder
    inventoryCode?: SortOrder
    status?: SortOrder
    type?: SortOrder
    image?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AssetCountOrderByAggregateInput
    _avg?: AssetAvgOrderByAggregateInput
    _max?: AssetMaxOrderByAggregateInput
    _min?: AssetMinOrderByAggregateInput
    _sum?: AssetSumOrderByAggregateInput
  }

  export type AssetScalarWhereWithAggregatesInput = {
    AND?: AssetScalarWhereWithAggregatesInput | AssetScalarWhereWithAggregatesInput[]
    OR?: AssetScalarWhereWithAggregatesInput[]
    NOT?: AssetScalarWhereWithAggregatesInput | AssetScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Asset"> | number
    locationId?: IntNullableWithAggregatesFilter<"Asset"> | number | null
    categoryId?: IntNullableWithAggregatesFilter<"Asset"> | number | null
    name?: StringWithAggregatesFilter<"Asset"> | string
    inventoryCode?: StringWithAggregatesFilter<"Asset"> | string
    status?: EnumAssetStatusWithAggregatesFilter<"Asset"> | $Enums.AssetStatus
    type?: EnumAssetTypeWithAggregatesFilter<"Asset"> | $Enums.AssetType
    image?: StringNullableWithAggregatesFilter<"Asset"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Asset"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Asset"> | Date | string
  }

  export type CategoryWhereInput = {
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    id?: IntFilter<"Category"> | number
    name?: StringFilter<"Category"> | string
    description?: StringNullableFilter<"Category"> | string | null
    parentId?: IntNullableFilter<"Category"> | number | null
    createdAt?: DateTimeFilter<"Category"> | Date | string
    updatedAt?: DateTimeFilter<"Category"> | Date | string
    assets?: AssetListRelationFilter
    children?: CategoryListRelationFilter
    parent?: XOR<CategoryNullableScalarRelationFilter, CategoryWhereInput> | null
    Report?: ReportListRelationFilter
    ancestors?: CategoryClosureListRelationFilter
    descendants?: CategoryClosureListRelationFilter
    schedules?: ScheduleListRelationFilter
  }

  export type CategoryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    parentId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    assets?: AssetOrderByRelationAggregateInput
    children?: CategoryOrderByRelationAggregateInput
    parent?: CategoryOrderByWithRelationInput
    Report?: ReportOrderByRelationAggregateInput
    ancestors?: CategoryClosureOrderByRelationAggregateInput
    descendants?: CategoryClosureOrderByRelationAggregateInput
    schedules?: ScheduleOrderByRelationAggregateInput
  }

  export type CategoryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    description?: StringNullableFilter<"Category"> | string | null
    parentId?: IntNullableFilter<"Category"> | number | null
    createdAt?: DateTimeFilter<"Category"> | Date | string
    updatedAt?: DateTimeFilter<"Category"> | Date | string
    assets?: AssetListRelationFilter
    children?: CategoryListRelationFilter
    parent?: XOR<CategoryNullableScalarRelationFilter, CategoryWhereInput> | null
    Report?: ReportListRelationFilter
    ancestors?: CategoryClosureListRelationFilter
    descendants?: CategoryClosureListRelationFilter
    schedules?: ScheduleListRelationFilter
  }, "id" | "name">

  export type CategoryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    parentId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CategoryCountOrderByAggregateInput
    _avg?: CategoryAvgOrderByAggregateInput
    _max?: CategoryMaxOrderByAggregateInput
    _min?: CategoryMinOrderByAggregateInput
    _sum?: CategorySumOrderByAggregateInput
  }

  export type CategoryScalarWhereWithAggregatesInput = {
    AND?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    OR?: CategoryScalarWhereWithAggregatesInput[]
    NOT?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Category"> | number
    name?: StringWithAggregatesFilter<"Category"> | string
    description?: StringNullableWithAggregatesFilter<"Category"> | string | null
    parentId?: IntNullableWithAggregatesFilter<"Category"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"Category"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Category"> | Date | string
  }

  export type CategoryClosureWhereInput = {
    AND?: CategoryClosureWhereInput | CategoryClosureWhereInput[]
    OR?: CategoryClosureWhereInput[]
    NOT?: CategoryClosureWhereInput | CategoryClosureWhereInput[]
    ancestorId?: IntFilter<"CategoryClosure"> | number
    descendantId?: IntFilter<"CategoryClosure"> | number
    depth?: IntFilter<"CategoryClosure"> | number
    ancestor?: XOR<CategoryScalarRelationFilter, CategoryWhereInput>
    descendant?: XOR<CategoryScalarRelationFilter, CategoryWhereInput>
  }

  export type CategoryClosureOrderByWithRelationInput = {
    ancestorId?: SortOrder
    descendantId?: SortOrder
    depth?: SortOrder
    ancestor?: CategoryOrderByWithRelationInput
    descendant?: CategoryOrderByWithRelationInput
  }

  export type CategoryClosureWhereUniqueInput = Prisma.AtLeast<{
    ancestorId_descendantId?: CategoryClosureAncestorIdDescendantIdCompoundUniqueInput
    AND?: CategoryClosureWhereInput | CategoryClosureWhereInput[]
    OR?: CategoryClosureWhereInput[]
    NOT?: CategoryClosureWhereInput | CategoryClosureWhereInput[]
    ancestorId?: IntFilter<"CategoryClosure"> | number
    descendantId?: IntFilter<"CategoryClosure"> | number
    depth?: IntFilter<"CategoryClosure"> | number
    ancestor?: XOR<CategoryScalarRelationFilter, CategoryWhereInput>
    descendant?: XOR<CategoryScalarRelationFilter, CategoryWhereInput>
  }, "ancestorId_descendantId">

  export type CategoryClosureOrderByWithAggregationInput = {
    ancestorId?: SortOrder
    descendantId?: SortOrder
    depth?: SortOrder
    _count?: CategoryClosureCountOrderByAggregateInput
    _avg?: CategoryClosureAvgOrderByAggregateInput
    _max?: CategoryClosureMaxOrderByAggregateInput
    _min?: CategoryClosureMinOrderByAggregateInput
    _sum?: CategoryClosureSumOrderByAggregateInput
  }

  export type CategoryClosureScalarWhereWithAggregatesInput = {
    AND?: CategoryClosureScalarWhereWithAggregatesInput | CategoryClosureScalarWhereWithAggregatesInput[]
    OR?: CategoryClosureScalarWhereWithAggregatesInput[]
    NOT?: CategoryClosureScalarWhereWithAggregatesInput | CategoryClosureScalarWhereWithAggregatesInput[]
    ancestorId?: IntWithAggregatesFilter<"CategoryClosure"> | number
    descendantId?: IntWithAggregatesFilter<"CategoryClosure"> | number
    depth?: IntWithAggregatesFilter<"CategoryClosure"> | number
  }

  export type InterventionRequestWhereInput = {
    AND?: InterventionRequestWhereInput | InterventionRequestWhereInput[]
    OR?: InterventionRequestWhereInput[]
    NOT?: InterventionRequestWhereInput | InterventionRequestWhereInput[]
    id?: IntFilter<"InterventionRequest"> | number
    reportId?: IntFilter<"InterventionRequest"> | number
    title?: StringFilter<"InterventionRequest"> | string
    deadline?: StringFilter<"InterventionRequest"> | string
    status?: EnumInterventionRequestStatusFilter<"InterventionRequest"> | $Enums.InterventionRequestStatus
    createdBy?: IntFilter<"InterventionRequest"> | number
    notified?: BoolFilter<"InterventionRequest"> | boolean
    createdAt?: DateTimeFilter<"InterventionRequest"> | Date | string
    assignedTo?: TechnicianAssignementListRelationFilter
    Interventions?: InterventionsListRelationFilter
    report?: XOR<ReportScalarRelationFilter, ReportWhereInput>
    creator?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type InterventionRequestOrderByWithRelationInput = {
    id?: SortOrder
    reportId?: SortOrder
    title?: SortOrder
    deadline?: SortOrder
    status?: SortOrder
    createdBy?: SortOrder
    notified?: SortOrder
    createdAt?: SortOrder
    assignedTo?: TechnicianAssignementOrderByRelationAggregateInput
    Interventions?: InterventionsOrderByRelationAggregateInput
    report?: ReportOrderByWithRelationInput
    creator?: UserOrderByWithRelationInput
  }

  export type InterventionRequestWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: InterventionRequestWhereInput | InterventionRequestWhereInput[]
    OR?: InterventionRequestWhereInput[]
    NOT?: InterventionRequestWhereInput | InterventionRequestWhereInput[]
    reportId?: IntFilter<"InterventionRequest"> | number
    title?: StringFilter<"InterventionRequest"> | string
    deadline?: StringFilter<"InterventionRequest"> | string
    status?: EnumInterventionRequestStatusFilter<"InterventionRequest"> | $Enums.InterventionRequestStatus
    createdBy?: IntFilter<"InterventionRequest"> | number
    notified?: BoolFilter<"InterventionRequest"> | boolean
    createdAt?: DateTimeFilter<"InterventionRequest"> | Date | string
    assignedTo?: TechnicianAssignementListRelationFilter
    Interventions?: InterventionsListRelationFilter
    report?: XOR<ReportScalarRelationFilter, ReportWhereInput>
    creator?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type InterventionRequestOrderByWithAggregationInput = {
    id?: SortOrder
    reportId?: SortOrder
    title?: SortOrder
    deadline?: SortOrder
    status?: SortOrder
    createdBy?: SortOrder
    notified?: SortOrder
    createdAt?: SortOrder
    _count?: InterventionRequestCountOrderByAggregateInput
    _avg?: InterventionRequestAvgOrderByAggregateInput
    _max?: InterventionRequestMaxOrderByAggregateInput
    _min?: InterventionRequestMinOrderByAggregateInput
    _sum?: InterventionRequestSumOrderByAggregateInput
  }

  export type InterventionRequestScalarWhereWithAggregatesInput = {
    AND?: InterventionRequestScalarWhereWithAggregatesInput | InterventionRequestScalarWhereWithAggregatesInput[]
    OR?: InterventionRequestScalarWhereWithAggregatesInput[]
    NOT?: InterventionRequestScalarWhereWithAggregatesInput | InterventionRequestScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"InterventionRequest"> | number
    reportId?: IntWithAggregatesFilter<"InterventionRequest"> | number
    title?: StringWithAggregatesFilter<"InterventionRequest"> | string
    deadline?: StringWithAggregatesFilter<"InterventionRequest"> | string
    status?: EnumInterventionRequestStatusWithAggregatesFilter<"InterventionRequest"> | $Enums.InterventionRequestStatus
    createdBy?: IntWithAggregatesFilter<"InterventionRequest"> | number
    notified?: BoolWithAggregatesFilter<"InterventionRequest"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"InterventionRequest"> | Date | string
  }

  export type TechnicianAssignementWhereInput = {
    AND?: TechnicianAssignementWhereInput | TechnicianAssignementWhereInput[]
    OR?: TechnicianAssignementWhereInput[]
    NOT?: TechnicianAssignementWhereInput | TechnicianAssignementWhereInput[]
    id?: IntFilter<"TechnicianAssignement"> | number
    technicianId?: IntFilter<"TechnicianAssignement"> | number
    interventionRequestId?: IntFilter<"TechnicianAssignement"> | number
    locationId?: IntNullableFilter<"TechnicianAssignement"> | number | null
    completed?: BoolFilter<"TechnicianAssignement"> | boolean
    details?: StringNullableFilter<"TechnicianAssignement"> | string | null
    createdAt?: DateTimeFilter<"TechnicianAssignement"> | Date | string
    technician?: XOR<TechnicianScalarRelationFilter, TechnicianWhereInput>
    interventionRequest?: XOR<InterventionRequestScalarRelationFilter, InterventionRequestWhereInput>
    location?: XOR<AssetNullableScalarRelationFilter, AssetWhereInput> | null
  }

  export type TechnicianAssignementOrderByWithRelationInput = {
    id?: SortOrder
    technicianId?: SortOrder
    interventionRequestId?: SortOrder
    locationId?: SortOrderInput | SortOrder
    completed?: SortOrder
    details?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    technician?: TechnicianOrderByWithRelationInput
    interventionRequest?: InterventionRequestOrderByWithRelationInput
    location?: AssetOrderByWithRelationInput
  }

  export type TechnicianAssignementWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TechnicianAssignementWhereInput | TechnicianAssignementWhereInput[]
    OR?: TechnicianAssignementWhereInput[]
    NOT?: TechnicianAssignementWhereInput | TechnicianAssignementWhereInput[]
    technicianId?: IntFilter<"TechnicianAssignement"> | number
    interventionRequestId?: IntFilter<"TechnicianAssignement"> | number
    locationId?: IntNullableFilter<"TechnicianAssignement"> | number | null
    completed?: BoolFilter<"TechnicianAssignement"> | boolean
    details?: StringNullableFilter<"TechnicianAssignement"> | string | null
    createdAt?: DateTimeFilter<"TechnicianAssignement"> | Date | string
    technician?: XOR<TechnicianScalarRelationFilter, TechnicianWhereInput>
    interventionRequest?: XOR<InterventionRequestScalarRelationFilter, InterventionRequestWhereInput>
    location?: XOR<AssetNullableScalarRelationFilter, AssetWhereInput> | null
  }, "id">

  export type TechnicianAssignementOrderByWithAggregationInput = {
    id?: SortOrder
    technicianId?: SortOrder
    interventionRequestId?: SortOrder
    locationId?: SortOrderInput | SortOrder
    completed?: SortOrder
    details?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: TechnicianAssignementCountOrderByAggregateInput
    _avg?: TechnicianAssignementAvgOrderByAggregateInput
    _max?: TechnicianAssignementMaxOrderByAggregateInput
    _min?: TechnicianAssignementMinOrderByAggregateInput
    _sum?: TechnicianAssignementSumOrderByAggregateInput
  }

  export type TechnicianAssignementScalarWhereWithAggregatesInput = {
    AND?: TechnicianAssignementScalarWhereWithAggregatesInput | TechnicianAssignementScalarWhereWithAggregatesInput[]
    OR?: TechnicianAssignementScalarWhereWithAggregatesInput[]
    NOT?: TechnicianAssignementScalarWhereWithAggregatesInput | TechnicianAssignementScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"TechnicianAssignement"> | number
    technicianId?: IntWithAggregatesFilter<"TechnicianAssignement"> | number
    interventionRequestId?: IntWithAggregatesFilter<"TechnicianAssignement"> | number
    locationId?: IntNullableWithAggregatesFilter<"TechnicianAssignement"> | number | null
    completed?: BoolWithAggregatesFilter<"TechnicianAssignement"> | boolean
    details?: StringNullableWithAggregatesFilter<"TechnicianAssignement"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"TechnicianAssignement"> | Date | string
  }

  export type InterventionsWhereInput = {
    AND?: InterventionsWhereInput | InterventionsWhereInput[]
    OR?: InterventionsWhereInput[]
    NOT?: InterventionsWhereInput | InterventionsWhereInput[]
    id?: IntFilter<"Interventions"> | number
    technicianId?: IntFilter<"Interventions"> | number
    interventionRequestId?: IntFilter<"Interventions"> | number
    description?: StringFilter<"Interventions"> | string
    createdAt?: DateTimeFilter<"Interventions"> | Date | string
    interventionRequest?: XOR<InterventionRequestScalarRelationFilter, InterventionRequestWhereInput>
    technician?: XOR<TechnicianScalarRelationFilter, TechnicianWhereInput>
  }

  export type InterventionsOrderByWithRelationInput = {
    id?: SortOrder
    technicianId?: SortOrder
    interventionRequestId?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    interventionRequest?: InterventionRequestOrderByWithRelationInput
    technician?: TechnicianOrderByWithRelationInput
  }

  export type InterventionsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: InterventionsWhereInput | InterventionsWhereInput[]
    OR?: InterventionsWhereInput[]
    NOT?: InterventionsWhereInput | InterventionsWhereInput[]
    technicianId?: IntFilter<"Interventions"> | number
    interventionRequestId?: IntFilter<"Interventions"> | number
    description?: StringFilter<"Interventions"> | string
    createdAt?: DateTimeFilter<"Interventions"> | Date | string
    interventionRequest?: XOR<InterventionRequestScalarRelationFilter, InterventionRequestWhereInput>
    technician?: XOR<TechnicianScalarRelationFilter, TechnicianWhereInput>
  }, "id">

  export type InterventionsOrderByWithAggregationInput = {
    id?: SortOrder
    technicianId?: SortOrder
    interventionRequestId?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    _count?: InterventionsCountOrderByAggregateInput
    _avg?: InterventionsAvgOrderByAggregateInput
    _max?: InterventionsMaxOrderByAggregateInput
    _min?: InterventionsMinOrderByAggregateInput
    _sum?: InterventionsSumOrderByAggregateInput
  }

  export type InterventionsScalarWhereWithAggregatesInput = {
    AND?: InterventionsScalarWhereWithAggregatesInput | InterventionsScalarWhereWithAggregatesInput[]
    OR?: InterventionsScalarWhereWithAggregatesInput[]
    NOT?: InterventionsScalarWhereWithAggregatesInput | InterventionsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Interventions"> | number
    technicianId?: IntWithAggregatesFilter<"Interventions"> | number
    interventionRequestId?: IntWithAggregatesFilter<"Interventions"> | number
    description?: StringWithAggregatesFilter<"Interventions"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Interventions"> | Date | string
  }

  export type ReportWhereInput = {
    AND?: ReportWhereInput | ReportWhereInput[]
    OR?: ReportWhereInput[]
    NOT?: ReportWhereInput | ReportWhereInput[]
    id?: IntFilter<"Report"> | number
    reporterId?: IntFilter<"Report"> | number
    assetId?: IntNullableFilter<"Report"> | number | null
    categoryId?: IntNullableFilter<"Report"> | number | null
    description?: StringNullableFilter<"Report"> | string | null
    imageUrl?: StringNullableFilter<"Report"> | string | null
    type?: EnumOperationTypeFilter<"Report"> | $Enums.OperationType
    status?: EnumReportStatusFilter<"Report"> | $Enums.ReportStatus
    priority?: EnumPriorityFilter<"Report"> | $Enums.Priority
    createdAt?: DateTimeFilter<"Report"> | Date | string
    updatedAt?: DateTimeFilter<"Report"> | Date | string
    reporter?: XOR<UserScalarRelationFilter, UserWhereInput>
    asset?: XOR<AssetNullableScalarRelationFilter, AssetWhereInput> | null
    category?: XOR<CategoryNullableScalarRelationFilter, CategoryWhereInput> | null
    interventionRequests?: InterventionRequestListRelationFilter
  }

  export type ReportOrderByWithRelationInput = {
    id?: SortOrder
    reporterId?: SortOrder
    assetId?: SortOrderInput | SortOrder
    categoryId?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    imageUrl?: SortOrderInput | SortOrder
    type?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    reporter?: UserOrderByWithRelationInput
    asset?: AssetOrderByWithRelationInput
    category?: CategoryOrderByWithRelationInput
    interventionRequests?: InterventionRequestOrderByRelationAggregateInput
  }

  export type ReportWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ReportWhereInput | ReportWhereInput[]
    OR?: ReportWhereInput[]
    NOT?: ReportWhereInput | ReportWhereInput[]
    reporterId?: IntFilter<"Report"> | number
    assetId?: IntNullableFilter<"Report"> | number | null
    categoryId?: IntNullableFilter<"Report"> | number | null
    description?: StringNullableFilter<"Report"> | string | null
    imageUrl?: StringNullableFilter<"Report"> | string | null
    type?: EnumOperationTypeFilter<"Report"> | $Enums.OperationType
    status?: EnumReportStatusFilter<"Report"> | $Enums.ReportStatus
    priority?: EnumPriorityFilter<"Report"> | $Enums.Priority
    createdAt?: DateTimeFilter<"Report"> | Date | string
    updatedAt?: DateTimeFilter<"Report"> | Date | string
    reporter?: XOR<UserScalarRelationFilter, UserWhereInput>
    asset?: XOR<AssetNullableScalarRelationFilter, AssetWhereInput> | null
    category?: XOR<CategoryNullableScalarRelationFilter, CategoryWhereInput> | null
    interventionRequests?: InterventionRequestListRelationFilter
  }, "id">

  export type ReportOrderByWithAggregationInput = {
    id?: SortOrder
    reporterId?: SortOrder
    assetId?: SortOrderInput | SortOrder
    categoryId?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    imageUrl?: SortOrderInput | SortOrder
    type?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ReportCountOrderByAggregateInput
    _avg?: ReportAvgOrderByAggregateInput
    _max?: ReportMaxOrderByAggregateInput
    _min?: ReportMinOrderByAggregateInput
    _sum?: ReportSumOrderByAggregateInput
  }

  export type ReportScalarWhereWithAggregatesInput = {
    AND?: ReportScalarWhereWithAggregatesInput | ReportScalarWhereWithAggregatesInput[]
    OR?: ReportScalarWhereWithAggregatesInput[]
    NOT?: ReportScalarWhereWithAggregatesInput | ReportScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Report"> | number
    reporterId?: IntWithAggregatesFilter<"Report"> | number
    assetId?: IntNullableWithAggregatesFilter<"Report"> | number | null
    categoryId?: IntNullableWithAggregatesFilter<"Report"> | number | null
    description?: StringNullableWithAggregatesFilter<"Report"> | string | null
    imageUrl?: StringNullableWithAggregatesFilter<"Report"> | string | null
    type?: EnumOperationTypeWithAggregatesFilter<"Report"> | $Enums.OperationType
    status?: EnumReportStatusWithAggregatesFilter<"Report"> | $Enums.ReportStatus
    priority?: EnumPriorityWithAggregatesFilter<"Report"> | $Enums.Priority
    createdAt?: DateTimeWithAggregatesFilter<"Report"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Report"> | Date | string
  }

  export type ScheduleWhereInput = {
    AND?: ScheduleWhereInput | ScheduleWhereInput[]
    OR?: ScheduleWhereInput[]
    NOT?: ScheduleWhereInput | ScheduleWhereInput[]
    id?: IntFilter<"Schedule"> | number
    assetId?: IntNullableFilter<"Schedule"> | number | null
    schedulerId?: IntFilter<"Schedule"> | number
    categoryId?: IntNullableFilter<"Schedule"> | number | null
    description?: StringNullableFilter<"Schedule"> | string | null
    lastMaintenanceDate?: StringFilter<"Schedule"> | string
    frequency?: IntFilter<"Schedule"> | number
    priority?: EnumPriorityFilter<"Schedule"> | $Enums.Priority
    createdAt?: DateTimeFilter<"Schedule"> | Date | string
    updatedAt?: DateTimeFilter<"Schedule"> | Date | string
    asset?: XOR<AssetNullableScalarRelationFilter, AssetWhereInput> | null
    category?: XOR<CategoryNullableScalarRelationFilter, CategoryWhereInput> | null
    scheduler?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type ScheduleOrderByWithRelationInput = {
    id?: SortOrder
    assetId?: SortOrderInput | SortOrder
    schedulerId?: SortOrder
    categoryId?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    lastMaintenanceDate?: SortOrder
    frequency?: SortOrder
    priority?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    asset?: AssetOrderByWithRelationInput
    category?: CategoryOrderByWithRelationInput
    scheduler?: UserOrderByWithRelationInput
  }

  export type ScheduleWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ScheduleWhereInput | ScheduleWhereInput[]
    OR?: ScheduleWhereInput[]
    NOT?: ScheduleWhereInput | ScheduleWhereInput[]
    assetId?: IntNullableFilter<"Schedule"> | number | null
    schedulerId?: IntFilter<"Schedule"> | number
    categoryId?: IntNullableFilter<"Schedule"> | number | null
    description?: StringNullableFilter<"Schedule"> | string | null
    lastMaintenanceDate?: StringFilter<"Schedule"> | string
    frequency?: IntFilter<"Schedule"> | number
    priority?: EnumPriorityFilter<"Schedule"> | $Enums.Priority
    createdAt?: DateTimeFilter<"Schedule"> | Date | string
    updatedAt?: DateTimeFilter<"Schedule"> | Date | string
    asset?: XOR<AssetNullableScalarRelationFilter, AssetWhereInput> | null
    category?: XOR<CategoryNullableScalarRelationFilter, CategoryWhereInput> | null
    scheduler?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type ScheduleOrderByWithAggregationInput = {
    id?: SortOrder
    assetId?: SortOrderInput | SortOrder
    schedulerId?: SortOrder
    categoryId?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    lastMaintenanceDate?: SortOrder
    frequency?: SortOrder
    priority?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ScheduleCountOrderByAggregateInput
    _avg?: ScheduleAvgOrderByAggregateInput
    _max?: ScheduleMaxOrderByAggregateInput
    _min?: ScheduleMinOrderByAggregateInput
    _sum?: ScheduleSumOrderByAggregateInput
  }

  export type ScheduleScalarWhereWithAggregatesInput = {
    AND?: ScheduleScalarWhereWithAggregatesInput | ScheduleScalarWhereWithAggregatesInput[]
    OR?: ScheduleScalarWhereWithAggregatesInput[]
    NOT?: ScheduleScalarWhereWithAggregatesInput | ScheduleScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Schedule"> | number
    assetId?: IntNullableWithAggregatesFilter<"Schedule"> | number | null
    schedulerId?: IntWithAggregatesFilter<"Schedule"> | number
    categoryId?: IntNullableWithAggregatesFilter<"Schedule"> | number | null
    description?: StringNullableWithAggregatesFilter<"Schedule"> | string | null
    lastMaintenanceDate?: StringWithAggregatesFilter<"Schedule"> | string
    frequency?: IntWithAggregatesFilter<"Schedule"> | number
    priority?: EnumPriorityWithAggregatesFilter<"Schedule"> | $Enums.Priority
    createdAt?: DateTimeWithAggregatesFilter<"Schedule"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Schedule"> | Date | string
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    name?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    avatarUrl?: StringNullableFilter<"User"> | string | null
    role?: EnumRoleFilter<"User"> | $Enums.Role
    approvalStatus?: EnumApprovalStatusFilter<"User"> | $Enums.ApprovalStatus
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    technicianData?: XOR<TechnicianNullableScalarRelationFilter, TechnicianWhereInput> | null
    notifications?: NotificationListRelationFilter
    reports?: ReportListRelationFilter
    interventionRequests?: InterventionRequestListRelationFilter
    createdSchedules?: ScheduleListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    avatarUrl?: SortOrderInput | SortOrder
    role?: SortOrder
    approvalStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    technicianData?: TechnicianOrderByWithRelationInput
    notifications?: NotificationOrderByRelationAggregateInput
    reports?: ReportOrderByRelationAggregateInput
    interventionRequests?: InterventionRequestOrderByRelationAggregateInput
    createdSchedules?: ScheduleOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    avatarUrl?: StringNullableFilter<"User"> | string | null
    role?: EnumRoleFilter<"User"> | $Enums.Role
    approvalStatus?: EnumApprovalStatusFilter<"User"> | $Enums.ApprovalStatus
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    technicianData?: XOR<TechnicianNullableScalarRelationFilter, TechnicianWhereInput> | null
    notifications?: NotificationListRelationFilter
    reports?: ReportListRelationFilter
    interventionRequests?: InterventionRequestListRelationFilter
    createdSchedules?: ScheduleListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    avatarUrl?: SortOrderInput | SortOrder
    role?: SortOrder
    approvalStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    name?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    avatarUrl?: StringNullableWithAggregatesFilter<"User"> | string | null
    role?: EnumRoleWithAggregatesFilter<"User"> | $Enums.Role
    approvalStatus?: EnumApprovalStatusWithAggregatesFilter<"User"> | $Enums.ApprovalStatus
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type TechnicianWhereInput = {
    AND?: TechnicianWhereInput | TechnicianWhereInput[]
    OR?: TechnicianWhereInput[]
    NOT?: TechnicianWhereInput | TechnicianWhereInput[]
    userId?: IntFilter<"Technician"> | number
    professionId?: IntNullableFilter<"Technician"> | number | null
    createdAt?: DateTimeFilter<"Technician"> | Date | string
    updatedAt?: DateTimeFilter<"Technician"> | Date | string
    availabilities?: TechnicianAvailabilityListRelationFilter
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    profession?: XOR<ProfessionNullableScalarRelationFilter, ProfessionWhereInput> | null
    TechnicianAssignements?: TechnicianAssignementListRelationFilter
    Interventions?: InterventionsListRelationFilter
  }

  export type TechnicianOrderByWithRelationInput = {
    userId?: SortOrder
    professionId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    availabilities?: TechnicianAvailabilityOrderByRelationAggregateInput
    user?: UserOrderByWithRelationInput
    profession?: ProfessionOrderByWithRelationInput
    TechnicianAssignements?: TechnicianAssignementOrderByRelationAggregateInput
    Interventions?: InterventionsOrderByRelationAggregateInput
  }

  export type TechnicianWhereUniqueInput = Prisma.AtLeast<{
    userId?: number
    AND?: TechnicianWhereInput | TechnicianWhereInput[]
    OR?: TechnicianWhereInput[]
    NOT?: TechnicianWhereInput | TechnicianWhereInput[]
    professionId?: IntNullableFilter<"Technician"> | number | null
    createdAt?: DateTimeFilter<"Technician"> | Date | string
    updatedAt?: DateTimeFilter<"Technician"> | Date | string
    availabilities?: TechnicianAvailabilityListRelationFilter
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    profession?: XOR<ProfessionNullableScalarRelationFilter, ProfessionWhereInput> | null
    TechnicianAssignements?: TechnicianAssignementListRelationFilter
    Interventions?: InterventionsListRelationFilter
  }, "userId" | "userId">

  export type TechnicianOrderByWithAggregationInput = {
    userId?: SortOrder
    professionId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TechnicianCountOrderByAggregateInput
    _avg?: TechnicianAvgOrderByAggregateInput
    _max?: TechnicianMaxOrderByAggregateInput
    _min?: TechnicianMinOrderByAggregateInput
    _sum?: TechnicianSumOrderByAggregateInput
  }

  export type TechnicianScalarWhereWithAggregatesInput = {
    AND?: TechnicianScalarWhereWithAggregatesInput | TechnicianScalarWhereWithAggregatesInput[]
    OR?: TechnicianScalarWhereWithAggregatesInput[]
    NOT?: TechnicianScalarWhereWithAggregatesInput | TechnicianScalarWhereWithAggregatesInput[]
    userId?: IntWithAggregatesFilter<"Technician"> | number
    professionId?: IntNullableWithAggregatesFilter<"Technician"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"Technician"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Technician"> | Date | string
  }

  export type ProfessionWhereInput = {
    AND?: ProfessionWhereInput | ProfessionWhereInput[]
    OR?: ProfessionWhereInput[]
    NOT?: ProfessionWhereInput | ProfessionWhereInput[]
    id?: IntFilter<"Profession"> | number
    name?: StringFilter<"Profession"> | string
    createdAt?: DateTimeFilter<"Profession"> | Date | string
    updatedAt?: DateTimeFilter<"Profession"> | Date | string
    technicians?: TechnicianListRelationFilter
  }

  export type ProfessionOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    technicians?: TechnicianOrderByRelationAggregateInput
  }

  export type ProfessionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: ProfessionWhereInput | ProfessionWhereInput[]
    OR?: ProfessionWhereInput[]
    NOT?: ProfessionWhereInput | ProfessionWhereInput[]
    createdAt?: DateTimeFilter<"Profession"> | Date | string
    updatedAt?: DateTimeFilter<"Profession"> | Date | string
    technicians?: TechnicianListRelationFilter
  }, "id" | "name">

  export type ProfessionOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ProfessionCountOrderByAggregateInput
    _avg?: ProfessionAvgOrderByAggregateInput
    _max?: ProfessionMaxOrderByAggregateInput
    _min?: ProfessionMinOrderByAggregateInput
    _sum?: ProfessionSumOrderByAggregateInput
  }

  export type ProfessionScalarWhereWithAggregatesInput = {
    AND?: ProfessionScalarWhereWithAggregatesInput | ProfessionScalarWhereWithAggregatesInput[]
    OR?: ProfessionScalarWhereWithAggregatesInput[]
    NOT?: ProfessionScalarWhereWithAggregatesInput | ProfessionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Profession"> | number
    name?: StringWithAggregatesFilter<"Profession"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Profession"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Profession"> | Date | string
  }

  export type TechnicianAvailabilityWhereInput = {
    AND?: TechnicianAvailabilityWhereInput | TechnicianAvailabilityWhereInput[]
    OR?: TechnicianAvailabilityWhereInput[]
    NOT?: TechnicianAvailabilityWhereInput | TechnicianAvailabilityWhereInput[]
    technicianId?: IntFilter<"TechnicianAvailability"> | number
    day?: EnumDayFilter<"TechnicianAvailability"> | $Enums.Day
    startHour?: IntFilter<"TechnicianAvailability"> | number
    endHour?: IntFilter<"TechnicianAvailability"> | number
    createdAt?: DateTimeFilter<"TechnicianAvailability"> | Date | string
    updatedAt?: DateTimeFilter<"TechnicianAvailability"> | Date | string
    technician?: XOR<TechnicianScalarRelationFilter, TechnicianWhereInput>
  }

  export type TechnicianAvailabilityOrderByWithRelationInput = {
    technicianId?: SortOrder
    day?: SortOrder
    startHour?: SortOrder
    endHour?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    technician?: TechnicianOrderByWithRelationInput
  }

  export type TechnicianAvailabilityWhereUniqueInput = Prisma.AtLeast<{
    technicianId_day?: TechnicianAvailabilityTechnicianIdDayCompoundUniqueInput
    AND?: TechnicianAvailabilityWhereInput | TechnicianAvailabilityWhereInput[]
    OR?: TechnicianAvailabilityWhereInput[]
    NOT?: TechnicianAvailabilityWhereInput | TechnicianAvailabilityWhereInput[]
    technicianId?: IntFilter<"TechnicianAvailability"> | number
    day?: EnumDayFilter<"TechnicianAvailability"> | $Enums.Day
    startHour?: IntFilter<"TechnicianAvailability"> | number
    endHour?: IntFilter<"TechnicianAvailability"> | number
    createdAt?: DateTimeFilter<"TechnicianAvailability"> | Date | string
    updatedAt?: DateTimeFilter<"TechnicianAvailability"> | Date | string
    technician?: XOR<TechnicianScalarRelationFilter, TechnicianWhereInput>
  }, "technicianId_day">

  export type TechnicianAvailabilityOrderByWithAggregationInput = {
    technicianId?: SortOrder
    day?: SortOrder
    startHour?: SortOrder
    endHour?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TechnicianAvailabilityCountOrderByAggregateInput
    _avg?: TechnicianAvailabilityAvgOrderByAggregateInput
    _max?: TechnicianAvailabilityMaxOrderByAggregateInput
    _min?: TechnicianAvailabilityMinOrderByAggregateInput
    _sum?: TechnicianAvailabilitySumOrderByAggregateInput
  }

  export type TechnicianAvailabilityScalarWhereWithAggregatesInput = {
    AND?: TechnicianAvailabilityScalarWhereWithAggregatesInput | TechnicianAvailabilityScalarWhereWithAggregatesInput[]
    OR?: TechnicianAvailabilityScalarWhereWithAggregatesInput[]
    NOT?: TechnicianAvailabilityScalarWhereWithAggregatesInput | TechnicianAvailabilityScalarWhereWithAggregatesInput[]
    technicianId?: IntWithAggregatesFilter<"TechnicianAvailability"> | number
    day?: EnumDayWithAggregatesFilter<"TechnicianAvailability"> | $Enums.Day
    startHour?: IntWithAggregatesFilter<"TechnicianAvailability"> | number
    endHour?: IntWithAggregatesFilter<"TechnicianAvailability"> | number
    createdAt?: DateTimeWithAggregatesFilter<"TechnicianAvailability"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"TechnicianAvailability"> | Date | string
  }

  export type NotificationWhereInput = {
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    id?: IntFilter<"Notification"> | number
    userId?: IntFilter<"Notification"> | number
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    read?: BoolFilter<"Notification"> | boolean
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    updatedAt?: DateTimeFilter<"Notification"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type NotificationOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    message?: SortOrder
    read?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type NotificationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    userId?: IntFilter<"Notification"> | number
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    read?: BoolFilter<"Notification"> | boolean
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    updatedAt?: DateTimeFilter<"Notification"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type NotificationOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    message?: SortOrder
    read?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: NotificationCountOrderByAggregateInput
    _avg?: NotificationAvgOrderByAggregateInput
    _max?: NotificationMaxOrderByAggregateInput
    _min?: NotificationMinOrderByAggregateInput
    _sum?: NotificationSumOrderByAggregateInput
  }

  export type NotificationScalarWhereWithAggregatesInput = {
    AND?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    OR?: NotificationScalarWhereWithAggregatesInput[]
    NOT?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Notification"> | number
    userId?: IntWithAggregatesFilter<"Notification"> | number
    title?: StringWithAggregatesFilter<"Notification"> | string
    message?: StringWithAggregatesFilter<"Notification"> | string
    read?: BoolWithAggregatesFilter<"Notification"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Notification"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Notification"> | Date | string
  }

  export type AssetCreateInput = {
    name: string
    inventoryCode: string
    status: $Enums.AssetStatus
    type: $Enums.AssetType
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    subAssets?: AssetCreateNestedManyWithoutLocationInput
    reports?: ReportCreateNestedManyWithoutAssetInput
    assignements?: TechnicianAssignementCreateNestedManyWithoutLocationInput
    location?: AssetCreateNestedOneWithoutSubAssetsInput
    category?: CategoryCreateNestedOneWithoutAssetsInput
    schedules?: ScheduleCreateNestedManyWithoutAssetInput
  }

  export type AssetUncheckedCreateInput = {
    id?: number
    locationId?: number | null
    categoryId?: number | null
    name: string
    inventoryCode: string
    status: $Enums.AssetStatus
    type: $Enums.AssetType
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    subAssets?: AssetUncheckedCreateNestedManyWithoutLocationInput
    reports?: ReportUncheckedCreateNestedManyWithoutAssetInput
    assignements?: TechnicianAssignementUncheckedCreateNestedManyWithoutLocationInput
    schedules?: ScheduleUncheckedCreateNestedManyWithoutAssetInput
  }

  export type AssetUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    inventoryCode?: StringFieldUpdateOperationsInput | string
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    type?: EnumAssetTypeFieldUpdateOperationsInput | $Enums.AssetType
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subAssets?: AssetUpdateManyWithoutLocationNestedInput
    reports?: ReportUpdateManyWithoutAssetNestedInput
    assignements?: TechnicianAssignementUpdateManyWithoutLocationNestedInput
    location?: AssetUpdateOneWithoutSubAssetsNestedInput
    category?: CategoryUpdateOneWithoutAssetsNestedInput
    schedules?: ScheduleUpdateManyWithoutAssetNestedInput
  }

  export type AssetUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    locationId?: NullableIntFieldUpdateOperationsInput | number | null
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    name?: StringFieldUpdateOperationsInput | string
    inventoryCode?: StringFieldUpdateOperationsInput | string
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    type?: EnumAssetTypeFieldUpdateOperationsInput | $Enums.AssetType
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subAssets?: AssetUncheckedUpdateManyWithoutLocationNestedInput
    reports?: ReportUncheckedUpdateManyWithoutAssetNestedInput
    assignements?: TechnicianAssignementUncheckedUpdateManyWithoutLocationNestedInput
    schedules?: ScheduleUncheckedUpdateManyWithoutAssetNestedInput
  }

  export type AssetCreateManyInput = {
    id?: number
    locationId?: number | null
    categoryId?: number | null
    name: string
    inventoryCode: string
    status: $Enums.AssetStatus
    type: $Enums.AssetType
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AssetUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    inventoryCode?: StringFieldUpdateOperationsInput | string
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    type?: EnumAssetTypeFieldUpdateOperationsInput | $Enums.AssetType
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AssetUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    locationId?: NullableIntFieldUpdateOperationsInput | number | null
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    name?: StringFieldUpdateOperationsInput | string
    inventoryCode?: StringFieldUpdateOperationsInput | string
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    type?: EnumAssetTypeFieldUpdateOperationsInput | $Enums.AssetType
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CategoryCreateInput = {
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    assets?: AssetCreateNestedManyWithoutCategoryInput
    children?: CategoryCreateNestedManyWithoutParentInput
    parent?: CategoryCreateNestedOneWithoutChildrenInput
    Report?: ReportCreateNestedManyWithoutCategoryInput
    ancestors?: CategoryClosureCreateNestedManyWithoutAncestorInput
    descendants?: CategoryClosureCreateNestedManyWithoutDescendantInput
    schedules?: ScheduleCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateInput = {
    id?: number
    name: string
    description?: string | null
    parentId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    assets?: AssetUncheckedCreateNestedManyWithoutCategoryInput
    children?: CategoryUncheckedCreateNestedManyWithoutParentInput
    Report?: ReportUncheckedCreateNestedManyWithoutCategoryInput
    ancestors?: CategoryClosureUncheckedCreateNestedManyWithoutAncestorInput
    descendants?: CategoryClosureUncheckedCreateNestedManyWithoutDescendantInput
    schedules?: ScheduleUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assets?: AssetUpdateManyWithoutCategoryNestedInput
    children?: CategoryUpdateManyWithoutParentNestedInput
    parent?: CategoryUpdateOneWithoutChildrenNestedInput
    Report?: ReportUpdateManyWithoutCategoryNestedInput
    ancestors?: CategoryClosureUpdateManyWithoutAncestorNestedInput
    descendants?: CategoryClosureUpdateManyWithoutDescendantNestedInput
    schedules?: ScheduleUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assets?: AssetUncheckedUpdateManyWithoutCategoryNestedInput
    children?: CategoryUncheckedUpdateManyWithoutParentNestedInput
    Report?: ReportUncheckedUpdateManyWithoutCategoryNestedInput
    ancestors?: CategoryClosureUncheckedUpdateManyWithoutAncestorNestedInput
    descendants?: CategoryClosureUncheckedUpdateManyWithoutDescendantNestedInput
    schedules?: ScheduleUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryCreateManyInput = {
    id?: number
    name: string
    description?: string | null
    parentId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CategoryUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CategoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CategoryClosureCreateInput = {
    depth: number
    ancestor: CategoryCreateNestedOneWithoutAncestorsInput
    descendant: CategoryCreateNestedOneWithoutDescendantsInput
  }

  export type CategoryClosureUncheckedCreateInput = {
    ancestorId: number
    descendantId: number
    depth: number
  }

  export type CategoryClosureUpdateInput = {
    depth?: IntFieldUpdateOperationsInput | number
    ancestor?: CategoryUpdateOneRequiredWithoutAncestorsNestedInput
    descendant?: CategoryUpdateOneRequiredWithoutDescendantsNestedInput
  }

  export type CategoryClosureUncheckedUpdateInput = {
    ancestorId?: IntFieldUpdateOperationsInput | number
    descendantId?: IntFieldUpdateOperationsInput | number
    depth?: IntFieldUpdateOperationsInput | number
  }

  export type CategoryClosureCreateManyInput = {
    ancestorId: number
    descendantId: number
    depth: number
  }

  export type CategoryClosureUpdateManyMutationInput = {
    depth?: IntFieldUpdateOperationsInput | number
  }

  export type CategoryClosureUncheckedUpdateManyInput = {
    ancestorId?: IntFieldUpdateOperationsInput | number
    descendantId?: IntFieldUpdateOperationsInput | number
    depth?: IntFieldUpdateOperationsInput | number
  }

  export type InterventionRequestCreateInput = {
    title: string
    deadline: string
    status: $Enums.InterventionRequestStatus
    notified?: boolean
    createdAt?: Date | string
    assignedTo?: TechnicianAssignementCreateNestedManyWithoutInterventionRequestInput
    Interventions?: InterventionsCreateNestedManyWithoutInterventionRequestInput
    report: ReportCreateNestedOneWithoutInterventionRequestsInput
    creator: UserCreateNestedOneWithoutInterventionRequestsInput
  }

  export type InterventionRequestUncheckedCreateInput = {
    id?: number
    reportId: number
    title: string
    deadline: string
    status: $Enums.InterventionRequestStatus
    createdBy: number
    notified?: boolean
    createdAt?: Date | string
    assignedTo?: TechnicianAssignementUncheckedCreateNestedManyWithoutInterventionRequestInput
    Interventions?: InterventionsUncheckedCreateNestedManyWithoutInterventionRequestInput
  }

  export type InterventionRequestUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    deadline?: StringFieldUpdateOperationsInput | string
    status?: EnumInterventionRequestStatusFieldUpdateOperationsInput | $Enums.InterventionRequestStatus
    notified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedTo?: TechnicianAssignementUpdateManyWithoutInterventionRequestNestedInput
    Interventions?: InterventionsUpdateManyWithoutInterventionRequestNestedInput
    report?: ReportUpdateOneRequiredWithoutInterventionRequestsNestedInput
    creator?: UserUpdateOneRequiredWithoutInterventionRequestsNestedInput
  }

  export type InterventionRequestUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    reportId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    deadline?: StringFieldUpdateOperationsInput | string
    status?: EnumInterventionRequestStatusFieldUpdateOperationsInput | $Enums.InterventionRequestStatus
    createdBy?: IntFieldUpdateOperationsInput | number
    notified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedTo?: TechnicianAssignementUncheckedUpdateManyWithoutInterventionRequestNestedInput
    Interventions?: InterventionsUncheckedUpdateManyWithoutInterventionRequestNestedInput
  }

  export type InterventionRequestCreateManyInput = {
    id?: number
    reportId: number
    title: string
    deadline: string
    status: $Enums.InterventionRequestStatus
    createdBy: number
    notified?: boolean
    createdAt?: Date | string
  }

  export type InterventionRequestUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    deadline?: StringFieldUpdateOperationsInput | string
    status?: EnumInterventionRequestStatusFieldUpdateOperationsInput | $Enums.InterventionRequestStatus
    notified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InterventionRequestUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    reportId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    deadline?: StringFieldUpdateOperationsInput | string
    status?: EnumInterventionRequestStatusFieldUpdateOperationsInput | $Enums.InterventionRequestStatus
    createdBy?: IntFieldUpdateOperationsInput | number
    notified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TechnicianAssignementCreateInput = {
    completed?: boolean
    details?: string | null
    createdAt?: Date | string
    technician: TechnicianCreateNestedOneWithoutTechnicianAssignementsInput
    interventionRequest: InterventionRequestCreateNestedOneWithoutAssignedToInput
    location?: AssetCreateNestedOneWithoutAssignementsInput
  }

  export type TechnicianAssignementUncheckedCreateInput = {
    id?: number
    technicianId: number
    interventionRequestId: number
    locationId?: number | null
    completed?: boolean
    details?: string | null
    createdAt?: Date | string
  }

  export type TechnicianAssignementUpdateInput = {
    completed?: BoolFieldUpdateOperationsInput | boolean
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    technician?: TechnicianUpdateOneRequiredWithoutTechnicianAssignementsNestedInput
    interventionRequest?: InterventionRequestUpdateOneRequiredWithoutAssignedToNestedInput
    location?: AssetUpdateOneWithoutAssignementsNestedInput
  }

  export type TechnicianAssignementUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    technicianId?: IntFieldUpdateOperationsInput | number
    interventionRequestId?: IntFieldUpdateOperationsInput | number
    locationId?: NullableIntFieldUpdateOperationsInput | number | null
    completed?: BoolFieldUpdateOperationsInput | boolean
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TechnicianAssignementCreateManyInput = {
    id?: number
    technicianId: number
    interventionRequestId: number
    locationId?: number | null
    completed?: boolean
    details?: string | null
    createdAt?: Date | string
  }

  export type TechnicianAssignementUpdateManyMutationInput = {
    completed?: BoolFieldUpdateOperationsInput | boolean
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TechnicianAssignementUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    technicianId?: IntFieldUpdateOperationsInput | number
    interventionRequestId?: IntFieldUpdateOperationsInput | number
    locationId?: NullableIntFieldUpdateOperationsInput | number | null
    completed?: BoolFieldUpdateOperationsInput | boolean
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InterventionsCreateInput = {
    description: string
    createdAt?: Date | string
    interventionRequest: InterventionRequestCreateNestedOneWithoutInterventionsInput
    technician: TechnicianCreateNestedOneWithoutInterventionsInput
  }

  export type InterventionsUncheckedCreateInput = {
    id?: number
    technicianId: number
    interventionRequestId: number
    description: string
    createdAt?: Date | string
  }

  export type InterventionsUpdateInput = {
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    interventionRequest?: InterventionRequestUpdateOneRequiredWithoutInterventionsNestedInput
    technician?: TechnicianUpdateOneRequiredWithoutInterventionsNestedInput
  }

  export type InterventionsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    technicianId?: IntFieldUpdateOperationsInput | number
    interventionRequestId?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InterventionsCreateManyInput = {
    id?: number
    technicianId: number
    interventionRequestId: number
    description: string
    createdAt?: Date | string
  }

  export type InterventionsUpdateManyMutationInput = {
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InterventionsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    technicianId?: IntFieldUpdateOperationsInput | number
    interventionRequestId?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportCreateInput = {
    description?: string | null
    imageUrl?: string | null
    type: $Enums.OperationType
    status: $Enums.ReportStatus
    priority: $Enums.Priority
    createdAt?: Date | string
    updatedAt?: Date | string
    reporter: UserCreateNestedOneWithoutReportsInput
    asset?: AssetCreateNestedOneWithoutReportsInput
    category?: CategoryCreateNestedOneWithoutReportInput
    interventionRequests?: InterventionRequestCreateNestedManyWithoutReportInput
  }

  export type ReportUncheckedCreateInput = {
    id?: number
    reporterId: number
    assetId?: number | null
    categoryId?: number | null
    description?: string | null
    imageUrl?: string | null
    type: $Enums.OperationType
    status: $Enums.ReportStatus
    priority: $Enums.Priority
    createdAt?: Date | string
    updatedAt?: Date | string
    interventionRequests?: InterventionRequestUncheckedCreateNestedManyWithoutReportInput
  }

  export type ReportUpdateInput = {
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumOperationTypeFieldUpdateOperationsInput | $Enums.OperationType
    status?: EnumReportStatusFieldUpdateOperationsInput | $Enums.ReportStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reporter?: UserUpdateOneRequiredWithoutReportsNestedInput
    asset?: AssetUpdateOneWithoutReportsNestedInput
    category?: CategoryUpdateOneWithoutReportNestedInput
    interventionRequests?: InterventionRequestUpdateManyWithoutReportNestedInput
  }

  export type ReportUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    reporterId?: IntFieldUpdateOperationsInput | number
    assetId?: NullableIntFieldUpdateOperationsInput | number | null
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumOperationTypeFieldUpdateOperationsInput | $Enums.OperationType
    status?: EnumReportStatusFieldUpdateOperationsInput | $Enums.ReportStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    interventionRequests?: InterventionRequestUncheckedUpdateManyWithoutReportNestedInput
  }

  export type ReportCreateManyInput = {
    id?: number
    reporterId: number
    assetId?: number | null
    categoryId?: number | null
    description?: string | null
    imageUrl?: string | null
    type: $Enums.OperationType
    status: $Enums.ReportStatus
    priority: $Enums.Priority
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReportUpdateManyMutationInput = {
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumOperationTypeFieldUpdateOperationsInput | $Enums.OperationType
    status?: EnumReportStatusFieldUpdateOperationsInput | $Enums.ReportStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    reporterId?: IntFieldUpdateOperationsInput | number
    assetId?: NullableIntFieldUpdateOperationsInput | number | null
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumOperationTypeFieldUpdateOperationsInput | $Enums.OperationType
    status?: EnumReportStatusFieldUpdateOperationsInput | $Enums.ReportStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScheduleCreateInput = {
    description?: string | null
    lastMaintenanceDate: string
    frequency: number
    priority: $Enums.Priority
    createdAt?: Date | string
    updatedAt?: Date | string
    asset?: AssetCreateNestedOneWithoutSchedulesInput
    category?: CategoryCreateNestedOneWithoutSchedulesInput
    scheduler: UserCreateNestedOneWithoutCreatedSchedulesInput
  }

  export type ScheduleUncheckedCreateInput = {
    id?: number
    assetId?: number | null
    schedulerId: number
    categoryId?: number | null
    description?: string | null
    lastMaintenanceDate: string
    frequency: number
    priority: $Enums.Priority
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ScheduleUpdateInput = {
    description?: NullableStringFieldUpdateOperationsInput | string | null
    lastMaintenanceDate?: StringFieldUpdateOperationsInput | string
    frequency?: IntFieldUpdateOperationsInput | number
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    asset?: AssetUpdateOneWithoutSchedulesNestedInput
    category?: CategoryUpdateOneWithoutSchedulesNestedInput
    scheduler?: UserUpdateOneRequiredWithoutCreatedSchedulesNestedInput
  }

  export type ScheduleUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    assetId?: NullableIntFieldUpdateOperationsInput | number | null
    schedulerId?: IntFieldUpdateOperationsInput | number
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    lastMaintenanceDate?: StringFieldUpdateOperationsInput | string
    frequency?: IntFieldUpdateOperationsInput | number
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScheduleCreateManyInput = {
    id?: number
    assetId?: number | null
    schedulerId: number
    categoryId?: number | null
    description?: string | null
    lastMaintenanceDate: string
    frequency: number
    priority: $Enums.Priority
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ScheduleUpdateManyMutationInput = {
    description?: NullableStringFieldUpdateOperationsInput | string | null
    lastMaintenanceDate?: StringFieldUpdateOperationsInput | string
    frequency?: IntFieldUpdateOperationsInput | number
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScheduleUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    assetId?: NullableIntFieldUpdateOperationsInput | number | null
    schedulerId?: IntFieldUpdateOperationsInput | number
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    lastMaintenanceDate?: StringFieldUpdateOperationsInput | string
    frequency?: IntFieldUpdateOperationsInput | number
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateInput = {
    name: string
    email: string
    password: string
    avatarUrl?: string | null
    role?: $Enums.Role
    approvalStatus?: $Enums.ApprovalStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    technicianData?: TechnicianCreateNestedOneWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    reports?: ReportCreateNestedManyWithoutReporterInput
    interventionRequests?: InterventionRequestCreateNestedManyWithoutCreatorInput
    createdSchedules?: ScheduleCreateNestedManyWithoutSchedulerInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    name: string
    email: string
    password: string
    avatarUrl?: string | null
    role?: $Enums.Role
    approvalStatus?: $Enums.ApprovalStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    technicianData?: TechnicianUncheckedCreateNestedOneWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    reports?: ReportUncheckedCreateNestedManyWithoutReporterInput
    interventionRequests?: InterventionRequestUncheckedCreateNestedManyWithoutCreatorInput
    createdSchedules?: ScheduleUncheckedCreateNestedManyWithoutSchedulerInput
  }

  export type UserUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    approvalStatus?: EnumApprovalStatusFieldUpdateOperationsInput | $Enums.ApprovalStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    technicianData?: TechnicianUpdateOneWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    reports?: ReportUpdateManyWithoutReporterNestedInput
    interventionRequests?: InterventionRequestUpdateManyWithoutCreatorNestedInput
    createdSchedules?: ScheduleUpdateManyWithoutSchedulerNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    approvalStatus?: EnumApprovalStatusFieldUpdateOperationsInput | $Enums.ApprovalStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    technicianData?: TechnicianUncheckedUpdateOneWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    reports?: ReportUncheckedUpdateManyWithoutReporterNestedInput
    interventionRequests?: InterventionRequestUncheckedUpdateManyWithoutCreatorNestedInput
    createdSchedules?: ScheduleUncheckedUpdateManyWithoutSchedulerNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    name: string
    email: string
    password: string
    avatarUrl?: string | null
    role?: $Enums.Role
    approvalStatus?: $Enums.ApprovalStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    approvalStatus?: EnumApprovalStatusFieldUpdateOperationsInput | $Enums.ApprovalStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    approvalStatus?: EnumApprovalStatusFieldUpdateOperationsInput | $Enums.ApprovalStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TechnicianCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    availabilities?: TechnicianAvailabilityCreateNestedManyWithoutTechnicianInput
    user: UserCreateNestedOneWithoutTechnicianDataInput
    profession?: ProfessionCreateNestedOneWithoutTechniciansInput
    TechnicianAssignements?: TechnicianAssignementCreateNestedManyWithoutTechnicianInput
    Interventions?: InterventionsCreateNestedManyWithoutTechnicianInput
  }

  export type TechnicianUncheckedCreateInput = {
    userId: number
    professionId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    availabilities?: TechnicianAvailabilityUncheckedCreateNestedManyWithoutTechnicianInput
    TechnicianAssignements?: TechnicianAssignementUncheckedCreateNestedManyWithoutTechnicianInput
    Interventions?: InterventionsUncheckedCreateNestedManyWithoutTechnicianInput
  }

  export type TechnicianUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    availabilities?: TechnicianAvailabilityUpdateManyWithoutTechnicianNestedInput
    user?: UserUpdateOneRequiredWithoutTechnicianDataNestedInput
    profession?: ProfessionUpdateOneWithoutTechniciansNestedInput
    TechnicianAssignements?: TechnicianAssignementUpdateManyWithoutTechnicianNestedInput
    Interventions?: InterventionsUpdateManyWithoutTechnicianNestedInput
  }

  export type TechnicianUncheckedUpdateInput = {
    userId?: IntFieldUpdateOperationsInput | number
    professionId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    availabilities?: TechnicianAvailabilityUncheckedUpdateManyWithoutTechnicianNestedInput
    TechnicianAssignements?: TechnicianAssignementUncheckedUpdateManyWithoutTechnicianNestedInput
    Interventions?: InterventionsUncheckedUpdateManyWithoutTechnicianNestedInput
  }

  export type TechnicianCreateManyInput = {
    userId: number
    professionId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TechnicianUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TechnicianUncheckedUpdateManyInput = {
    userId?: IntFieldUpdateOperationsInput | number
    professionId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfessionCreateInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    technicians?: TechnicianCreateNestedManyWithoutProfessionInput
  }

  export type ProfessionUncheckedCreateInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    technicians?: TechnicianUncheckedCreateNestedManyWithoutProfessionInput
  }

  export type ProfessionUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    technicians?: TechnicianUpdateManyWithoutProfessionNestedInput
  }

  export type ProfessionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    technicians?: TechnicianUncheckedUpdateManyWithoutProfessionNestedInput
  }

  export type ProfessionCreateManyInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProfessionUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfessionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TechnicianAvailabilityCreateInput = {
    day: $Enums.Day
    startHour: number
    endHour: number
    createdAt?: Date | string
    updatedAt?: Date | string
    technician: TechnicianCreateNestedOneWithoutAvailabilitiesInput
  }

  export type TechnicianAvailabilityUncheckedCreateInput = {
    technicianId: number
    day: $Enums.Day
    startHour: number
    endHour: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TechnicianAvailabilityUpdateInput = {
    day?: EnumDayFieldUpdateOperationsInput | $Enums.Day
    startHour?: IntFieldUpdateOperationsInput | number
    endHour?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    technician?: TechnicianUpdateOneRequiredWithoutAvailabilitiesNestedInput
  }

  export type TechnicianAvailabilityUncheckedUpdateInput = {
    technicianId?: IntFieldUpdateOperationsInput | number
    day?: EnumDayFieldUpdateOperationsInput | $Enums.Day
    startHour?: IntFieldUpdateOperationsInput | number
    endHour?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TechnicianAvailabilityCreateManyInput = {
    technicianId: number
    day: $Enums.Day
    startHour: number
    endHour: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TechnicianAvailabilityUpdateManyMutationInput = {
    day?: EnumDayFieldUpdateOperationsInput | $Enums.Day
    startHour?: IntFieldUpdateOperationsInput | number
    endHour?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TechnicianAvailabilityUncheckedUpdateManyInput = {
    technicianId?: IntFieldUpdateOperationsInput | number
    day?: EnumDayFieldUpdateOperationsInput | $Enums.Day
    startHour?: IntFieldUpdateOperationsInput | number
    endHour?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationCreateInput = {
    title: string
    message: string
    read?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutNotificationsInput
  }

  export type NotificationUncheckedCreateInput = {
    id?: number
    userId: number
    title: string
    message: string
    read?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    read?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutNotificationsNestedInput
  }

  export type NotificationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    read?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationCreateManyInput = {
    id?: number
    userId: number
    title: string
    message: string
    read?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    read?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    read?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumAssetStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.AssetStatus | EnumAssetStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AssetStatus[]
    notIn?: $Enums.AssetStatus[]
    not?: NestedEnumAssetStatusFilter<$PrismaModel> | $Enums.AssetStatus
  }

  export type EnumAssetTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.AssetType | EnumAssetTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AssetType[]
    notIn?: $Enums.AssetType[]
    not?: NestedEnumAssetTypeFilter<$PrismaModel> | $Enums.AssetType
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type AssetListRelationFilter = {
    every?: AssetWhereInput
    some?: AssetWhereInput
    none?: AssetWhereInput
  }

  export type ReportListRelationFilter = {
    every?: ReportWhereInput
    some?: ReportWhereInput
    none?: ReportWhereInput
  }

  export type TechnicianAssignementListRelationFilter = {
    every?: TechnicianAssignementWhereInput
    some?: TechnicianAssignementWhereInput
    none?: TechnicianAssignementWhereInput
  }

  export type AssetNullableScalarRelationFilter = {
    is?: AssetWhereInput | null
    isNot?: AssetWhereInput | null
  }

  export type CategoryNullableScalarRelationFilter = {
    is?: CategoryWhereInput | null
    isNot?: CategoryWhereInput | null
  }

  export type ScheduleListRelationFilter = {
    every?: ScheduleWhereInput
    some?: ScheduleWhereInput
    none?: ScheduleWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type AssetOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReportOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TechnicianAssignementOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ScheduleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AssetCountOrderByAggregateInput = {
    id?: SortOrder
    locationId?: SortOrder
    categoryId?: SortOrder
    name?: SortOrder
    inventoryCode?: SortOrder
    status?: SortOrder
    type?: SortOrder
    image?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AssetAvgOrderByAggregateInput = {
    id?: SortOrder
    locationId?: SortOrder
    categoryId?: SortOrder
  }

  export type AssetMaxOrderByAggregateInput = {
    id?: SortOrder
    locationId?: SortOrder
    categoryId?: SortOrder
    name?: SortOrder
    inventoryCode?: SortOrder
    status?: SortOrder
    type?: SortOrder
    image?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AssetMinOrderByAggregateInput = {
    id?: SortOrder
    locationId?: SortOrder
    categoryId?: SortOrder
    name?: SortOrder
    inventoryCode?: SortOrder
    status?: SortOrder
    type?: SortOrder
    image?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AssetSumOrderByAggregateInput = {
    id?: SortOrder
    locationId?: SortOrder
    categoryId?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumAssetStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AssetStatus | EnumAssetStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AssetStatus[]
    notIn?: $Enums.AssetStatus[]
    not?: NestedEnumAssetStatusWithAggregatesFilter<$PrismaModel> | $Enums.AssetStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAssetStatusFilter<$PrismaModel>
    _max?: NestedEnumAssetStatusFilter<$PrismaModel>
  }

  export type EnumAssetTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AssetType | EnumAssetTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AssetType[]
    notIn?: $Enums.AssetType[]
    not?: NestedEnumAssetTypeWithAggregatesFilter<$PrismaModel> | $Enums.AssetType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAssetTypeFilter<$PrismaModel>
    _max?: NestedEnumAssetTypeFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type CategoryListRelationFilter = {
    every?: CategoryWhereInput
    some?: CategoryWhereInput
    none?: CategoryWhereInput
  }

  export type CategoryClosureListRelationFilter = {
    every?: CategoryClosureWhereInput
    some?: CategoryClosureWhereInput
    none?: CategoryClosureWhereInput
  }

  export type CategoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CategoryClosureOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CategoryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    parentId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CategoryAvgOrderByAggregateInput = {
    id?: SortOrder
    parentId?: SortOrder
  }

  export type CategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    parentId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CategoryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    parentId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CategorySumOrderByAggregateInput = {
    id?: SortOrder
    parentId?: SortOrder
  }

  export type CategoryScalarRelationFilter = {
    is?: CategoryWhereInput
    isNot?: CategoryWhereInput
  }

  export type CategoryClosureAncestorIdDescendantIdCompoundUniqueInput = {
    ancestorId: number
    descendantId: number
  }

  export type CategoryClosureCountOrderByAggregateInput = {
    ancestorId?: SortOrder
    descendantId?: SortOrder
    depth?: SortOrder
  }

  export type CategoryClosureAvgOrderByAggregateInput = {
    ancestorId?: SortOrder
    descendantId?: SortOrder
    depth?: SortOrder
  }

  export type CategoryClosureMaxOrderByAggregateInput = {
    ancestorId?: SortOrder
    descendantId?: SortOrder
    depth?: SortOrder
  }

  export type CategoryClosureMinOrderByAggregateInput = {
    ancestorId?: SortOrder
    descendantId?: SortOrder
    depth?: SortOrder
  }

  export type CategoryClosureSumOrderByAggregateInput = {
    ancestorId?: SortOrder
    descendantId?: SortOrder
    depth?: SortOrder
  }

  export type EnumInterventionRequestStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.InterventionRequestStatus | EnumInterventionRequestStatusFieldRefInput<$PrismaModel>
    in?: $Enums.InterventionRequestStatus[]
    notIn?: $Enums.InterventionRequestStatus[]
    not?: NestedEnumInterventionRequestStatusFilter<$PrismaModel> | $Enums.InterventionRequestStatus
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type InterventionsListRelationFilter = {
    every?: InterventionsWhereInput
    some?: InterventionsWhereInput
    none?: InterventionsWhereInput
  }

  export type ReportScalarRelationFilter = {
    is?: ReportWhereInput
    isNot?: ReportWhereInput
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type InterventionsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InterventionRequestCountOrderByAggregateInput = {
    id?: SortOrder
    reportId?: SortOrder
    title?: SortOrder
    deadline?: SortOrder
    status?: SortOrder
    createdBy?: SortOrder
    notified?: SortOrder
    createdAt?: SortOrder
  }

  export type InterventionRequestAvgOrderByAggregateInput = {
    id?: SortOrder
    reportId?: SortOrder
    createdBy?: SortOrder
  }

  export type InterventionRequestMaxOrderByAggregateInput = {
    id?: SortOrder
    reportId?: SortOrder
    title?: SortOrder
    deadline?: SortOrder
    status?: SortOrder
    createdBy?: SortOrder
    notified?: SortOrder
    createdAt?: SortOrder
  }

  export type InterventionRequestMinOrderByAggregateInput = {
    id?: SortOrder
    reportId?: SortOrder
    title?: SortOrder
    deadline?: SortOrder
    status?: SortOrder
    createdBy?: SortOrder
    notified?: SortOrder
    createdAt?: SortOrder
  }

  export type InterventionRequestSumOrderByAggregateInput = {
    id?: SortOrder
    reportId?: SortOrder
    createdBy?: SortOrder
  }

  export type EnumInterventionRequestStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.InterventionRequestStatus | EnumInterventionRequestStatusFieldRefInput<$PrismaModel>
    in?: $Enums.InterventionRequestStatus[]
    notIn?: $Enums.InterventionRequestStatus[]
    not?: NestedEnumInterventionRequestStatusWithAggregatesFilter<$PrismaModel> | $Enums.InterventionRequestStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumInterventionRequestStatusFilter<$PrismaModel>
    _max?: NestedEnumInterventionRequestStatusFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type TechnicianScalarRelationFilter = {
    is?: TechnicianWhereInput
    isNot?: TechnicianWhereInput
  }

  export type InterventionRequestScalarRelationFilter = {
    is?: InterventionRequestWhereInput
    isNot?: InterventionRequestWhereInput
  }

  export type TechnicianAssignementCountOrderByAggregateInput = {
    id?: SortOrder
    technicianId?: SortOrder
    interventionRequestId?: SortOrder
    locationId?: SortOrder
    completed?: SortOrder
    details?: SortOrder
    createdAt?: SortOrder
  }

  export type TechnicianAssignementAvgOrderByAggregateInput = {
    id?: SortOrder
    technicianId?: SortOrder
    interventionRequestId?: SortOrder
    locationId?: SortOrder
  }

  export type TechnicianAssignementMaxOrderByAggregateInput = {
    id?: SortOrder
    technicianId?: SortOrder
    interventionRequestId?: SortOrder
    locationId?: SortOrder
    completed?: SortOrder
    details?: SortOrder
    createdAt?: SortOrder
  }

  export type TechnicianAssignementMinOrderByAggregateInput = {
    id?: SortOrder
    technicianId?: SortOrder
    interventionRequestId?: SortOrder
    locationId?: SortOrder
    completed?: SortOrder
    details?: SortOrder
    createdAt?: SortOrder
  }

  export type TechnicianAssignementSumOrderByAggregateInput = {
    id?: SortOrder
    technicianId?: SortOrder
    interventionRequestId?: SortOrder
    locationId?: SortOrder
  }

  export type InterventionsCountOrderByAggregateInput = {
    id?: SortOrder
    technicianId?: SortOrder
    interventionRequestId?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
  }

  export type InterventionsAvgOrderByAggregateInput = {
    id?: SortOrder
    technicianId?: SortOrder
    interventionRequestId?: SortOrder
  }

  export type InterventionsMaxOrderByAggregateInput = {
    id?: SortOrder
    technicianId?: SortOrder
    interventionRequestId?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
  }

  export type InterventionsMinOrderByAggregateInput = {
    id?: SortOrder
    technicianId?: SortOrder
    interventionRequestId?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
  }

  export type InterventionsSumOrderByAggregateInput = {
    id?: SortOrder
    technicianId?: SortOrder
    interventionRequestId?: SortOrder
  }

  export type EnumOperationTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.OperationType | EnumOperationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.OperationType[]
    notIn?: $Enums.OperationType[]
    not?: NestedEnumOperationTypeFilter<$PrismaModel> | $Enums.OperationType
  }

  export type EnumReportStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ReportStatus | EnumReportStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ReportStatus[]
    notIn?: $Enums.ReportStatus[]
    not?: NestedEnumReportStatusFilter<$PrismaModel> | $Enums.ReportStatus
  }

  export type EnumPriorityFilter<$PrismaModel = never> = {
    equals?: $Enums.Priority | EnumPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.Priority[]
    notIn?: $Enums.Priority[]
    not?: NestedEnumPriorityFilter<$PrismaModel> | $Enums.Priority
  }

  export type InterventionRequestListRelationFilter = {
    every?: InterventionRequestWhereInput
    some?: InterventionRequestWhereInput
    none?: InterventionRequestWhereInput
  }

  export type InterventionRequestOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReportCountOrderByAggregateInput = {
    id?: SortOrder
    reporterId?: SortOrder
    assetId?: SortOrder
    categoryId?: SortOrder
    description?: SortOrder
    imageUrl?: SortOrder
    type?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ReportAvgOrderByAggregateInput = {
    id?: SortOrder
    reporterId?: SortOrder
    assetId?: SortOrder
    categoryId?: SortOrder
  }

  export type ReportMaxOrderByAggregateInput = {
    id?: SortOrder
    reporterId?: SortOrder
    assetId?: SortOrder
    categoryId?: SortOrder
    description?: SortOrder
    imageUrl?: SortOrder
    type?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ReportMinOrderByAggregateInput = {
    id?: SortOrder
    reporterId?: SortOrder
    assetId?: SortOrder
    categoryId?: SortOrder
    description?: SortOrder
    imageUrl?: SortOrder
    type?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ReportSumOrderByAggregateInput = {
    id?: SortOrder
    reporterId?: SortOrder
    assetId?: SortOrder
    categoryId?: SortOrder
  }

  export type EnumOperationTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.OperationType | EnumOperationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.OperationType[]
    notIn?: $Enums.OperationType[]
    not?: NestedEnumOperationTypeWithAggregatesFilter<$PrismaModel> | $Enums.OperationType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumOperationTypeFilter<$PrismaModel>
    _max?: NestedEnumOperationTypeFilter<$PrismaModel>
  }

  export type EnumReportStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ReportStatus | EnumReportStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ReportStatus[]
    notIn?: $Enums.ReportStatus[]
    not?: NestedEnumReportStatusWithAggregatesFilter<$PrismaModel> | $Enums.ReportStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumReportStatusFilter<$PrismaModel>
    _max?: NestedEnumReportStatusFilter<$PrismaModel>
  }

  export type EnumPriorityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Priority | EnumPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.Priority[]
    notIn?: $Enums.Priority[]
    not?: NestedEnumPriorityWithAggregatesFilter<$PrismaModel> | $Enums.Priority
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPriorityFilter<$PrismaModel>
    _max?: NestedEnumPriorityFilter<$PrismaModel>
  }

  export type ScheduleCountOrderByAggregateInput = {
    id?: SortOrder
    assetId?: SortOrder
    schedulerId?: SortOrder
    categoryId?: SortOrder
    description?: SortOrder
    lastMaintenanceDate?: SortOrder
    frequency?: SortOrder
    priority?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ScheduleAvgOrderByAggregateInput = {
    id?: SortOrder
    assetId?: SortOrder
    schedulerId?: SortOrder
    categoryId?: SortOrder
    frequency?: SortOrder
  }

  export type ScheduleMaxOrderByAggregateInput = {
    id?: SortOrder
    assetId?: SortOrder
    schedulerId?: SortOrder
    categoryId?: SortOrder
    description?: SortOrder
    lastMaintenanceDate?: SortOrder
    frequency?: SortOrder
    priority?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ScheduleMinOrderByAggregateInput = {
    id?: SortOrder
    assetId?: SortOrder
    schedulerId?: SortOrder
    categoryId?: SortOrder
    description?: SortOrder
    lastMaintenanceDate?: SortOrder
    frequency?: SortOrder
    priority?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ScheduleSumOrderByAggregateInput = {
    id?: SortOrder
    assetId?: SortOrder
    schedulerId?: SortOrder
    categoryId?: SortOrder
    frequency?: SortOrder
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[]
    notIn?: $Enums.Role[]
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type EnumApprovalStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ApprovalStatus | EnumApprovalStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ApprovalStatus[]
    notIn?: $Enums.ApprovalStatus[]
    not?: NestedEnumApprovalStatusFilter<$PrismaModel> | $Enums.ApprovalStatus
  }

  export type TechnicianNullableScalarRelationFilter = {
    is?: TechnicianWhereInput | null
    isNot?: TechnicianWhereInput | null
  }

  export type NotificationListRelationFilter = {
    every?: NotificationWhereInput
    some?: NotificationWhereInput
    none?: NotificationWhereInput
  }

  export type NotificationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    avatarUrl?: SortOrder
    role?: SortOrder
    approvalStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    avatarUrl?: SortOrder
    role?: SortOrder
    approvalStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    avatarUrl?: SortOrder
    role?: SortOrder
    approvalStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[]
    notIn?: $Enums.Role[]
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type EnumApprovalStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ApprovalStatus | EnumApprovalStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ApprovalStatus[]
    notIn?: $Enums.ApprovalStatus[]
    not?: NestedEnumApprovalStatusWithAggregatesFilter<$PrismaModel> | $Enums.ApprovalStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumApprovalStatusFilter<$PrismaModel>
    _max?: NestedEnumApprovalStatusFilter<$PrismaModel>
  }

  export type TechnicianAvailabilityListRelationFilter = {
    every?: TechnicianAvailabilityWhereInput
    some?: TechnicianAvailabilityWhereInput
    none?: TechnicianAvailabilityWhereInput
  }

  export type ProfessionNullableScalarRelationFilter = {
    is?: ProfessionWhereInput | null
    isNot?: ProfessionWhereInput | null
  }

  export type TechnicianAvailabilityOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TechnicianCountOrderByAggregateInput = {
    userId?: SortOrder
    professionId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TechnicianAvgOrderByAggregateInput = {
    userId?: SortOrder
    professionId?: SortOrder
  }

  export type TechnicianMaxOrderByAggregateInput = {
    userId?: SortOrder
    professionId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TechnicianMinOrderByAggregateInput = {
    userId?: SortOrder
    professionId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TechnicianSumOrderByAggregateInput = {
    userId?: SortOrder
    professionId?: SortOrder
  }

  export type TechnicianListRelationFilter = {
    every?: TechnicianWhereInput
    some?: TechnicianWhereInput
    none?: TechnicianWhereInput
  }

  export type TechnicianOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProfessionCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProfessionAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ProfessionMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProfessionMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProfessionSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EnumDayFilter<$PrismaModel = never> = {
    equals?: $Enums.Day | EnumDayFieldRefInput<$PrismaModel>
    in?: $Enums.Day[]
    notIn?: $Enums.Day[]
    not?: NestedEnumDayFilter<$PrismaModel> | $Enums.Day
  }

  export type TechnicianAvailabilityTechnicianIdDayCompoundUniqueInput = {
    technicianId: number
    day: $Enums.Day
  }

  export type TechnicianAvailabilityCountOrderByAggregateInput = {
    technicianId?: SortOrder
    day?: SortOrder
    startHour?: SortOrder
    endHour?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TechnicianAvailabilityAvgOrderByAggregateInput = {
    technicianId?: SortOrder
    startHour?: SortOrder
    endHour?: SortOrder
  }

  export type TechnicianAvailabilityMaxOrderByAggregateInput = {
    technicianId?: SortOrder
    day?: SortOrder
    startHour?: SortOrder
    endHour?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TechnicianAvailabilityMinOrderByAggregateInput = {
    technicianId?: SortOrder
    day?: SortOrder
    startHour?: SortOrder
    endHour?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TechnicianAvailabilitySumOrderByAggregateInput = {
    technicianId?: SortOrder
    startHour?: SortOrder
    endHour?: SortOrder
  }

  export type EnumDayWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Day | EnumDayFieldRefInput<$PrismaModel>
    in?: $Enums.Day[]
    notIn?: $Enums.Day[]
    not?: NestedEnumDayWithAggregatesFilter<$PrismaModel> | $Enums.Day
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDayFilter<$PrismaModel>
    _max?: NestedEnumDayFilter<$PrismaModel>
  }

  export type NotificationCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    message?: SortOrder
    read?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NotificationAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type NotificationMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    message?: SortOrder
    read?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NotificationMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    message?: SortOrder
    read?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NotificationSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type AssetCreateNestedManyWithoutLocationInput = {
    create?: XOR<AssetCreateWithoutLocationInput, AssetUncheckedCreateWithoutLocationInput> | AssetCreateWithoutLocationInput[] | AssetUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: AssetCreateOrConnectWithoutLocationInput | AssetCreateOrConnectWithoutLocationInput[]
    createMany?: AssetCreateManyLocationInputEnvelope
    connect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
  }

  export type ReportCreateNestedManyWithoutAssetInput = {
    create?: XOR<ReportCreateWithoutAssetInput, ReportUncheckedCreateWithoutAssetInput> | ReportCreateWithoutAssetInput[] | ReportUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutAssetInput | ReportCreateOrConnectWithoutAssetInput[]
    createMany?: ReportCreateManyAssetInputEnvelope
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
  }

  export type TechnicianAssignementCreateNestedManyWithoutLocationInput = {
    create?: XOR<TechnicianAssignementCreateWithoutLocationInput, TechnicianAssignementUncheckedCreateWithoutLocationInput> | TechnicianAssignementCreateWithoutLocationInput[] | TechnicianAssignementUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: TechnicianAssignementCreateOrConnectWithoutLocationInput | TechnicianAssignementCreateOrConnectWithoutLocationInput[]
    createMany?: TechnicianAssignementCreateManyLocationInputEnvelope
    connect?: TechnicianAssignementWhereUniqueInput | TechnicianAssignementWhereUniqueInput[]
  }

  export type AssetCreateNestedOneWithoutSubAssetsInput = {
    create?: XOR<AssetCreateWithoutSubAssetsInput, AssetUncheckedCreateWithoutSubAssetsInput>
    connectOrCreate?: AssetCreateOrConnectWithoutSubAssetsInput
    connect?: AssetWhereUniqueInput
  }

  export type CategoryCreateNestedOneWithoutAssetsInput = {
    create?: XOR<CategoryCreateWithoutAssetsInput, CategoryUncheckedCreateWithoutAssetsInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutAssetsInput
    connect?: CategoryWhereUniqueInput
  }

  export type ScheduleCreateNestedManyWithoutAssetInput = {
    create?: XOR<ScheduleCreateWithoutAssetInput, ScheduleUncheckedCreateWithoutAssetInput> | ScheduleCreateWithoutAssetInput[] | ScheduleUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: ScheduleCreateOrConnectWithoutAssetInput | ScheduleCreateOrConnectWithoutAssetInput[]
    createMany?: ScheduleCreateManyAssetInputEnvelope
    connect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
  }

  export type AssetUncheckedCreateNestedManyWithoutLocationInput = {
    create?: XOR<AssetCreateWithoutLocationInput, AssetUncheckedCreateWithoutLocationInput> | AssetCreateWithoutLocationInput[] | AssetUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: AssetCreateOrConnectWithoutLocationInput | AssetCreateOrConnectWithoutLocationInput[]
    createMany?: AssetCreateManyLocationInputEnvelope
    connect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
  }

  export type ReportUncheckedCreateNestedManyWithoutAssetInput = {
    create?: XOR<ReportCreateWithoutAssetInput, ReportUncheckedCreateWithoutAssetInput> | ReportCreateWithoutAssetInput[] | ReportUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutAssetInput | ReportCreateOrConnectWithoutAssetInput[]
    createMany?: ReportCreateManyAssetInputEnvelope
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
  }

  export type TechnicianAssignementUncheckedCreateNestedManyWithoutLocationInput = {
    create?: XOR<TechnicianAssignementCreateWithoutLocationInput, TechnicianAssignementUncheckedCreateWithoutLocationInput> | TechnicianAssignementCreateWithoutLocationInput[] | TechnicianAssignementUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: TechnicianAssignementCreateOrConnectWithoutLocationInput | TechnicianAssignementCreateOrConnectWithoutLocationInput[]
    createMany?: TechnicianAssignementCreateManyLocationInputEnvelope
    connect?: TechnicianAssignementWhereUniqueInput | TechnicianAssignementWhereUniqueInput[]
  }

  export type ScheduleUncheckedCreateNestedManyWithoutAssetInput = {
    create?: XOR<ScheduleCreateWithoutAssetInput, ScheduleUncheckedCreateWithoutAssetInput> | ScheduleCreateWithoutAssetInput[] | ScheduleUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: ScheduleCreateOrConnectWithoutAssetInput | ScheduleCreateOrConnectWithoutAssetInput[]
    createMany?: ScheduleCreateManyAssetInputEnvelope
    connect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumAssetStatusFieldUpdateOperationsInput = {
    set?: $Enums.AssetStatus
  }

  export type EnumAssetTypeFieldUpdateOperationsInput = {
    set?: $Enums.AssetType
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type AssetUpdateManyWithoutLocationNestedInput = {
    create?: XOR<AssetCreateWithoutLocationInput, AssetUncheckedCreateWithoutLocationInput> | AssetCreateWithoutLocationInput[] | AssetUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: AssetCreateOrConnectWithoutLocationInput | AssetCreateOrConnectWithoutLocationInput[]
    upsert?: AssetUpsertWithWhereUniqueWithoutLocationInput | AssetUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: AssetCreateManyLocationInputEnvelope
    set?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    disconnect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    delete?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    connect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    update?: AssetUpdateWithWhereUniqueWithoutLocationInput | AssetUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: AssetUpdateManyWithWhereWithoutLocationInput | AssetUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: AssetScalarWhereInput | AssetScalarWhereInput[]
  }

  export type ReportUpdateManyWithoutAssetNestedInput = {
    create?: XOR<ReportCreateWithoutAssetInput, ReportUncheckedCreateWithoutAssetInput> | ReportCreateWithoutAssetInput[] | ReportUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutAssetInput | ReportCreateOrConnectWithoutAssetInput[]
    upsert?: ReportUpsertWithWhereUniqueWithoutAssetInput | ReportUpsertWithWhereUniqueWithoutAssetInput[]
    createMany?: ReportCreateManyAssetInputEnvelope
    set?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    disconnect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    delete?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    update?: ReportUpdateWithWhereUniqueWithoutAssetInput | ReportUpdateWithWhereUniqueWithoutAssetInput[]
    updateMany?: ReportUpdateManyWithWhereWithoutAssetInput | ReportUpdateManyWithWhereWithoutAssetInput[]
    deleteMany?: ReportScalarWhereInput | ReportScalarWhereInput[]
  }

  export type TechnicianAssignementUpdateManyWithoutLocationNestedInput = {
    create?: XOR<TechnicianAssignementCreateWithoutLocationInput, TechnicianAssignementUncheckedCreateWithoutLocationInput> | TechnicianAssignementCreateWithoutLocationInput[] | TechnicianAssignementUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: TechnicianAssignementCreateOrConnectWithoutLocationInput | TechnicianAssignementCreateOrConnectWithoutLocationInput[]
    upsert?: TechnicianAssignementUpsertWithWhereUniqueWithoutLocationInput | TechnicianAssignementUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: TechnicianAssignementCreateManyLocationInputEnvelope
    set?: TechnicianAssignementWhereUniqueInput | TechnicianAssignementWhereUniqueInput[]
    disconnect?: TechnicianAssignementWhereUniqueInput | TechnicianAssignementWhereUniqueInput[]
    delete?: TechnicianAssignementWhereUniqueInput | TechnicianAssignementWhereUniqueInput[]
    connect?: TechnicianAssignementWhereUniqueInput | TechnicianAssignementWhereUniqueInput[]
    update?: TechnicianAssignementUpdateWithWhereUniqueWithoutLocationInput | TechnicianAssignementUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: TechnicianAssignementUpdateManyWithWhereWithoutLocationInput | TechnicianAssignementUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: TechnicianAssignementScalarWhereInput | TechnicianAssignementScalarWhereInput[]
  }

  export type AssetUpdateOneWithoutSubAssetsNestedInput = {
    create?: XOR<AssetCreateWithoutSubAssetsInput, AssetUncheckedCreateWithoutSubAssetsInput>
    connectOrCreate?: AssetCreateOrConnectWithoutSubAssetsInput
    upsert?: AssetUpsertWithoutSubAssetsInput
    disconnect?: AssetWhereInput | boolean
    delete?: AssetWhereInput | boolean
    connect?: AssetWhereUniqueInput
    update?: XOR<XOR<AssetUpdateToOneWithWhereWithoutSubAssetsInput, AssetUpdateWithoutSubAssetsInput>, AssetUncheckedUpdateWithoutSubAssetsInput>
  }

  export type CategoryUpdateOneWithoutAssetsNestedInput = {
    create?: XOR<CategoryCreateWithoutAssetsInput, CategoryUncheckedCreateWithoutAssetsInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutAssetsInput
    upsert?: CategoryUpsertWithoutAssetsInput
    disconnect?: CategoryWhereInput | boolean
    delete?: CategoryWhereInput | boolean
    connect?: CategoryWhereUniqueInput
    update?: XOR<XOR<CategoryUpdateToOneWithWhereWithoutAssetsInput, CategoryUpdateWithoutAssetsInput>, CategoryUncheckedUpdateWithoutAssetsInput>
  }

  export type ScheduleUpdateManyWithoutAssetNestedInput = {
    create?: XOR<ScheduleCreateWithoutAssetInput, ScheduleUncheckedCreateWithoutAssetInput> | ScheduleCreateWithoutAssetInput[] | ScheduleUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: ScheduleCreateOrConnectWithoutAssetInput | ScheduleCreateOrConnectWithoutAssetInput[]
    upsert?: ScheduleUpsertWithWhereUniqueWithoutAssetInput | ScheduleUpsertWithWhereUniqueWithoutAssetInput[]
    createMany?: ScheduleCreateManyAssetInputEnvelope
    set?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    disconnect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    delete?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    connect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    update?: ScheduleUpdateWithWhereUniqueWithoutAssetInput | ScheduleUpdateWithWhereUniqueWithoutAssetInput[]
    updateMany?: ScheduleUpdateManyWithWhereWithoutAssetInput | ScheduleUpdateManyWithWhereWithoutAssetInput[]
    deleteMany?: ScheduleScalarWhereInput | ScheduleScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type AssetUncheckedUpdateManyWithoutLocationNestedInput = {
    create?: XOR<AssetCreateWithoutLocationInput, AssetUncheckedCreateWithoutLocationInput> | AssetCreateWithoutLocationInput[] | AssetUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: AssetCreateOrConnectWithoutLocationInput | AssetCreateOrConnectWithoutLocationInput[]
    upsert?: AssetUpsertWithWhereUniqueWithoutLocationInput | AssetUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: AssetCreateManyLocationInputEnvelope
    set?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    disconnect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    delete?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    connect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    update?: AssetUpdateWithWhereUniqueWithoutLocationInput | AssetUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: AssetUpdateManyWithWhereWithoutLocationInput | AssetUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: AssetScalarWhereInput | AssetScalarWhereInput[]
  }

  export type ReportUncheckedUpdateManyWithoutAssetNestedInput = {
    create?: XOR<ReportCreateWithoutAssetInput, ReportUncheckedCreateWithoutAssetInput> | ReportCreateWithoutAssetInput[] | ReportUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutAssetInput | ReportCreateOrConnectWithoutAssetInput[]
    upsert?: ReportUpsertWithWhereUniqueWithoutAssetInput | ReportUpsertWithWhereUniqueWithoutAssetInput[]
    createMany?: ReportCreateManyAssetInputEnvelope
    set?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    disconnect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    delete?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    update?: ReportUpdateWithWhereUniqueWithoutAssetInput | ReportUpdateWithWhereUniqueWithoutAssetInput[]
    updateMany?: ReportUpdateManyWithWhereWithoutAssetInput | ReportUpdateManyWithWhereWithoutAssetInput[]
    deleteMany?: ReportScalarWhereInput | ReportScalarWhereInput[]
  }

  export type TechnicianAssignementUncheckedUpdateManyWithoutLocationNestedInput = {
    create?: XOR<TechnicianAssignementCreateWithoutLocationInput, TechnicianAssignementUncheckedCreateWithoutLocationInput> | TechnicianAssignementCreateWithoutLocationInput[] | TechnicianAssignementUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: TechnicianAssignementCreateOrConnectWithoutLocationInput | TechnicianAssignementCreateOrConnectWithoutLocationInput[]
    upsert?: TechnicianAssignementUpsertWithWhereUniqueWithoutLocationInput | TechnicianAssignementUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: TechnicianAssignementCreateManyLocationInputEnvelope
    set?: TechnicianAssignementWhereUniqueInput | TechnicianAssignementWhereUniqueInput[]
    disconnect?: TechnicianAssignementWhereUniqueInput | TechnicianAssignementWhereUniqueInput[]
    delete?: TechnicianAssignementWhereUniqueInput | TechnicianAssignementWhereUniqueInput[]
    connect?: TechnicianAssignementWhereUniqueInput | TechnicianAssignementWhereUniqueInput[]
    update?: TechnicianAssignementUpdateWithWhereUniqueWithoutLocationInput | TechnicianAssignementUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: TechnicianAssignementUpdateManyWithWhereWithoutLocationInput | TechnicianAssignementUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: TechnicianAssignementScalarWhereInput | TechnicianAssignementScalarWhereInput[]
  }

  export type ScheduleUncheckedUpdateManyWithoutAssetNestedInput = {
    create?: XOR<ScheduleCreateWithoutAssetInput, ScheduleUncheckedCreateWithoutAssetInput> | ScheduleCreateWithoutAssetInput[] | ScheduleUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: ScheduleCreateOrConnectWithoutAssetInput | ScheduleCreateOrConnectWithoutAssetInput[]
    upsert?: ScheduleUpsertWithWhereUniqueWithoutAssetInput | ScheduleUpsertWithWhereUniqueWithoutAssetInput[]
    createMany?: ScheduleCreateManyAssetInputEnvelope
    set?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    disconnect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    delete?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    connect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    update?: ScheduleUpdateWithWhereUniqueWithoutAssetInput | ScheduleUpdateWithWhereUniqueWithoutAssetInput[]
    updateMany?: ScheduleUpdateManyWithWhereWithoutAssetInput | ScheduleUpdateManyWithWhereWithoutAssetInput[]
    deleteMany?: ScheduleScalarWhereInput | ScheduleScalarWhereInput[]
  }

  export type AssetCreateNestedManyWithoutCategoryInput = {
    create?: XOR<AssetCreateWithoutCategoryInput, AssetUncheckedCreateWithoutCategoryInput> | AssetCreateWithoutCategoryInput[] | AssetUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: AssetCreateOrConnectWithoutCategoryInput | AssetCreateOrConnectWithoutCategoryInput[]
    createMany?: AssetCreateManyCategoryInputEnvelope
    connect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
  }

  export type CategoryCreateNestedManyWithoutParentInput = {
    create?: XOR<CategoryCreateWithoutParentInput, CategoryUncheckedCreateWithoutParentInput> | CategoryCreateWithoutParentInput[] | CategoryUncheckedCreateWithoutParentInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutParentInput | CategoryCreateOrConnectWithoutParentInput[]
    createMany?: CategoryCreateManyParentInputEnvelope
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
  }

  export type CategoryCreateNestedOneWithoutChildrenInput = {
    create?: XOR<CategoryCreateWithoutChildrenInput, CategoryUncheckedCreateWithoutChildrenInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutChildrenInput
    connect?: CategoryWhereUniqueInput
  }

  export type ReportCreateNestedManyWithoutCategoryInput = {
    create?: XOR<ReportCreateWithoutCategoryInput, ReportUncheckedCreateWithoutCategoryInput> | ReportCreateWithoutCategoryInput[] | ReportUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutCategoryInput | ReportCreateOrConnectWithoutCategoryInput[]
    createMany?: ReportCreateManyCategoryInputEnvelope
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
  }

  export type CategoryClosureCreateNestedManyWithoutAncestorInput = {
    create?: XOR<CategoryClosureCreateWithoutAncestorInput, CategoryClosureUncheckedCreateWithoutAncestorInput> | CategoryClosureCreateWithoutAncestorInput[] | CategoryClosureUncheckedCreateWithoutAncestorInput[]
    connectOrCreate?: CategoryClosureCreateOrConnectWithoutAncestorInput | CategoryClosureCreateOrConnectWithoutAncestorInput[]
    createMany?: CategoryClosureCreateManyAncestorInputEnvelope
    connect?: CategoryClosureWhereUniqueInput | CategoryClosureWhereUniqueInput[]
  }

  export type CategoryClosureCreateNestedManyWithoutDescendantInput = {
    create?: XOR<CategoryClosureCreateWithoutDescendantInput, CategoryClosureUncheckedCreateWithoutDescendantInput> | CategoryClosureCreateWithoutDescendantInput[] | CategoryClosureUncheckedCreateWithoutDescendantInput[]
    connectOrCreate?: CategoryClosureCreateOrConnectWithoutDescendantInput | CategoryClosureCreateOrConnectWithoutDescendantInput[]
    createMany?: CategoryClosureCreateManyDescendantInputEnvelope
    connect?: CategoryClosureWhereUniqueInput | CategoryClosureWhereUniqueInput[]
  }

  export type ScheduleCreateNestedManyWithoutCategoryInput = {
    create?: XOR<ScheduleCreateWithoutCategoryInput, ScheduleUncheckedCreateWithoutCategoryInput> | ScheduleCreateWithoutCategoryInput[] | ScheduleUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: ScheduleCreateOrConnectWithoutCategoryInput | ScheduleCreateOrConnectWithoutCategoryInput[]
    createMany?: ScheduleCreateManyCategoryInputEnvelope
    connect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
  }

  export type AssetUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<AssetCreateWithoutCategoryInput, AssetUncheckedCreateWithoutCategoryInput> | AssetCreateWithoutCategoryInput[] | AssetUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: AssetCreateOrConnectWithoutCategoryInput | AssetCreateOrConnectWithoutCategoryInput[]
    createMany?: AssetCreateManyCategoryInputEnvelope
    connect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
  }

  export type CategoryUncheckedCreateNestedManyWithoutParentInput = {
    create?: XOR<CategoryCreateWithoutParentInput, CategoryUncheckedCreateWithoutParentInput> | CategoryCreateWithoutParentInput[] | CategoryUncheckedCreateWithoutParentInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutParentInput | CategoryCreateOrConnectWithoutParentInput[]
    createMany?: CategoryCreateManyParentInputEnvelope
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
  }

  export type ReportUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<ReportCreateWithoutCategoryInput, ReportUncheckedCreateWithoutCategoryInput> | ReportCreateWithoutCategoryInput[] | ReportUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutCategoryInput | ReportCreateOrConnectWithoutCategoryInput[]
    createMany?: ReportCreateManyCategoryInputEnvelope
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
  }

  export type CategoryClosureUncheckedCreateNestedManyWithoutAncestorInput = {
    create?: XOR<CategoryClosureCreateWithoutAncestorInput, CategoryClosureUncheckedCreateWithoutAncestorInput> | CategoryClosureCreateWithoutAncestorInput[] | CategoryClosureUncheckedCreateWithoutAncestorInput[]
    connectOrCreate?: CategoryClosureCreateOrConnectWithoutAncestorInput | CategoryClosureCreateOrConnectWithoutAncestorInput[]
    createMany?: CategoryClosureCreateManyAncestorInputEnvelope
    connect?: CategoryClosureWhereUniqueInput | CategoryClosureWhereUniqueInput[]
  }

  export type CategoryClosureUncheckedCreateNestedManyWithoutDescendantInput = {
    create?: XOR<CategoryClosureCreateWithoutDescendantInput, CategoryClosureUncheckedCreateWithoutDescendantInput> | CategoryClosureCreateWithoutDescendantInput[] | CategoryClosureUncheckedCreateWithoutDescendantInput[]
    connectOrCreate?: CategoryClosureCreateOrConnectWithoutDescendantInput | CategoryClosureCreateOrConnectWithoutDescendantInput[]
    createMany?: CategoryClosureCreateManyDescendantInputEnvelope
    connect?: CategoryClosureWhereUniqueInput | CategoryClosureWhereUniqueInput[]
  }

  export type ScheduleUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<ScheduleCreateWithoutCategoryInput, ScheduleUncheckedCreateWithoutCategoryInput> | ScheduleCreateWithoutCategoryInput[] | ScheduleUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: ScheduleCreateOrConnectWithoutCategoryInput | ScheduleCreateOrConnectWithoutCategoryInput[]
    createMany?: ScheduleCreateManyCategoryInputEnvelope
    connect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
  }

  export type AssetUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<AssetCreateWithoutCategoryInput, AssetUncheckedCreateWithoutCategoryInput> | AssetCreateWithoutCategoryInput[] | AssetUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: AssetCreateOrConnectWithoutCategoryInput | AssetCreateOrConnectWithoutCategoryInput[]
    upsert?: AssetUpsertWithWhereUniqueWithoutCategoryInput | AssetUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: AssetCreateManyCategoryInputEnvelope
    set?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    disconnect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    delete?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    connect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    update?: AssetUpdateWithWhereUniqueWithoutCategoryInput | AssetUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: AssetUpdateManyWithWhereWithoutCategoryInput | AssetUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: AssetScalarWhereInput | AssetScalarWhereInput[]
  }

  export type CategoryUpdateManyWithoutParentNestedInput = {
    create?: XOR<CategoryCreateWithoutParentInput, CategoryUncheckedCreateWithoutParentInput> | CategoryCreateWithoutParentInput[] | CategoryUncheckedCreateWithoutParentInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutParentInput | CategoryCreateOrConnectWithoutParentInput[]
    upsert?: CategoryUpsertWithWhereUniqueWithoutParentInput | CategoryUpsertWithWhereUniqueWithoutParentInput[]
    createMany?: CategoryCreateManyParentInputEnvelope
    set?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    disconnect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    delete?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    update?: CategoryUpdateWithWhereUniqueWithoutParentInput | CategoryUpdateWithWhereUniqueWithoutParentInput[]
    updateMany?: CategoryUpdateManyWithWhereWithoutParentInput | CategoryUpdateManyWithWhereWithoutParentInput[]
    deleteMany?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
  }

  export type CategoryUpdateOneWithoutChildrenNestedInput = {
    create?: XOR<CategoryCreateWithoutChildrenInput, CategoryUncheckedCreateWithoutChildrenInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutChildrenInput
    upsert?: CategoryUpsertWithoutChildrenInput
    disconnect?: CategoryWhereInput | boolean
    delete?: CategoryWhereInput | boolean
    connect?: CategoryWhereUniqueInput
    update?: XOR<XOR<CategoryUpdateToOneWithWhereWithoutChildrenInput, CategoryUpdateWithoutChildrenInput>, CategoryUncheckedUpdateWithoutChildrenInput>
  }

  export type ReportUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<ReportCreateWithoutCategoryInput, ReportUncheckedCreateWithoutCategoryInput> | ReportCreateWithoutCategoryInput[] | ReportUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutCategoryInput | ReportCreateOrConnectWithoutCategoryInput[]
    upsert?: ReportUpsertWithWhereUniqueWithoutCategoryInput | ReportUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: ReportCreateManyCategoryInputEnvelope
    set?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    disconnect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    delete?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    update?: ReportUpdateWithWhereUniqueWithoutCategoryInput | ReportUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: ReportUpdateManyWithWhereWithoutCategoryInput | ReportUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: ReportScalarWhereInput | ReportScalarWhereInput[]
  }

  export type CategoryClosureUpdateManyWithoutAncestorNestedInput = {
    create?: XOR<CategoryClosureCreateWithoutAncestorInput, CategoryClosureUncheckedCreateWithoutAncestorInput> | CategoryClosureCreateWithoutAncestorInput[] | CategoryClosureUncheckedCreateWithoutAncestorInput[]
    connectOrCreate?: CategoryClosureCreateOrConnectWithoutAncestorInput | CategoryClosureCreateOrConnectWithoutAncestorInput[]
    upsert?: CategoryClosureUpsertWithWhereUniqueWithoutAncestorInput | CategoryClosureUpsertWithWhereUniqueWithoutAncestorInput[]
    createMany?: CategoryClosureCreateManyAncestorInputEnvelope
    set?: CategoryClosureWhereUniqueInput | CategoryClosureWhereUniqueInput[]
    disconnect?: CategoryClosureWhereUniqueInput | CategoryClosureWhereUniqueInput[]
    delete?: CategoryClosureWhereUniqueInput | CategoryClosureWhereUniqueInput[]
    connect?: CategoryClosureWhereUniqueInput | CategoryClosureWhereUniqueInput[]
    update?: CategoryClosureUpdateWithWhereUniqueWithoutAncestorInput | CategoryClosureUpdateWithWhereUniqueWithoutAncestorInput[]
    updateMany?: CategoryClosureUpdateManyWithWhereWithoutAncestorInput | CategoryClosureUpdateManyWithWhereWithoutAncestorInput[]
    deleteMany?: CategoryClosureScalarWhereInput | CategoryClosureScalarWhereInput[]
  }

  export type CategoryClosureUpdateManyWithoutDescendantNestedInput = {
    create?: XOR<CategoryClosureCreateWithoutDescendantInput, CategoryClosureUncheckedCreateWithoutDescendantInput> | CategoryClosureCreateWithoutDescendantInput[] | CategoryClosureUncheckedCreateWithoutDescendantInput[]
    connectOrCreate?: CategoryClosureCreateOrConnectWithoutDescendantInput | CategoryClosureCreateOrConnectWithoutDescendantInput[]
    upsert?: CategoryClosureUpsertWithWhereUniqueWithoutDescendantInput | CategoryClosureUpsertWithWhereUniqueWithoutDescendantInput[]
    createMany?: CategoryClosureCreateManyDescendantInputEnvelope
    set?: CategoryClosureWhereUniqueInput | CategoryClosureWhereUniqueInput[]
    disconnect?: CategoryClosureWhereUniqueInput | CategoryClosureWhereUniqueInput[]
    delete?: CategoryClosureWhereUniqueInput | CategoryClosureWhereUniqueInput[]
    connect?: CategoryClosureWhereUniqueInput | CategoryClosureWhereUniqueInput[]
    update?: CategoryClosureUpdateWithWhereUniqueWithoutDescendantInput | CategoryClosureUpdateWithWhereUniqueWithoutDescendantInput[]
    updateMany?: CategoryClosureUpdateManyWithWhereWithoutDescendantInput | CategoryClosureUpdateManyWithWhereWithoutDescendantInput[]
    deleteMany?: CategoryClosureScalarWhereInput | CategoryClosureScalarWhereInput[]
  }

  export type ScheduleUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<ScheduleCreateWithoutCategoryInput, ScheduleUncheckedCreateWithoutCategoryInput> | ScheduleCreateWithoutCategoryInput[] | ScheduleUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: ScheduleCreateOrConnectWithoutCategoryInput | ScheduleCreateOrConnectWithoutCategoryInput[]
    upsert?: ScheduleUpsertWithWhereUniqueWithoutCategoryInput | ScheduleUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: ScheduleCreateManyCategoryInputEnvelope
    set?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    disconnect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    delete?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    connect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    update?: ScheduleUpdateWithWhereUniqueWithoutCategoryInput | ScheduleUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: ScheduleUpdateManyWithWhereWithoutCategoryInput | ScheduleUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: ScheduleScalarWhereInput | ScheduleScalarWhereInput[]
  }

  export type AssetUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<AssetCreateWithoutCategoryInput, AssetUncheckedCreateWithoutCategoryInput> | AssetCreateWithoutCategoryInput[] | AssetUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: AssetCreateOrConnectWithoutCategoryInput | AssetCreateOrConnectWithoutCategoryInput[]
    upsert?: AssetUpsertWithWhereUniqueWithoutCategoryInput | AssetUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: AssetCreateManyCategoryInputEnvelope
    set?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    disconnect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    delete?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    connect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    update?: AssetUpdateWithWhereUniqueWithoutCategoryInput | AssetUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: AssetUpdateManyWithWhereWithoutCategoryInput | AssetUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: AssetScalarWhereInput | AssetScalarWhereInput[]
  }

  export type CategoryUncheckedUpdateManyWithoutParentNestedInput = {
    create?: XOR<CategoryCreateWithoutParentInput, CategoryUncheckedCreateWithoutParentInput> | CategoryCreateWithoutParentInput[] | CategoryUncheckedCreateWithoutParentInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutParentInput | CategoryCreateOrConnectWithoutParentInput[]
    upsert?: CategoryUpsertWithWhereUniqueWithoutParentInput | CategoryUpsertWithWhereUniqueWithoutParentInput[]
    createMany?: CategoryCreateManyParentInputEnvelope
    set?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    disconnect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    delete?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    update?: CategoryUpdateWithWhereUniqueWithoutParentInput | CategoryUpdateWithWhereUniqueWithoutParentInput[]
    updateMany?: CategoryUpdateManyWithWhereWithoutParentInput | CategoryUpdateManyWithWhereWithoutParentInput[]
    deleteMany?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
  }

  export type ReportUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<ReportCreateWithoutCategoryInput, ReportUncheckedCreateWithoutCategoryInput> | ReportCreateWithoutCategoryInput[] | ReportUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutCategoryInput | ReportCreateOrConnectWithoutCategoryInput[]
    upsert?: ReportUpsertWithWhereUniqueWithoutCategoryInput | ReportUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: ReportCreateManyCategoryInputEnvelope
    set?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    disconnect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    delete?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    update?: ReportUpdateWithWhereUniqueWithoutCategoryInput | ReportUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: ReportUpdateManyWithWhereWithoutCategoryInput | ReportUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: ReportScalarWhereInput | ReportScalarWhereInput[]
  }

  export type CategoryClosureUncheckedUpdateManyWithoutAncestorNestedInput = {
    create?: XOR<CategoryClosureCreateWithoutAncestorInput, CategoryClosureUncheckedCreateWithoutAncestorInput> | CategoryClosureCreateWithoutAncestorInput[] | CategoryClosureUncheckedCreateWithoutAncestorInput[]
    connectOrCreate?: CategoryClosureCreateOrConnectWithoutAncestorInput | CategoryClosureCreateOrConnectWithoutAncestorInput[]
    upsert?: CategoryClosureUpsertWithWhereUniqueWithoutAncestorInput | CategoryClosureUpsertWithWhereUniqueWithoutAncestorInput[]
    createMany?: CategoryClosureCreateManyAncestorInputEnvelope
    set?: CategoryClosureWhereUniqueInput | CategoryClosureWhereUniqueInput[]
    disconnect?: CategoryClosureWhereUniqueInput | CategoryClosureWhereUniqueInput[]
    delete?: CategoryClosureWhereUniqueInput | CategoryClosureWhereUniqueInput[]
    connect?: CategoryClosureWhereUniqueInput | CategoryClosureWhereUniqueInput[]
    update?: CategoryClosureUpdateWithWhereUniqueWithoutAncestorInput | CategoryClosureUpdateWithWhereUniqueWithoutAncestorInput[]
    updateMany?: CategoryClosureUpdateManyWithWhereWithoutAncestorInput | CategoryClosureUpdateManyWithWhereWithoutAncestorInput[]
    deleteMany?: CategoryClosureScalarWhereInput | CategoryClosureScalarWhereInput[]
  }

  export type CategoryClosureUncheckedUpdateManyWithoutDescendantNestedInput = {
    create?: XOR<CategoryClosureCreateWithoutDescendantInput, CategoryClosureUncheckedCreateWithoutDescendantInput> | CategoryClosureCreateWithoutDescendantInput[] | CategoryClosureUncheckedCreateWithoutDescendantInput[]
    connectOrCreate?: CategoryClosureCreateOrConnectWithoutDescendantInput | CategoryClosureCreateOrConnectWithoutDescendantInput[]
    upsert?: CategoryClosureUpsertWithWhereUniqueWithoutDescendantInput | CategoryClosureUpsertWithWhereUniqueWithoutDescendantInput[]
    createMany?: CategoryClosureCreateManyDescendantInputEnvelope
    set?: CategoryClosureWhereUniqueInput | CategoryClosureWhereUniqueInput[]
    disconnect?: CategoryClosureWhereUniqueInput | CategoryClosureWhereUniqueInput[]
    delete?: CategoryClosureWhereUniqueInput | CategoryClosureWhereUniqueInput[]
    connect?: CategoryClosureWhereUniqueInput | CategoryClosureWhereUniqueInput[]
    update?: CategoryClosureUpdateWithWhereUniqueWithoutDescendantInput | CategoryClosureUpdateWithWhereUniqueWithoutDescendantInput[]
    updateMany?: CategoryClosureUpdateManyWithWhereWithoutDescendantInput | CategoryClosureUpdateManyWithWhereWithoutDescendantInput[]
    deleteMany?: CategoryClosureScalarWhereInput | CategoryClosureScalarWhereInput[]
  }

  export type ScheduleUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<ScheduleCreateWithoutCategoryInput, ScheduleUncheckedCreateWithoutCategoryInput> | ScheduleCreateWithoutCategoryInput[] | ScheduleUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: ScheduleCreateOrConnectWithoutCategoryInput | ScheduleCreateOrConnectWithoutCategoryInput[]
    upsert?: ScheduleUpsertWithWhereUniqueWithoutCategoryInput | ScheduleUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: ScheduleCreateManyCategoryInputEnvelope
    set?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    disconnect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    delete?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    connect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    update?: ScheduleUpdateWithWhereUniqueWithoutCategoryInput | ScheduleUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: ScheduleUpdateManyWithWhereWithoutCategoryInput | ScheduleUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: ScheduleScalarWhereInput | ScheduleScalarWhereInput[]
  }

  export type CategoryCreateNestedOneWithoutAncestorsInput = {
    create?: XOR<CategoryCreateWithoutAncestorsInput, CategoryUncheckedCreateWithoutAncestorsInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutAncestorsInput
    connect?: CategoryWhereUniqueInput
  }

  export type CategoryCreateNestedOneWithoutDescendantsInput = {
    create?: XOR<CategoryCreateWithoutDescendantsInput, CategoryUncheckedCreateWithoutDescendantsInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutDescendantsInput
    connect?: CategoryWhereUniqueInput
  }

  export type CategoryUpdateOneRequiredWithoutAncestorsNestedInput = {
    create?: XOR<CategoryCreateWithoutAncestorsInput, CategoryUncheckedCreateWithoutAncestorsInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutAncestorsInput
    upsert?: CategoryUpsertWithoutAncestorsInput
    connect?: CategoryWhereUniqueInput
    update?: XOR<XOR<CategoryUpdateToOneWithWhereWithoutAncestorsInput, CategoryUpdateWithoutAncestorsInput>, CategoryUncheckedUpdateWithoutAncestorsInput>
  }

  export type CategoryUpdateOneRequiredWithoutDescendantsNestedInput = {
    create?: XOR<CategoryCreateWithoutDescendantsInput, CategoryUncheckedCreateWithoutDescendantsInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutDescendantsInput
    upsert?: CategoryUpsertWithoutDescendantsInput
    connect?: CategoryWhereUniqueInput
    update?: XOR<XOR<CategoryUpdateToOneWithWhereWithoutDescendantsInput, CategoryUpdateWithoutDescendantsInput>, CategoryUncheckedUpdateWithoutDescendantsInput>
  }

  export type TechnicianAssignementCreateNestedManyWithoutInterventionRequestInput = {
    create?: XOR<TechnicianAssignementCreateWithoutInterventionRequestInput, TechnicianAssignementUncheckedCreateWithoutInterventionRequestInput> | TechnicianAssignementCreateWithoutInterventionRequestInput[] | TechnicianAssignementUncheckedCreateWithoutInterventionRequestInput[]
    connectOrCreate?: TechnicianAssignementCreateOrConnectWithoutInterventionRequestInput | TechnicianAssignementCreateOrConnectWithoutInterventionRequestInput[]
    createMany?: TechnicianAssignementCreateManyInterventionRequestInputEnvelope
    connect?: TechnicianAssignementWhereUniqueInput | TechnicianAssignementWhereUniqueInput[]
  }

  export type InterventionsCreateNestedManyWithoutInterventionRequestInput = {
    create?: XOR<InterventionsCreateWithoutInterventionRequestInput, InterventionsUncheckedCreateWithoutInterventionRequestInput> | InterventionsCreateWithoutInterventionRequestInput[] | InterventionsUncheckedCreateWithoutInterventionRequestInput[]
    connectOrCreate?: InterventionsCreateOrConnectWithoutInterventionRequestInput | InterventionsCreateOrConnectWithoutInterventionRequestInput[]
    createMany?: InterventionsCreateManyInterventionRequestInputEnvelope
    connect?: InterventionsWhereUniqueInput | InterventionsWhereUniqueInput[]
  }

  export type ReportCreateNestedOneWithoutInterventionRequestsInput = {
    create?: XOR<ReportCreateWithoutInterventionRequestsInput, ReportUncheckedCreateWithoutInterventionRequestsInput>
    connectOrCreate?: ReportCreateOrConnectWithoutInterventionRequestsInput
    connect?: ReportWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutInterventionRequestsInput = {
    create?: XOR<UserCreateWithoutInterventionRequestsInput, UserUncheckedCreateWithoutInterventionRequestsInput>
    connectOrCreate?: UserCreateOrConnectWithoutInterventionRequestsInput
    connect?: UserWhereUniqueInput
  }

  export type TechnicianAssignementUncheckedCreateNestedManyWithoutInterventionRequestInput = {
    create?: XOR<TechnicianAssignementCreateWithoutInterventionRequestInput, TechnicianAssignementUncheckedCreateWithoutInterventionRequestInput> | TechnicianAssignementCreateWithoutInterventionRequestInput[] | TechnicianAssignementUncheckedCreateWithoutInterventionRequestInput[]
    connectOrCreate?: TechnicianAssignementCreateOrConnectWithoutInterventionRequestInput | TechnicianAssignementCreateOrConnectWithoutInterventionRequestInput[]
    createMany?: TechnicianAssignementCreateManyInterventionRequestInputEnvelope
    connect?: TechnicianAssignementWhereUniqueInput | TechnicianAssignementWhereUniqueInput[]
  }

  export type InterventionsUncheckedCreateNestedManyWithoutInterventionRequestInput = {
    create?: XOR<InterventionsCreateWithoutInterventionRequestInput, InterventionsUncheckedCreateWithoutInterventionRequestInput> | InterventionsCreateWithoutInterventionRequestInput[] | InterventionsUncheckedCreateWithoutInterventionRequestInput[]
    connectOrCreate?: InterventionsCreateOrConnectWithoutInterventionRequestInput | InterventionsCreateOrConnectWithoutInterventionRequestInput[]
    createMany?: InterventionsCreateManyInterventionRequestInputEnvelope
    connect?: InterventionsWhereUniqueInput | InterventionsWhereUniqueInput[]
  }

  export type EnumInterventionRequestStatusFieldUpdateOperationsInput = {
    set?: $Enums.InterventionRequestStatus
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type TechnicianAssignementUpdateManyWithoutInterventionRequestNestedInput = {
    create?: XOR<TechnicianAssignementCreateWithoutInterventionRequestInput, TechnicianAssignementUncheckedCreateWithoutInterventionRequestInput> | TechnicianAssignementCreateWithoutInterventionRequestInput[] | TechnicianAssignementUncheckedCreateWithoutInterventionRequestInput[]
    connectOrCreate?: TechnicianAssignementCreateOrConnectWithoutInterventionRequestInput | TechnicianAssignementCreateOrConnectWithoutInterventionRequestInput[]
    upsert?: TechnicianAssignementUpsertWithWhereUniqueWithoutInterventionRequestInput | TechnicianAssignementUpsertWithWhereUniqueWithoutInterventionRequestInput[]
    createMany?: TechnicianAssignementCreateManyInterventionRequestInputEnvelope
    set?: TechnicianAssignementWhereUniqueInput | TechnicianAssignementWhereUniqueInput[]
    disconnect?: TechnicianAssignementWhereUniqueInput | TechnicianAssignementWhereUniqueInput[]
    delete?: TechnicianAssignementWhereUniqueInput | TechnicianAssignementWhereUniqueInput[]
    connect?: TechnicianAssignementWhereUniqueInput | TechnicianAssignementWhereUniqueInput[]
    update?: TechnicianAssignementUpdateWithWhereUniqueWithoutInterventionRequestInput | TechnicianAssignementUpdateWithWhereUniqueWithoutInterventionRequestInput[]
    updateMany?: TechnicianAssignementUpdateManyWithWhereWithoutInterventionRequestInput | TechnicianAssignementUpdateManyWithWhereWithoutInterventionRequestInput[]
    deleteMany?: TechnicianAssignementScalarWhereInput | TechnicianAssignementScalarWhereInput[]
  }

  export type InterventionsUpdateManyWithoutInterventionRequestNestedInput = {
    create?: XOR<InterventionsCreateWithoutInterventionRequestInput, InterventionsUncheckedCreateWithoutInterventionRequestInput> | InterventionsCreateWithoutInterventionRequestInput[] | InterventionsUncheckedCreateWithoutInterventionRequestInput[]
    connectOrCreate?: InterventionsCreateOrConnectWithoutInterventionRequestInput | InterventionsCreateOrConnectWithoutInterventionRequestInput[]
    upsert?: InterventionsUpsertWithWhereUniqueWithoutInterventionRequestInput | InterventionsUpsertWithWhereUniqueWithoutInterventionRequestInput[]
    createMany?: InterventionsCreateManyInterventionRequestInputEnvelope
    set?: InterventionsWhereUniqueInput | InterventionsWhereUniqueInput[]
    disconnect?: InterventionsWhereUniqueInput | InterventionsWhereUniqueInput[]
    delete?: InterventionsWhereUniqueInput | InterventionsWhereUniqueInput[]
    connect?: InterventionsWhereUniqueInput | InterventionsWhereUniqueInput[]
    update?: InterventionsUpdateWithWhereUniqueWithoutInterventionRequestInput | InterventionsUpdateWithWhereUniqueWithoutInterventionRequestInput[]
    updateMany?: InterventionsUpdateManyWithWhereWithoutInterventionRequestInput | InterventionsUpdateManyWithWhereWithoutInterventionRequestInput[]
    deleteMany?: InterventionsScalarWhereInput | InterventionsScalarWhereInput[]
  }

  export type ReportUpdateOneRequiredWithoutInterventionRequestsNestedInput = {
    create?: XOR<ReportCreateWithoutInterventionRequestsInput, ReportUncheckedCreateWithoutInterventionRequestsInput>
    connectOrCreate?: ReportCreateOrConnectWithoutInterventionRequestsInput
    upsert?: ReportUpsertWithoutInterventionRequestsInput
    connect?: ReportWhereUniqueInput
    update?: XOR<XOR<ReportUpdateToOneWithWhereWithoutInterventionRequestsInput, ReportUpdateWithoutInterventionRequestsInput>, ReportUncheckedUpdateWithoutInterventionRequestsInput>
  }

  export type UserUpdateOneRequiredWithoutInterventionRequestsNestedInput = {
    create?: XOR<UserCreateWithoutInterventionRequestsInput, UserUncheckedCreateWithoutInterventionRequestsInput>
    connectOrCreate?: UserCreateOrConnectWithoutInterventionRequestsInput
    upsert?: UserUpsertWithoutInterventionRequestsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutInterventionRequestsInput, UserUpdateWithoutInterventionRequestsInput>, UserUncheckedUpdateWithoutInterventionRequestsInput>
  }

  export type TechnicianAssignementUncheckedUpdateManyWithoutInterventionRequestNestedInput = {
    create?: XOR<TechnicianAssignementCreateWithoutInterventionRequestInput, TechnicianAssignementUncheckedCreateWithoutInterventionRequestInput> | TechnicianAssignementCreateWithoutInterventionRequestInput[] | TechnicianAssignementUncheckedCreateWithoutInterventionRequestInput[]
    connectOrCreate?: TechnicianAssignementCreateOrConnectWithoutInterventionRequestInput | TechnicianAssignementCreateOrConnectWithoutInterventionRequestInput[]
    upsert?: TechnicianAssignementUpsertWithWhereUniqueWithoutInterventionRequestInput | TechnicianAssignementUpsertWithWhereUniqueWithoutInterventionRequestInput[]
    createMany?: TechnicianAssignementCreateManyInterventionRequestInputEnvelope
    set?: TechnicianAssignementWhereUniqueInput | TechnicianAssignementWhereUniqueInput[]
    disconnect?: TechnicianAssignementWhereUniqueInput | TechnicianAssignementWhereUniqueInput[]
    delete?: TechnicianAssignementWhereUniqueInput | TechnicianAssignementWhereUniqueInput[]
    connect?: TechnicianAssignementWhereUniqueInput | TechnicianAssignementWhereUniqueInput[]
    update?: TechnicianAssignementUpdateWithWhereUniqueWithoutInterventionRequestInput | TechnicianAssignementUpdateWithWhereUniqueWithoutInterventionRequestInput[]
    updateMany?: TechnicianAssignementUpdateManyWithWhereWithoutInterventionRequestInput | TechnicianAssignementUpdateManyWithWhereWithoutInterventionRequestInput[]
    deleteMany?: TechnicianAssignementScalarWhereInput | TechnicianAssignementScalarWhereInput[]
  }

  export type InterventionsUncheckedUpdateManyWithoutInterventionRequestNestedInput = {
    create?: XOR<InterventionsCreateWithoutInterventionRequestInput, InterventionsUncheckedCreateWithoutInterventionRequestInput> | InterventionsCreateWithoutInterventionRequestInput[] | InterventionsUncheckedCreateWithoutInterventionRequestInput[]
    connectOrCreate?: InterventionsCreateOrConnectWithoutInterventionRequestInput | InterventionsCreateOrConnectWithoutInterventionRequestInput[]
    upsert?: InterventionsUpsertWithWhereUniqueWithoutInterventionRequestInput | InterventionsUpsertWithWhereUniqueWithoutInterventionRequestInput[]
    createMany?: InterventionsCreateManyInterventionRequestInputEnvelope
    set?: InterventionsWhereUniqueInput | InterventionsWhereUniqueInput[]
    disconnect?: InterventionsWhereUniqueInput | InterventionsWhereUniqueInput[]
    delete?: InterventionsWhereUniqueInput | InterventionsWhereUniqueInput[]
    connect?: InterventionsWhereUniqueInput | InterventionsWhereUniqueInput[]
    update?: InterventionsUpdateWithWhereUniqueWithoutInterventionRequestInput | InterventionsUpdateWithWhereUniqueWithoutInterventionRequestInput[]
    updateMany?: InterventionsUpdateManyWithWhereWithoutInterventionRequestInput | InterventionsUpdateManyWithWhereWithoutInterventionRequestInput[]
    deleteMany?: InterventionsScalarWhereInput | InterventionsScalarWhereInput[]
  }

  export type TechnicianCreateNestedOneWithoutTechnicianAssignementsInput = {
    create?: XOR<TechnicianCreateWithoutTechnicianAssignementsInput, TechnicianUncheckedCreateWithoutTechnicianAssignementsInput>
    connectOrCreate?: TechnicianCreateOrConnectWithoutTechnicianAssignementsInput
    connect?: TechnicianWhereUniqueInput
  }

  export type InterventionRequestCreateNestedOneWithoutAssignedToInput = {
    create?: XOR<InterventionRequestCreateWithoutAssignedToInput, InterventionRequestUncheckedCreateWithoutAssignedToInput>
    connectOrCreate?: InterventionRequestCreateOrConnectWithoutAssignedToInput
    connect?: InterventionRequestWhereUniqueInput
  }

  export type AssetCreateNestedOneWithoutAssignementsInput = {
    create?: XOR<AssetCreateWithoutAssignementsInput, AssetUncheckedCreateWithoutAssignementsInput>
    connectOrCreate?: AssetCreateOrConnectWithoutAssignementsInput
    connect?: AssetWhereUniqueInput
  }

  export type TechnicianUpdateOneRequiredWithoutTechnicianAssignementsNestedInput = {
    create?: XOR<TechnicianCreateWithoutTechnicianAssignementsInput, TechnicianUncheckedCreateWithoutTechnicianAssignementsInput>
    connectOrCreate?: TechnicianCreateOrConnectWithoutTechnicianAssignementsInput
    upsert?: TechnicianUpsertWithoutTechnicianAssignementsInput
    connect?: TechnicianWhereUniqueInput
    update?: XOR<XOR<TechnicianUpdateToOneWithWhereWithoutTechnicianAssignementsInput, TechnicianUpdateWithoutTechnicianAssignementsInput>, TechnicianUncheckedUpdateWithoutTechnicianAssignementsInput>
  }

  export type InterventionRequestUpdateOneRequiredWithoutAssignedToNestedInput = {
    create?: XOR<InterventionRequestCreateWithoutAssignedToInput, InterventionRequestUncheckedCreateWithoutAssignedToInput>
    connectOrCreate?: InterventionRequestCreateOrConnectWithoutAssignedToInput
    upsert?: InterventionRequestUpsertWithoutAssignedToInput
    connect?: InterventionRequestWhereUniqueInput
    update?: XOR<XOR<InterventionRequestUpdateToOneWithWhereWithoutAssignedToInput, InterventionRequestUpdateWithoutAssignedToInput>, InterventionRequestUncheckedUpdateWithoutAssignedToInput>
  }

  export type AssetUpdateOneWithoutAssignementsNestedInput = {
    create?: XOR<AssetCreateWithoutAssignementsInput, AssetUncheckedCreateWithoutAssignementsInput>
    connectOrCreate?: AssetCreateOrConnectWithoutAssignementsInput
    upsert?: AssetUpsertWithoutAssignementsInput
    disconnect?: AssetWhereInput | boolean
    delete?: AssetWhereInput | boolean
    connect?: AssetWhereUniqueInput
    update?: XOR<XOR<AssetUpdateToOneWithWhereWithoutAssignementsInput, AssetUpdateWithoutAssignementsInput>, AssetUncheckedUpdateWithoutAssignementsInput>
  }

  export type InterventionRequestCreateNestedOneWithoutInterventionsInput = {
    create?: XOR<InterventionRequestCreateWithoutInterventionsInput, InterventionRequestUncheckedCreateWithoutInterventionsInput>
    connectOrCreate?: InterventionRequestCreateOrConnectWithoutInterventionsInput
    connect?: InterventionRequestWhereUniqueInput
  }

  export type TechnicianCreateNestedOneWithoutInterventionsInput = {
    create?: XOR<TechnicianCreateWithoutInterventionsInput, TechnicianUncheckedCreateWithoutInterventionsInput>
    connectOrCreate?: TechnicianCreateOrConnectWithoutInterventionsInput
    connect?: TechnicianWhereUniqueInput
  }

  export type InterventionRequestUpdateOneRequiredWithoutInterventionsNestedInput = {
    create?: XOR<InterventionRequestCreateWithoutInterventionsInput, InterventionRequestUncheckedCreateWithoutInterventionsInput>
    connectOrCreate?: InterventionRequestCreateOrConnectWithoutInterventionsInput
    upsert?: InterventionRequestUpsertWithoutInterventionsInput
    connect?: InterventionRequestWhereUniqueInput
    update?: XOR<XOR<InterventionRequestUpdateToOneWithWhereWithoutInterventionsInput, InterventionRequestUpdateWithoutInterventionsInput>, InterventionRequestUncheckedUpdateWithoutInterventionsInput>
  }

  export type TechnicianUpdateOneRequiredWithoutInterventionsNestedInput = {
    create?: XOR<TechnicianCreateWithoutInterventionsInput, TechnicianUncheckedCreateWithoutInterventionsInput>
    connectOrCreate?: TechnicianCreateOrConnectWithoutInterventionsInput
    upsert?: TechnicianUpsertWithoutInterventionsInput
    connect?: TechnicianWhereUniqueInput
    update?: XOR<XOR<TechnicianUpdateToOneWithWhereWithoutInterventionsInput, TechnicianUpdateWithoutInterventionsInput>, TechnicianUncheckedUpdateWithoutInterventionsInput>
  }

  export type UserCreateNestedOneWithoutReportsInput = {
    create?: XOR<UserCreateWithoutReportsInput, UserUncheckedCreateWithoutReportsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReportsInput
    connect?: UserWhereUniqueInput
  }

  export type AssetCreateNestedOneWithoutReportsInput = {
    create?: XOR<AssetCreateWithoutReportsInput, AssetUncheckedCreateWithoutReportsInput>
    connectOrCreate?: AssetCreateOrConnectWithoutReportsInput
    connect?: AssetWhereUniqueInput
  }

  export type CategoryCreateNestedOneWithoutReportInput = {
    create?: XOR<CategoryCreateWithoutReportInput, CategoryUncheckedCreateWithoutReportInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutReportInput
    connect?: CategoryWhereUniqueInput
  }

  export type InterventionRequestCreateNestedManyWithoutReportInput = {
    create?: XOR<InterventionRequestCreateWithoutReportInput, InterventionRequestUncheckedCreateWithoutReportInput> | InterventionRequestCreateWithoutReportInput[] | InterventionRequestUncheckedCreateWithoutReportInput[]
    connectOrCreate?: InterventionRequestCreateOrConnectWithoutReportInput | InterventionRequestCreateOrConnectWithoutReportInput[]
    createMany?: InterventionRequestCreateManyReportInputEnvelope
    connect?: InterventionRequestWhereUniqueInput | InterventionRequestWhereUniqueInput[]
  }

  export type InterventionRequestUncheckedCreateNestedManyWithoutReportInput = {
    create?: XOR<InterventionRequestCreateWithoutReportInput, InterventionRequestUncheckedCreateWithoutReportInput> | InterventionRequestCreateWithoutReportInput[] | InterventionRequestUncheckedCreateWithoutReportInput[]
    connectOrCreate?: InterventionRequestCreateOrConnectWithoutReportInput | InterventionRequestCreateOrConnectWithoutReportInput[]
    createMany?: InterventionRequestCreateManyReportInputEnvelope
    connect?: InterventionRequestWhereUniqueInput | InterventionRequestWhereUniqueInput[]
  }

  export type EnumOperationTypeFieldUpdateOperationsInput = {
    set?: $Enums.OperationType
  }

  export type EnumReportStatusFieldUpdateOperationsInput = {
    set?: $Enums.ReportStatus
  }

  export type EnumPriorityFieldUpdateOperationsInput = {
    set?: $Enums.Priority
  }

  export type UserUpdateOneRequiredWithoutReportsNestedInput = {
    create?: XOR<UserCreateWithoutReportsInput, UserUncheckedCreateWithoutReportsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReportsInput
    upsert?: UserUpsertWithoutReportsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutReportsInput, UserUpdateWithoutReportsInput>, UserUncheckedUpdateWithoutReportsInput>
  }

  export type AssetUpdateOneWithoutReportsNestedInput = {
    create?: XOR<AssetCreateWithoutReportsInput, AssetUncheckedCreateWithoutReportsInput>
    connectOrCreate?: AssetCreateOrConnectWithoutReportsInput
    upsert?: AssetUpsertWithoutReportsInput
    disconnect?: AssetWhereInput | boolean
    delete?: AssetWhereInput | boolean
    connect?: AssetWhereUniqueInput
    update?: XOR<XOR<AssetUpdateToOneWithWhereWithoutReportsInput, AssetUpdateWithoutReportsInput>, AssetUncheckedUpdateWithoutReportsInput>
  }

  export type CategoryUpdateOneWithoutReportNestedInput = {
    create?: XOR<CategoryCreateWithoutReportInput, CategoryUncheckedCreateWithoutReportInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutReportInput
    upsert?: CategoryUpsertWithoutReportInput
    disconnect?: CategoryWhereInput | boolean
    delete?: CategoryWhereInput | boolean
    connect?: CategoryWhereUniqueInput
    update?: XOR<XOR<CategoryUpdateToOneWithWhereWithoutReportInput, CategoryUpdateWithoutReportInput>, CategoryUncheckedUpdateWithoutReportInput>
  }

  export type InterventionRequestUpdateManyWithoutReportNestedInput = {
    create?: XOR<InterventionRequestCreateWithoutReportInput, InterventionRequestUncheckedCreateWithoutReportInput> | InterventionRequestCreateWithoutReportInput[] | InterventionRequestUncheckedCreateWithoutReportInput[]
    connectOrCreate?: InterventionRequestCreateOrConnectWithoutReportInput | InterventionRequestCreateOrConnectWithoutReportInput[]
    upsert?: InterventionRequestUpsertWithWhereUniqueWithoutReportInput | InterventionRequestUpsertWithWhereUniqueWithoutReportInput[]
    createMany?: InterventionRequestCreateManyReportInputEnvelope
    set?: InterventionRequestWhereUniqueInput | InterventionRequestWhereUniqueInput[]
    disconnect?: InterventionRequestWhereUniqueInput | InterventionRequestWhereUniqueInput[]
    delete?: InterventionRequestWhereUniqueInput | InterventionRequestWhereUniqueInput[]
    connect?: InterventionRequestWhereUniqueInput | InterventionRequestWhereUniqueInput[]
    update?: InterventionRequestUpdateWithWhereUniqueWithoutReportInput | InterventionRequestUpdateWithWhereUniqueWithoutReportInput[]
    updateMany?: InterventionRequestUpdateManyWithWhereWithoutReportInput | InterventionRequestUpdateManyWithWhereWithoutReportInput[]
    deleteMany?: InterventionRequestScalarWhereInput | InterventionRequestScalarWhereInput[]
  }

  export type InterventionRequestUncheckedUpdateManyWithoutReportNestedInput = {
    create?: XOR<InterventionRequestCreateWithoutReportInput, InterventionRequestUncheckedCreateWithoutReportInput> | InterventionRequestCreateWithoutReportInput[] | InterventionRequestUncheckedCreateWithoutReportInput[]
    connectOrCreate?: InterventionRequestCreateOrConnectWithoutReportInput | InterventionRequestCreateOrConnectWithoutReportInput[]
    upsert?: InterventionRequestUpsertWithWhereUniqueWithoutReportInput | InterventionRequestUpsertWithWhereUniqueWithoutReportInput[]
    createMany?: InterventionRequestCreateManyReportInputEnvelope
    set?: InterventionRequestWhereUniqueInput | InterventionRequestWhereUniqueInput[]
    disconnect?: InterventionRequestWhereUniqueInput | InterventionRequestWhereUniqueInput[]
    delete?: InterventionRequestWhereUniqueInput | InterventionRequestWhereUniqueInput[]
    connect?: InterventionRequestWhereUniqueInput | InterventionRequestWhereUniqueInput[]
    update?: InterventionRequestUpdateWithWhereUniqueWithoutReportInput | InterventionRequestUpdateWithWhereUniqueWithoutReportInput[]
    updateMany?: InterventionRequestUpdateManyWithWhereWithoutReportInput | InterventionRequestUpdateManyWithWhereWithoutReportInput[]
    deleteMany?: InterventionRequestScalarWhereInput | InterventionRequestScalarWhereInput[]
  }

  export type AssetCreateNestedOneWithoutSchedulesInput = {
    create?: XOR<AssetCreateWithoutSchedulesInput, AssetUncheckedCreateWithoutSchedulesInput>
    connectOrCreate?: AssetCreateOrConnectWithoutSchedulesInput
    connect?: AssetWhereUniqueInput
  }

  export type CategoryCreateNestedOneWithoutSchedulesInput = {
    create?: XOR<CategoryCreateWithoutSchedulesInput, CategoryUncheckedCreateWithoutSchedulesInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutSchedulesInput
    connect?: CategoryWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCreatedSchedulesInput = {
    create?: XOR<UserCreateWithoutCreatedSchedulesInput, UserUncheckedCreateWithoutCreatedSchedulesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedSchedulesInput
    connect?: UserWhereUniqueInput
  }

  export type AssetUpdateOneWithoutSchedulesNestedInput = {
    create?: XOR<AssetCreateWithoutSchedulesInput, AssetUncheckedCreateWithoutSchedulesInput>
    connectOrCreate?: AssetCreateOrConnectWithoutSchedulesInput
    upsert?: AssetUpsertWithoutSchedulesInput
    disconnect?: AssetWhereInput | boolean
    delete?: AssetWhereInput | boolean
    connect?: AssetWhereUniqueInput
    update?: XOR<XOR<AssetUpdateToOneWithWhereWithoutSchedulesInput, AssetUpdateWithoutSchedulesInput>, AssetUncheckedUpdateWithoutSchedulesInput>
  }

  export type CategoryUpdateOneWithoutSchedulesNestedInput = {
    create?: XOR<CategoryCreateWithoutSchedulesInput, CategoryUncheckedCreateWithoutSchedulesInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutSchedulesInput
    upsert?: CategoryUpsertWithoutSchedulesInput
    disconnect?: CategoryWhereInput | boolean
    delete?: CategoryWhereInput | boolean
    connect?: CategoryWhereUniqueInput
    update?: XOR<XOR<CategoryUpdateToOneWithWhereWithoutSchedulesInput, CategoryUpdateWithoutSchedulesInput>, CategoryUncheckedUpdateWithoutSchedulesInput>
  }

  export type UserUpdateOneRequiredWithoutCreatedSchedulesNestedInput = {
    create?: XOR<UserCreateWithoutCreatedSchedulesInput, UserUncheckedCreateWithoutCreatedSchedulesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedSchedulesInput
    upsert?: UserUpsertWithoutCreatedSchedulesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedSchedulesInput, UserUpdateWithoutCreatedSchedulesInput>, UserUncheckedUpdateWithoutCreatedSchedulesInput>
  }

  export type TechnicianCreateNestedOneWithoutUserInput = {
    create?: XOR<TechnicianCreateWithoutUserInput, TechnicianUncheckedCreateWithoutUserInput>
    connectOrCreate?: TechnicianCreateOrConnectWithoutUserInput
    connect?: TechnicianWhereUniqueInput
  }

  export type NotificationCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type ReportCreateNestedManyWithoutReporterInput = {
    create?: XOR<ReportCreateWithoutReporterInput, ReportUncheckedCreateWithoutReporterInput> | ReportCreateWithoutReporterInput[] | ReportUncheckedCreateWithoutReporterInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutReporterInput | ReportCreateOrConnectWithoutReporterInput[]
    createMany?: ReportCreateManyReporterInputEnvelope
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
  }

  export type InterventionRequestCreateNestedManyWithoutCreatorInput = {
    create?: XOR<InterventionRequestCreateWithoutCreatorInput, InterventionRequestUncheckedCreateWithoutCreatorInput> | InterventionRequestCreateWithoutCreatorInput[] | InterventionRequestUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: InterventionRequestCreateOrConnectWithoutCreatorInput | InterventionRequestCreateOrConnectWithoutCreatorInput[]
    createMany?: InterventionRequestCreateManyCreatorInputEnvelope
    connect?: InterventionRequestWhereUniqueInput | InterventionRequestWhereUniqueInput[]
  }

  export type ScheduleCreateNestedManyWithoutSchedulerInput = {
    create?: XOR<ScheduleCreateWithoutSchedulerInput, ScheduleUncheckedCreateWithoutSchedulerInput> | ScheduleCreateWithoutSchedulerInput[] | ScheduleUncheckedCreateWithoutSchedulerInput[]
    connectOrCreate?: ScheduleCreateOrConnectWithoutSchedulerInput | ScheduleCreateOrConnectWithoutSchedulerInput[]
    createMany?: ScheduleCreateManySchedulerInputEnvelope
    connect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
  }

  export type TechnicianUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<TechnicianCreateWithoutUserInput, TechnicianUncheckedCreateWithoutUserInput>
    connectOrCreate?: TechnicianCreateOrConnectWithoutUserInput
    connect?: TechnicianWhereUniqueInput
  }

  export type NotificationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type ReportUncheckedCreateNestedManyWithoutReporterInput = {
    create?: XOR<ReportCreateWithoutReporterInput, ReportUncheckedCreateWithoutReporterInput> | ReportCreateWithoutReporterInput[] | ReportUncheckedCreateWithoutReporterInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutReporterInput | ReportCreateOrConnectWithoutReporterInput[]
    createMany?: ReportCreateManyReporterInputEnvelope
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
  }

  export type InterventionRequestUncheckedCreateNestedManyWithoutCreatorInput = {
    create?: XOR<InterventionRequestCreateWithoutCreatorInput, InterventionRequestUncheckedCreateWithoutCreatorInput> | InterventionRequestCreateWithoutCreatorInput[] | InterventionRequestUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: InterventionRequestCreateOrConnectWithoutCreatorInput | InterventionRequestCreateOrConnectWithoutCreatorInput[]
    createMany?: InterventionRequestCreateManyCreatorInputEnvelope
    connect?: InterventionRequestWhereUniqueInput | InterventionRequestWhereUniqueInput[]
  }

  export type ScheduleUncheckedCreateNestedManyWithoutSchedulerInput = {
    create?: XOR<ScheduleCreateWithoutSchedulerInput, ScheduleUncheckedCreateWithoutSchedulerInput> | ScheduleCreateWithoutSchedulerInput[] | ScheduleUncheckedCreateWithoutSchedulerInput[]
    connectOrCreate?: ScheduleCreateOrConnectWithoutSchedulerInput | ScheduleCreateOrConnectWithoutSchedulerInput[]
    createMany?: ScheduleCreateManySchedulerInputEnvelope
    connect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type EnumApprovalStatusFieldUpdateOperationsInput = {
    set?: $Enums.ApprovalStatus
  }

  export type TechnicianUpdateOneWithoutUserNestedInput = {
    create?: XOR<TechnicianCreateWithoutUserInput, TechnicianUncheckedCreateWithoutUserInput>
    connectOrCreate?: TechnicianCreateOrConnectWithoutUserInput
    upsert?: TechnicianUpsertWithoutUserInput
    disconnect?: TechnicianWhereInput | boolean
    delete?: TechnicianWhereInput | boolean
    connect?: TechnicianWhereUniqueInput
    update?: XOR<XOR<TechnicianUpdateToOneWithWhereWithoutUserInput, TechnicianUpdateWithoutUserInput>, TechnicianUncheckedUpdateWithoutUserInput>
  }

  export type NotificationUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUserInput | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUserInput | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUserInput | NotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type ReportUpdateManyWithoutReporterNestedInput = {
    create?: XOR<ReportCreateWithoutReporterInput, ReportUncheckedCreateWithoutReporterInput> | ReportCreateWithoutReporterInput[] | ReportUncheckedCreateWithoutReporterInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutReporterInput | ReportCreateOrConnectWithoutReporterInput[]
    upsert?: ReportUpsertWithWhereUniqueWithoutReporterInput | ReportUpsertWithWhereUniqueWithoutReporterInput[]
    createMany?: ReportCreateManyReporterInputEnvelope
    set?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    disconnect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    delete?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    update?: ReportUpdateWithWhereUniqueWithoutReporterInput | ReportUpdateWithWhereUniqueWithoutReporterInput[]
    updateMany?: ReportUpdateManyWithWhereWithoutReporterInput | ReportUpdateManyWithWhereWithoutReporterInput[]
    deleteMany?: ReportScalarWhereInput | ReportScalarWhereInput[]
  }

  export type InterventionRequestUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<InterventionRequestCreateWithoutCreatorInput, InterventionRequestUncheckedCreateWithoutCreatorInput> | InterventionRequestCreateWithoutCreatorInput[] | InterventionRequestUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: InterventionRequestCreateOrConnectWithoutCreatorInput | InterventionRequestCreateOrConnectWithoutCreatorInput[]
    upsert?: InterventionRequestUpsertWithWhereUniqueWithoutCreatorInput | InterventionRequestUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: InterventionRequestCreateManyCreatorInputEnvelope
    set?: InterventionRequestWhereUniqueInput | InterventionRequestWhereUniqueInput[]
    disconnect?: InterventionRequestWhereUniqueInput | InterventionRequestWhereUniqueInput[]
    delete?: InterventionRequestWhereUniqueInput | InterventionRequestWhereUniqueInput[]
    connect?: InterventionRequestWhereUniqueInput | InterventionRequestWhereUniqueInput[]
    update?: InterventionRequestUpdateWithWhereUniqueWithoutCreatorInput | InterventionRequestUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: InterventionRequestUpdateManyWithWhereWithoutCreatorInput | InterventionRequestUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: InterventionRequestScalarWhereInput | InterventionRequestScalarWhereInput[]
  }

  export type ScheduleUpdateManyWithoutSchedulerNestedInput = {
    create?: XOR<ScheduleCreateWithoutSchedulerInput, ScheduleUncheckedCreateWithoutSchedulerInput> | ScheduleCreateWithoutSchedulerInput[] | ScheduleUncheckedCreateWithoutSchedulerInput[]
    connectOrCreate?: ScheduleCreateOrConnectWithoutSchedulerInput | ScheduleCreateOrConnectWithoutSchedulerInput[]
    upsert?: ScheduleUpsertWithWhereUniqueWithoutSchedulerInput | ScheduleUpsertWithWhereUniqueWithoutSchedulerInput[]
    createMany?: ScheduleCreateManySchedulerInputEnvelope
    set?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    disconnect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    delete?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    connect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    update?: ScheduleUpdateWithWhereUniqueWithoutSchedulerInput | ScheduleUpdateWithWhereUniqueWithoutSchedulerInput[]
    updateMany?: ScheduleUpdateManyWithWhereWithoutSchedulerInput | ScheduleUpdateManyWithWhereWithoutSchedulerInput[]
    deleteMany?: ScheduleScalarWhereInput | ScheduleScalarWhereInput[]
  }

  export type TechnicianUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<TechnicianCreateWithoutUserInput, TechnicianUncheckedCreateWithoutUserInput>
    connectOrCreate?: TechnicianCreateOrConnectWithoutUserInput
    upsert?: TechnicianUpsertWithoutUserInput
    disconnect?: TechnicianWhereInput | boolean
    delete?: TechnicianWhereInput | boolean
    connect?: TechnicianWhereUniqueInput
    update?: XOR<XOR<TechnicianUpdateToOneWithWhereWithoutUserInput, TechnicianUpdateWithoutUserInput>, TechnicianUncheckedUpdateWithoutUserInput>
  }

  export type NotificationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUserInput | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUserInput | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUserInput | NotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type ReportUncheckedUpdateManyWithoutReporterNestedInput = {
    create?: XOR<ReportCreateWithoutReporterInput, ReportUncheckedCreateWithoutReporterInput> | ReportCreateWithoutReporterInput[] | ReportUncheckedCreateWithoutReporterInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutReporterInput | ReportCreateOrConnectWithoutReporterInput[]
    upsert?: ReportUpsertWithWhereUniqueWithoutReporterInput | ReportUpsertWithWhereUniqueWithoutReporterInput[]
    createMany?: ReportCreateManyReporterInputEnvelope
    set?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    disconnect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    delete?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    update?: ReportUpdateWithWhereUniqueWithoutReporterInput | ReportUpdateWithWhereUniqueWithoutReporterInput[]
    updateMany?: ReportUpdateManyWithWhereWithoutReporterInput | ReportUpdateManyWithWhereWithoutReporterInput[]
    deleteMany?: ReportScalarWhereInput | ReportScalarWhereInput[]
  }

  export type InterventionRequestUncheckedUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<InterventionRequestCreateWithoutCreatorInput, InterventionRequestUncheckedCreateWithoutCreatorInput> | InterventionRequestCreateWithoutCreatorInput[] | InterventionRequestUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: InterventionRequestCreateOrConnectWithoutCreatorInput | InterventionRequestCreateOrConnectWithoutCreatorInput[]
    upsert?: InterventionRequestUpsertWithWhereUniqueWithoutCreatorInput | InterventionRequestUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: InterventionRequestCreateManyCreatorInputEnvelope
    set?: InterventionRequestWhereUniqueInput | InterventionRequestWhereUniqueInput[]
    disconnect?: InterventionRequestWhereUniqueInput | InterventionRequestWhereUniqueInput[]
    delete?: InterventionRequestWhereUniqueInput | InterventionRequestWhereUniqueInput[]
    connect?: InterventionRequestWhereUniqueInput | InterventionRequestWhereUniqueInput[]
    update?: InterventionRequestUpdateWithWhereUniqueWithoutCreatorInput | InterventionRequestUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: InterventionRequestUpdateManyWithWhereWithoutCreatorInput | InterventionRequestUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: InterventionRequestScalarWhereInput | InterventionRequestScalarWhereInput[]
  }

  export type ScheduleUncheckedUpdateManyWithoutSchedulerNestedInput = {
    create?: XOR<ScheduleCreateWithoutSchedulerInput, ScheduleUncheckedCreateWithoutSchedulerInput> | ScheduleCreateWithoutSchedulerInput[] | ScheduleUncheckedCreateWithoutSchedulerInput[]
    connectOrCreate?: ScheduleCreateOrConnectWithoutSchedulerInput | ScheduleCreateOrConnectWithoutSchedulerInput[]
    upsert?: ScheduleUpsertWithWhereUniqueWithoutSchedulerInput | ScheduleUpsertWithWhereUniqueWithoutSchedulerInput[]
    createMany?: ScheduleCreateManySchedulerInputEnvelope
    set?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    disconnect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    delete?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    connect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    update?: ScheduleUpdateWithWhereUniqueWithoutSchedulerInput | ScheduleUpdateWithWhereUniqueWithoutSchedulerInput[]
    updateMany?: ScheduleUpdateManyWithWhereWithoutSchedulerInput | ScheduleUpdateManyWithWhereWithoutSchedulerInput[]
    deleteMany?: ScheduleScalarWhereInput | ScheduleScalarWhereInput[]
  }

  export type TechnicianAvailabilityCreateNestedManyWithoutTechnicianInput = {
    create?: XOR<TechnicianAvailabilityCreateWithoutTechnicianInput, TechnicianAvailabilityUncheckedCreateWithoutTechnicianInput> | TechnicianAvailabilityCreateWithoutTechnicianInput[] | TechnicianAvailabilityUncheckedCreateWithoutTechnicianInput[]
    connectOrCreate?: TechnicianAvailabilityCreateOrConnectWithoutTechnicianInput | TechnicianAvailabilityCreateOrConnectWithoutTechnicianInput[]
    createMany?: TechnicianAvailabilityCreateManyTechnicianInputEnvelope
    connect?: TechnicianAvailabilityWhereUniqueInput | TechnicianAvailabilityWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutTechnicianDataInput = {
    create?: XOR<UserCreateWithoutTechnicianDataInput, UserUncheckedCreateWithoutTechnicianDataInput>
    connectOrCreate?: UserCreateOrConnectWithoutTechnicianDataInput
    connect?: UserWhereUniqueInput
  }

  export type ProfessionCreateNestedOneWithoutTechniciansInput = {
    create?: XOR<ProfessionCreateWithoutTechniciansInput, ProfessionUncheckedCreateWithoutTechniciansInput>
    connectOrCreate?: ProfessionCreateOrConnectWithoutTechniciansInput
    connect?: ProfessionWhereUniqueInput
  }

  export type TechnicianAssignementCreateNestedManyWithoutTechnicianInput = {
    create?: XOR<TechnicianAssignementCreateWithoutTechnicianInput, TechnicianAssignementUncheckedCreateWithoutTechnicianInput> | TechnicianAssignementCreateWithoutTechnicianInput[] | TechnicianAssignementUncheckedCreateWithoutTechnicianInput[]
    connectOrCreate?: TechnicianAssignementCreateOrConnectWithoutTechnicianInput | TechnicianAssignementCreateOrConnectWithoutTechnicianInput[]
    createMany?: TechnicianAssignementCreateManyTechnicianInputEnvelope
    connect?: TechnicianAssignementWhereUniqueInput | TechnicianAssignementWhereUniqueInput[]
  }

  export type InterventionsCreateNestedManyWithoutTechnicianInput = {
    create?: XOR<InterventionsCreateWithoutTechnicianInput, InterventionsUncheckedCreateWithoutTechnicianInput> | InterventionsCreateWithoutTechnicianInput[] | InterventionsUncheckedCreateWithoutTechnicianInput[]
    connectOrCreate?: InterventionsCreateOrConnectWithoutTechnicianInput | InterventionsCreateOrConnectWithoutTechnicianInput[]
    createMany?: InterventionsCreateManyTechnicianInputEnvelope
    connect?: InterventionsWhereUniqueInput | InterventionsWhereUniqueInput[]
  }

  export type TechnicianAvailabilityUncheckedCreateNestedManyWithoutTechnicianInput = {
    create?: XOR<TechnicianAvailabilityCreateWithoutTechnicianInput, TechnicianAvailabilityUncheckedCreateWithoutTechnicianInput> | TechnicianAvailabilityCreateWithoutTechnicianInput[] | TechnicianAvailabilityUncheckedCreateWithoutTechnicianInput[]
    connectOrCreate?: TechnicianAvailabilityCreateOrConnectWithoutTechnicianInput | TechnicianAvailabilityCreateOrConnectWithoutTechnicianInput[]
    createMany?: TechnicianAvailabilityCreateManyTechnicianInputEnvelope
    connect?: TechnicianAvailabilityWhereUniqueInput | TechnicianAvailabilityWhereUniqueInput[]
  }

  export type TechnicianAssignementUncheckedCreateNestedManyWithoutTechnicianInput = {
    create?: XOR<TechnicianAssignementCreateWithoutTechnicianInput, TechnicianAssignementUncheckedCreateWithoutTechnicianInput> | TechnicianAssignementCreateWithoutTechnicianInput[] | TechnicianAssignementUncheckedCreateWithoutTechnicianInput[]
    connectOrCreate?: TechnicianAssignementCreateOrConnectWithoutTechnicianInput | TechnicianAssignementCreateOrConnectWithoutTechnicianInput[]
    createMany?: TechnicianAssignementCreateManyTechnicianInputEnvelope
    connect?: TechnicianAssignementWhereUniqueInput | TechnicianAssignementWhereUniqueInput[]
  }

  export type InterventionsUncheckedCreateNestedManyWithoutTechnicianInput = {
    create?: XOR<InterventionsCreateWithoutTechnicianInput, InterventionsUncheckedCreateWithoutTechnicianInput> | InterventionsCreateWithoutTechnicianInput[] | InterventionsUncheckedCreateWithoutTechnicianInput[]
    connectOrCreate?: InterventionsCreateOrConnectWithoutTechnicianInput | InterventionsCreateOrConnectWithoutTechnicianInput[]
    createMany?: InterventionsCreateManyTechnicianInputEnvelope
    connect?: InterventionsWhereUniqueInput | InterventionsWhereUniqueInput[]
  }

  export type TechnicianAvailabilityUpdateManyWithoutTechnicianNestedInput = {
    create?: XOR<TechnicianAvailabilityCreateWithoutTechnicianInput, TechnicianAvailabilityUncheckedCreateWithoutTechnicianInput> | TechnicianAvailabilityCreateWithoutTechnicianInput[] | TechnicianAvailabilityUncheckedCreateWithoutTechnicianInput[]
    connectOrCreate?: TechnicianAvailabilityCreateOrConnectWithoutTechnicianInput | TechnicianAvailabilityCreateOrConnectWithoutTechnicianInput[]
    upsert?: TechnicianAvailabilityUpsertWithWhereUniqueWithoutTechnicianInput | TechnicianAvailabilityUpsertWithWhereUniqueWithoutTechnicianInput[]
    createMany?: TechnicianAvailabilityCreateManyTechnicianInputEnvelope
    set?: TechnicianAvailabilityWhereUniqueInput | TechnicianAvailabilityWhereUniqueInput[]
    disconnect?: TechnicianAvailabilityWhereUniqueInput | TechnicianAvailabilityWhereUniqueInput[]
    delete?: TechnicianAvailabilityWhereUniqueInput | TechnicianAvailabilityWhereUniqueInput[]
    connect?: TechnicianAvailabilityWhereUniqueInput | TechnicianAvailabilityWhereUniqueInput[]
    update?: TechnicianAvailabilityUpdateWithWhereUniqueWithoutTechnicianInput | TechnicianAvailabilityUpdateWithWhereUniqueWithoutTechnicianInput[]
    updateMany?: TechnicianAvailabilityUpdateManyWithWhereWithoutTechnicianInput | TechnicianAvailabilityUpdateManyWithWhereWithoutTechnicianInput[]
    deleteMany?: TechnicianAvailabilityScalarWhereInput | TechnicianAvailabilityScalarWhereInput[]
  }

  export type UserUpdateOneRequiredWithoutTechnicianDataNestedInput = {
    create?: XOR<UserCreateWithoutTechnicianDataInput, UserUncheckedCreateWithoutTechnicianDataInput>
    connectOrCreate?: UserCreateOrConnectWithoutTechnicianDataInput
    upsert?: UserUpsertWithoutTechnicianDataInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTechnicianDataInput, UserUpdateWithoutTechnicianDataInput>, UserUncheckedUpdateWithoutTechnicianDataInput>
  }

  export type ProfessionUpdateOneWithoutTechniciansNestedInput = {
    create?: XOR<ProfessionCreateWithoutTechniciansInput, ProfessionUncheckedCreateWithoutTechniciansInput>
    connectOrCreate?: ProfessionCreateOrConnectWithoutTechniciansInput
    upsert?: ProfessionUpsertWithoutTechniciansInput
    disconnect?: ProfessionWhereInput | boolean
    delete?: ProfessionWhereInput | boolean
    connect?: ProfessionWhereUniqueInput
    update?: XOR<XOR<ProfessionUpdateToOneWithWhereWithoutTechniciansInput, ProfessionUpdateWithoutTechniciansInput>, ProfessionUncheckedUpdateWithoutTechniciansInput>
  }

  export type TechnicianAssignementUpdateManyWithoutTechnicianNestedInput = {
    create?: XOR<TechnicianAssignementCreateWithoutTechnicianInput, TechnicianAssignementUncheckedCreateWithoutTechnicianInput> | TechnicianAssignementCreateWithoutTechnicianInput[] | TechnicianAssignementUncheckedCreateWithoutTechnicianInput[]
    connectOrCreate?: TechnicianAssignementCreateOrConnectWithoutTechnicianInput | TechnicianAssignementCreateOrConnectWithoutTechnicianInput[]
    upsert?: TechnicianAssignementUpsertWithWhereUniqueWithoutTechnicianInput | TechnicianAssignementUpsertWithWhereUniqueWithoutTechnicianInput[]
    createMany?: TechnicianAssignementCreateManyTechnicianInputEnvelope
    set?: TechnicianAssignementWhereUniqueInput | TechnicianAssignementWhereUniqueInput[]
    disconnect?: TechnicianAssignementWhereUniqueInput | TechnicianAssignementWhereUniqueInput[]
    delete?: TechnicianAssignementWhereUniqueInput | TechnicianAssignementWhereUniqueInput[]
    connect?: TechnicianAssignementWhereUniqueInput | TechnicianAssignementWhereUniqueInput[]
    update?: TechnicianAssignementUpdateWithWhereUniqueWithoutTechnicianInput | TechnicianAssignementUpdateWithWhereUniqueWithoutTechnicianInput[]
    updateMany?: TechnicianAssignementUpdateManyWithWhereWithoutTechnicianInput | TechnicianAssignementUpdateManyWithWhereWithoutTechnicianInput[]
    deleteMany?: TechnicianAssignementScalarWhereInput | TechnicianAssignementScalarWhereInput[]
  }

  export type InterventionsUpdateManyWithoutTechnicianNestedInput = {
    create?: XOR<InterventionsCreateWithoutTechnicianInput, InterventionsUncheckedCreateWithoutTechnicianInput> | InterventionsCreateWithoutTechnicianInput[] | InterventionsUncheckedCreateWithoutTechnicianInput[]
    connectOrCreate?: InterventionsCreateOrConnectWithoutTechnicianInput | InterventionsCreateOrConnectWithoutTechnicianInput[]
    upsert?: InterventionsUpsertWithWhereUniqueWithoutTechnicianInput | InterventionsUpsertWithWhereUniqueWithoutTechnicianInput[]
    createMany?: InterventionsCreateManyTechnicianInputEnvelope
    set?: InterventionsWhereUniqueInput | InterventionsWhereUniqueInput[]
    disconnect?: InterventionsWhereUniqueInput | InterventionsWhereUniqueInput[]
    delete?: InterventionsWhereUniqueInput | InterventionsWhereUniqueInput[]
    connect?: InterventionsWhereUniqueInput | InterventionsWhereUniqueInput[]
    update?: InterventionsUpdateWithWhereUniqueWithoutTechnicianInput | InterventionsUpdateWithWhereUniqueWithoutTechnicianInput[]
    updateMany?: InterventionsUpdateManyWithWhereWithoutTechnicianInput | InterventionsUpdateManyWithWhereWithoutTechnicianInput[]
    deleteMany?: InterventionsScalarWhereInput | InterventionsScalarWhereInput[]
  }

  export type TechnicianAvailabilityUncheckedUpdateManyWithoutTechnicianNestedInput = {
    create?: XOR<TechnicianAvailabilityCreateWithoutTechnicianInput, TechnicianAvailabilityUncheckedCreateWithoutTechnicianInput> | TechnicianAvailabilityCreateWithoutTechnicianInput[] | TechnicianAvailabilityUncheckedCreateWithoutTechnicianInput[]
    connectOrCreate?: TechnicianAvailabilityCreateOrConnectWithoutTechnicianInput | TechnicianAvailabilityCreateOrConnectWithoutTechnicianInput[]
    upsert?: TechnicianAvailabilityUpsertWithWhereUniqueWithoutTechnicianInput | TechnicianAvailabilityUpsertWithWhereUniqueWithoutTechnicianInput[]
    createMany?: TechnicianAvailabilityCreateManyTechnicianInputEnvelope
    set?: TechnicianAvailabilityWhereUniqueInput | TechnicianAvailabilityWhereUniqueInput[]
    disconnect?: TechnicianAvailabilityWhereUniqueInput | TechnicianAvailabilityWhereUniqueInput[]
    delete?: TechnicianAvailabilityWhereUniqueInput | TechnicianAvailabilityWhereUniqueInput[]
    connect?: TechnicianAvailabilityWhereUniqueInput | TechnicianAvailabilityWhereUniqueInput[]
    update?: TechnicianAvailabilityUpdateWithWhereUniqueWithoutTechnicianInput | TechnicianAvailabilityUpdateWithWhereUniqueWithoutTechnicianInput[]
    updateMany?: TechnicianAvailabilityUpdateManyWithWhereWithoutTechnicianInput | TechnicianAvailabilityUpdateManyWithWhereWithoutTechnicianInput[]
    deleteMany?: TechnicianAvailabilityScalarWhereInput | TechnicianAvailabilityScalarWhereInput[]
  }

  export type TechnicianAssignementUncheckedUpdateManyWithoutTechnicianNestedInput = {
    create?: XOR<TechnicianAssignementCreateWithoutTechnicianInput, TechnicianAssignementUncheckedCreateWithoutTechnicianInput> | TechnicianAssignementCreateWithoutTechnicianInput[] | TechnicianAssignementUncheckedCreateWithoutTechnicianInput[]
    connectOrCreate?: TechnicianAssignementCreateOrConnectWithoutTechnicianInput | TechnicianAssignementCreateOrConnectWithoutTechnicianInput[]
    upsert?: TechnicianAssignementUpsertWithWhereUniqueWithoutTechnicianInput | TechnicianAssignementUpsertWithWhereUniqueWithoutTechnicianInput[]
    createMany?: TechnicianAssignementCreateManyTechnicianInputEnvelope
    set?: TechnicianAssignementWhereUniqueInput | TechnicianAssignementWhereUniqueInput[]
    disconnect?: TechnicianAssignementWhereUniqueInput | TechnicianAssignementWhereUniqueInput[]
    delete?: TechnicianAssignementWhereUniqueInput | TechnicianAssignementWhereUniqueInput[]
    connect?: TechnicianAssignementWhereUniqueInput | TechnicianAssignementWhereUniqueInput[]
    update?: TechnicianAssignementUpdateWithWhereUniqueWithoutTechnicianInput | TechnicianAssignementUpdateWithWhereUniqueWithoutTechnicianInput[]
    updateMany?: TechnicianAssignementUpdateManyWithWhereWithoutTechnicianInput | TechnicianAssignementUpdateManyWithWhereWithoutTechnicianInput[]
    deleteMany?: TechnicianAssignementScalarWhereInput | TechnicianAssignementScalarWhereInput[]
  }

  export type InterventionsUncheckedUpdateManyWithoutTechnicianNestedInput = {
    create?: XOR<InterventionsCreateWithoutTechnicianInput, InterventionsUncheckedCreateWithoutTechnicianInput> | InterventionsCreateWithoutTechnicianInput[] | InterventionsUncheckedCreateWithoutTechnicianInput[]
    connectOrCreate?: InterventionsCreateOrConnectWithoutTechnicianInput | InterventionsCreateOrConnectWithoutTechnicianInput[]
    upsert?: InterventionsUpsertWithWhereUniqueWithoutTechnicianInput | InterventionsUpsertWithWhereUniqueWithoutTechnicianInput[]
    createMany?: InterventionsCreateManyTechnicianInputEnvelope
    set?: InterventionsWhereUniqueInput | InterventionsWhereUniqueInput[]
    disconnect?: InterventionsWhereUniqueInput | InterventionsWhereUniqueInput[]
    delete?: InterventionsWhereUniqueInput | InterventionsWhereUniqueInput[]
    connect?: InterventionsWhereUniqueInput | InterventionsWhereUniqueInput[]
    update?: InterventionsUpdateWithWhereUniqueWithoutTechnicianInput | InterventionsUpdateWithWhereUniqueWithoutTechnicianInput[]
    updateMany?: InterventionsUpdateManyWithWhereWithoutTechnicianInput | InterventionsUpdateManyWithWhereWithoutTechnicianInput[]
    deleteMany?: InterventionsScalarWhereInput | InterventionsScalarWhereInput[]
  }

  export type TechnicianCreateNestedManyWithoutProfessionInput = {
    create?: XOR<TechnicianCreateWithoutProfessionInput, TechnicianUncheckedCreateWithoutProfessionInput> | TechnicianCreateWithoutProfessionInput[] | TechnicianUncheckedCreateWithoutProfessionInput[]
    connectOrCreate?: TechnicianCreateOrConnectWithoutProfessionInput | TechnicianCreateOrConnectWithoutProfessionInput[]
    createMany?: TechnicianCreateManyProfessionInputEnvelope
    connect?: TechnicianWhereUniqueInput | TechnicianWhereUniqueInput[]
  }

  export type TechnicianUncheckedCreateNestedManyWithoutProfessionInput = {
    create?: XOR<TechnicianCreateWithoutProfessionInput, TechnicianUncheckedCreateWithoutProfessionInput> | TechnicianCreateWithoutProfessionInput[] | TechnicianUncheckedCreateWithoutProfessionInput[]
    connectOrCreate?: TechnicianCreateOrConnectWithoutProfessionInput | TechnicianCreateOrConnectWithoutProfessionInput[]
    createMany?: TechnicianCreateManyProfessionInputEnvelope
    connect?: TechnicianWhereUniqueInput | TechnicianWhereUniqueInput[]
  }

  export type TechnicianUpdateManyWithoutProfessionNestedInput = {
    create?: XOR<TechnicianCreateWithoutProfessionInput, TechnicianUncheckedCreateWithoutProfessionInput> | TechnicianCreateWithoutProfessionInput[] | TechnicianUncheckedCreateWithoutProfessionInput[]
    connectOrCreate?: TechnicianCreateOrConnectWithoutProfessionInput | TechnicianCreateOrConnectWithoutProfessionInput[]
    upsert?: TechnicianUpsertWithWhereUniqueWithoutProfessionInput | TechnicianUpsertWithWhereUniqueWithoutProfessionInput[]
    createMany?: TechnicianCreateManyProfessionInputEnvelope
    set?: TechnicianWhereUniqueInput | TechnicianWhereUniqueInput[]
    disconnect?: TechnicianWhereUniqueInput | TechnicianWhereUniqueInput[]
    delete?: TechnicianWhereUniqueInput | TechnicianWhereUniqueInput[]
    connect?: TechnicianWhereUniqueInput | TechnicianWhereUniqueInput[]
    update?: TechnicianUpdateWithWhereUniqueWithoutProfessionInput | TechnicianUpdateWithWhereUniqueWithoutProfessionInput[]
    updateMany?: TechnicianUpdateManyWithWhereWithoutProfessionInput | TechnicianUpdateManyWithWhereWithoutProfessionInput[]
    deleteMany?: TechnicianScalarWhereInput | TechnicianScalarWhereInput[]
  }

  export type TechnicianUncheckedUpdateManyWithoutProfessionNestedInput = {
    create?: XOR<TechnicianCreateWithoutProfessionInput, TechnicianUncheckedCreateWithoutProfessionInput> | TechnicianCreateWithoutProfessionInput[] | TechnicianUncheckedCreateWithoutProfessionInput[]
    connectOrCreate?: TechnicianCreateOrConnectWithoutProfessionInput | TechnicianCreateOrConnectWithoutProfessionInput[]
    upsert?: TechnicianUpsertWithWhereUniqueWithoutProfessionInput | TechnicianUpsertWithWhereUniqueWithoutProfessionInput[]
    createMany?: TechnicianCreateManyProfessionInputEnvelope
    set?: TechnicianWhereUniqueInput | TechnicianWhereUniqueInput[]
    disconnect?: TechnicianWhereUniqueInput | TechnicianWhereUniqueInput[]
    delete?: TechnicianWhereUniqueInput | TechnicianWhereUniqueInput[]
    connect?: TechnicianWhereUniqueInput | TechnicianWhereUniqueInput[]
    update?: TechnicianUpdateWithWhereUniqueWithoutProfessionInput | TechnicianUpdateWithWhereUniqueWithoutProfessionInput[]
    updateMany?: TechnicianUpdateManyWithWhereWithoutProfessionInput | TechnicianUpdateManyWithWhereWithoutProfessionInput[]
    deleteMany?: TechnicianScalarWhereInput | TechnicianScalarWhereInput[]
  }

  export type TechnicianCreateNestedOneWithoutAvailabilitiesInput = {
    create?: XOR<TechnicianCreateWithoutAvailabilitiesInput, TechnicianUncheckedCreateWithoutAvailabilitiesInput>
    connectOrCreate?: TechnicianCreateOrConnectWithoutAvailabilitiesInput
    connect?: TechnicianWhereUniqueInput
  }

  export type EnumDayFieldUpdateOperationsInput = {
    set?: $Enums.Day
  }

  export type TechnicianUpdateOneRequiredWithoutAvailabilitiesNestedInput = {
    create?: XOR<TechnicianCreateWithoutAvailabilitiesInput, TechnicianUncheckedCreateWithoutAvailabilitiesInput>
    connectOrCreate?: TechnicianCreateOrConnectWithoutAvailabilitiesInput
    upsert?: TechnicianUpsertWithoutAvailabilitiesInput
    connect?: TechnicianWhereUniqueInput
    update?: XOR<XOR<TechnicianUpdateToOneWithWhereWithoutAvailabilitiesInput, TechnicianUpdateWithoutAvailabilitiesInput>, TechnicianUncheckedUpdateWithoutAvailabilitiesInput>
  }

  export type UserCreateNestedOneWithoutNotificationsInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutNotificationsNestedInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    upsert?: UserUpsertWithoutNotificationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutNotificationsInput, UserUpdateWithoutNotificationsInput>, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumAssetStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.AssetStatus | EnumAssetStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AssetStatus[]
    notIn?: $Enums.AssetStatus[]
    not?: NestedEnumAssetStatusFilter<$PrismaModel> | $Enums.AssetStatus
  }

  export type NestedEnumAssetTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.AssetType | EnumAssetTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AssetType[]
    notIn?: $Enums.AssetType[]
    not?: NestedEnumAssetTypeFilter<$PrismaModel> | $Enums.AssetType
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedEnumAssetStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AssetStatus | EnumAssetStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AssetStatus[]
    notIn?: $Enums.AssetStatus[]
    not?: NestedEnumAssetStatusWithAggregatesFilter<$PrismaModel> | $Enums.AssetStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAssetStatusFilter<$PrismaModel>
    _max?: NestedEnumAssetStatusFilter<$PrismaModel>
  }

  export type NestedEnumAssetTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AssetType | EnumAssetTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AssetType[]
    notIn?: $Enums.AssetType[]
    not?: NestedEnumAssetTypeWithAggregatesFilter<$PrismaModel> | $Enums.AssetType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAssetTypeFilter<$PrismaModel>
    _max?: NestedEnumAssetTypeFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumInterventionRequestStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.InterventionRequestStatus | EnumInterventionRequestStatusFieldRefInput<$PrismaModel>
    in?: $Enums.InterventionRequestStatus[]
    notIn?: $Enums.InterventionRequestStatus[]
    not?: NestedEnumInterventionRequestStatusFilter<$PrismaModel> | $Enums.InterventionRequestStatus
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedEnumInterventionRequestStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.InterventionRequestStatus | EnumInterventionRequestStatusFieldRefInput<$PrismaModel>
    in?: $Enums.InterventionRequestStatus[]
    notIn?: $Enums.InterventionRequestStatus[]
    not?: NestedEnumInterventionRequestStatusWithAggregatesFilter<$PrismaModel> | $Enums.InterventionRequestStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumInterventionRequestStatusFilter<$PrismaModel>
    _max?: NestedEnumInterventionRequestStatusFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumOperationTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.OperationType | EnumOperationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.OperationType[]
    notIn?: $Enums.OperationType[]
    not?: NestedEnumOperationTypeFilter<$PrismaModel> | $Enums.OperationType
  }

  export type NestedEnumReportStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ReportStatus | EnumReportStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ReportStatus[]
    notIn?: $Enums.ReportStatus[]
    not?: NestedEnumReportStatusFilter<$PrismaModel> | $Enums.ReportStatus
  }

  export type NestedEnumPriorityFilter<$PrismaModel = never> = {
    equals?: $Enums.Priority | EnumPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.Priority[]
    notIn?: $Enums.Priority[]
    not?: NestedEnumPriorityFilter<$PrismaModel> | $Enums.Priority
  }

  export type NestedEnumOperationTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.OperationType | EnumOperationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.OperationType[]
    notIn?: $Enums.OperationType[]
    not?: NestedEnumOperationTypeWithAggregatesFilter<$PrismaModel> | $Enums.OperationType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumOperationTypeFilter<$PrismaModel>
    _max?: NestedEnumOperationTypeFilter<$PrismaModel>
  }

  export type NestedEnumReportStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ReportStatus | EnumReportStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ReportStatus[]
    notIn?: $Enums.ReportStatus[]
    not?: NestedEnumReportStatusWithAggregatesFilter<$PrismaModel> | $Enums.ReportStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumReportStatusFilter<$PrismaModel>
    _max?: NestedEnumReportStatusFilter<$PrismaModel>
  }

  export type NestedEnumPriorityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Priority | EnumPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.Priority[]
    notIn?: $Enums.Priority[]
    not?: NestedEnumPriorityWithAggregatesFilter<$PrismaModel> | $Enums.Priority
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPriorityFilter<$PrismaModel>
    _max?: NestedEnumPriorityFilter<$PrismaModel>
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[]
    notIn?: $Enums.Role[]
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedEnumApprovalStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ApprovalStatus | EnumApprovalStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ApprovalStatus[]
    notIn?: $Enums.ApprovalStatus[]
    not?: NestedEnumApprovalStatusFilter<$PrismaModel> | $Enums.ApprovalStatus
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[]
    notIn?: $Enums.Role[]
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type NestedEnumApprovalStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ApprovalStatus | EnumApprovalStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ApprovalStatus[]
    notIn?: $Enums.ApprovalStatus[]
    not?: NestedEnumApprovalStatusWithAggregatesFilter<$PrismaModel> | $Enums.ApprovalStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumApprovalStatusFilter<$PrismaModel>
    _max?: NestedEnumApprovalStatusFilter<$PrismaModel>
  }

  export type NestedEnumDayFilter<$PrismaModel = never> = {
    equals?: $Enums.Day | EnumDayFieldRefInput<$PrismaModel>
    in?: $Enums.Day[]
    notIn?: $Enums.Day[]
    not?: NestedEnumDayFilter<$PrismaModel> | $Enums.Day
  }

  export type NestedEnumDayWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Day | EnumDayFieldRefInput<$PrismaModel>
    in?: $Enums.Day[]
    notIn?: $Enums.Day[]
    not?: NestedEnumDayWithAggregatesFilter<$PrismaModel> | $Enums.Day
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDayFilter<$PrismaModel>
    _max?: NestedEnumDayFilter<$PrismaModel>
  }

  export type AssetCreateWithoutLocationInput = {
    name: string
    inventoryCode: string
    status: $Enums.AssetStatus
    type: $Enums.AssetType
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    subAssets?: AssetCreateNestedManyWithoutLocationInput
    reports?: ReportCreateNestedManyWithoutAssetInput
    assignements?: TechnicianAssignementCreateNestedManyWithoutLocationInput
    category?: CategoryCreateNestedOneWithoutAssetsInput
    schedules?: ScheduleCreateNestedManyWithoutAssetInput
  }

  export type AssetUncheckedCreateWithoutLocationInput = {
    id?: number
    categoryId?: number | null
    name: string
    inventoryCode: string
    status: $Enums.AssetStatus
    type: $Enums.AssetType
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    subAssets?: AssetUncheckedCreateNestedManyWithoutLocationInput
    reports?: ReportUncheckedCreateNestedManyWithoutAssetInput
    assignements?: TechnicianAssignementUncheckedCreateNestedManyWithoutLocationInput
    schedules?: ScheduleUncheckedCreateNestedManyWithoutAssetInput
  }

  export type AssetCreateOrConnectWithoutLocationInput = {
    where: AssetWhereUniqueInput
    create: XOR<AssetCreateWithoutLocationInput, AssetUncheckedCreateWithoutLocationInput>
  }

  export type AssetCreateManyLocationInputEnvelope = {
    data: AssetCreateManyLocationInput | AssetCreateManyLocationInput[]
  }

  export type ReportCreateWithoutAssetInput = {
    description?: string | null
    imageUrl?: string | null
    type: $Enums.OperationType
    status: $Enums.ReportStatus
    priority: $Enums.Priority
    createdAt?: Date | string
    updatedAt?: Date | string
    reporter: UserCreateNestedOneWithoutReportsInput
    category?: CategoryCreateNestedOneWithoutReportInput
    interventionRequests?: InterventionRequestCreateNestedManyWithoutReportInput
  }

  export type ReportUncheckedCreateWithoutAssetInput = {
    id?: number
    reporterId: number
    categoryId?: number | null
    description?: string | null
    imageUrl?: string | null
    type: $Enums.OperationType
    status: $Enums.ReportStatus
    priority: $Enums.Priority
    createdAt?: Date | string
    updatedAt?: Date | string
    interventionRequests?: InterventionRequestUncheckedCreateNestedManyWithoutReportInput
  }

  export type ReportCreateOrConnectWithoutAssetInput = {
    where: ReportWhereUniqueInput
    create: XOR<ReportCreateWithoutAssetInput, ReportUncheckedCreateWithoutAssetInput>
  }

  export type ReportCreateManyAssetInputEnvelope = {
    data: ReportCreateManyAssetInput | ReportCreateManyAssetInput[]
  }

  export type TechnicianAssignementCreateWithoutLocationInput = {
    completed?: boolean
    details?: string | null
    createdAt?: Date | string
    technician: TechnicianCreateNestedOneWithoutTechnicianAssignementsInput
    interventionRequest: InterventionRequestCreateNestedOneWithoutAssignedToInput
  }

  export type TechnicianAssignementUncheckedCreateWithoutLocationInput = {
    id?: number
    technicianId: number
    interventionRequestId: number
    completed?: boolean
    details?: string | null
    createdAt?: Date | string
  }

  export type TechnicianAssignementCreateOrConnectWithoutLocationInput = {
    where: TechnicianAssignementWhereUniqueInput
    create: XOR<TechnicianAssignementCreateWithoutLocationInput, TechnicianAssignementUncheckedCreateWithoutLocationInput>
  }

  export type TechnicianAssignementCreateManyLocationInputEnvelope = {
    data: TechnicianAssignementCreateManyLocationInput | TechnicianAssignementCreateManyLocationInput[]
  }

  export type AssetCreateWithoutSubAssetsInput = {
    name: string
    inventoryCode: string
    status: $Enums.AssetStatus
    type: $Enums.AssetType
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    reports?: ReportCreateNestedManyWithoutAssetInput
    assignements?: TechnicianAssignementCreateNestedManyWithoutLocationInput
    location?: AssetCreateNestedOneWithoutSubAssetsInput
    category?: CategoryCreateNestedOneWithoutAssetsInput
    schedules?: ScheduleCreateNestedManyWithoutAssetInput
  }

  export type AssetUncheckedCreateWithoutSubAssetsInput = {
    id?: number
    locationId?: number | null
    categoryId?: number | null
    name: string
    inventoryCode: string
    status: $Enums.AssetStatus
    type: $Enums.AssetType
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    reports?: ReportUncheckedCreateNestedManyWithoutAssetInput
    assignements?: TechnicianAssignementUncheckedCreateNestedManyWithoutLocationInput
    schedules?: ScheduleUncheckedCreateNestedManyWithoutAssetInput
  }

  export type AssetCreateOrConnectWithoutSubAssetsInput = {
    where: AssetWhereUniqueInput
    create: XOR<AssetCreateWithoutSubAssetsInput, AssetUncheckedCreateWithoutSubAssetsInput>
  }

  export type CategoryCreateWithoutAssetsInput = {
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    children?: CategoryCreateNestedManyWithoutParentInput
    parent?: CategoryCreateNestedOneWithoutChildrenInput
    Report?: ReportCreateNestedManyWithoutCategoryInput
    ancestors?: CategoryClosureCreateNestedManyWithoutAncestorInput
    descendants?: CategoryClosureCreateNestedManyWithoutDescendantInput
    schedules?: ScheduleCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateWithoutAssetsInput = {
    id?: number
    name: string
    description?: string | null
    parentId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    children?: CategoryUncheckedCreateNestedManyWithoutParentInput
    Report?: ReportUncheckedCreateNestedManyWithoutCategoryInput
    ancestors?: CategoryClosureUncheckedCreateNestedManyWithoutAncestorInput
    descendants?: CategoryClosureUncheckedCreateNestedManyWithoutDescendantInput
    schedules?: ScheduleUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryCreateOrConnectWithoutAssetsInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutAssetsInput, CategoryUncheckedCreateWithoutAssetsInput>
  }

  export type ScheduleCreateWithoutAssetInput = {
    description?: string | null
    lastMaintenanceDate: string
    frequency: number
    priority: $Enums.Priority
    createdAt?: Date | string
    updatedAt?: Date | string
    category?: CategoryCreateNestedOneWithoutSchedulesInput
    scheduler: UserCreateNestedOneWithoutCreatedSchedulesInput
  }

  export type ScheduleUncheckedCreateWithoutAssetInput = {
    id?: number
    schedulerId: number
    categoryId?: number | null
    description?: string | null
    lastMaintenanceDate: string
    frequency: number
    priority: $Enums.Priority
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ScheduleCreateOrConnectWithoutAssetInput = {
    where: ScheduleWhereUniqueInput
    create: XOR<ScheduleCreateWithoutAssetInput, ScheduleUncheckedCreateWithoutAssetInput>
  }

  export type ScheduleCreateManyAssetInputEnvelope = {
    data: ScheduleCreateManyAssetInput | ScheduleCreateManyAssetInput[]
  }

  export type AssetUpsertWithWhereUniqueWithoutLocationInput = {
    where: AssetWhereUniqueInput
    update: XOR<AssetUpdateWithoutLocationInput, AssetUncheckedUpdateWithoutLocationInput>
    create: XOR<AssetCreateWithoutLocationInput, AssetUncheckedCreateWithoutLocationInput>
  }

  export type AssetUpdateWithWhereUniqueWithoutLocationInput = {
    where: AssetWhereUniqueInput
    data: XOR<AssetUpdateWithoutLocationInput, AssetUncheckedUpdateWithoutLocationInput>
  }

  export type AssetUpdateManyWithWhereWithoutLocationInput = {
    where: AssetScalarWhereInput
    data: XOR<AssetUpdateManyMutationInput, AssetUncheckedUpdateManyWithoutLocationInput>
  }

  export type AssetScalarWhereInput = {
    AND?: AssetScalarWhereInput | AssetScalarWhereInput[]
    OR?: AssetScalarWhereInput[]
    NOT?: AssetScalarWhereInput | AssetScalarWhereInput[]
    id?: IntFilter<"Asset"> | number
    locationId?: IntNullableFilter<"Asset"> | number | null
    categoryId?: IntNullableFilter<"Asset"> | number | null
    name?: StringFilter<"Asset"> | string
    inventoryCode?: StringFilter<"Asset"> | string
    status?: EnumAssetStatusFilter<"Asset"> | $Enums.AssetStatus
    type?: EnumAssetTypeFilter<"Asset"> | $Enums.AssetType
    image?: StringNullableFilter<"Asset"> | string | null
    createdAt?: DateTimeFilter<"Asset"> | Date | string
    updatedAt?: DateTimeFilter<"Asset"> | Date | string
  }

  export type ReportUpsertWithWhereUniqueWithoutAssetInput = {
    where: ReportWhereUniqueInput
    update: XOR<ReportUpdateWithoutAssetInput, ReportUncheckedUpdateWithoutAssetInput>
    create: XOR<ReportCreateWithoutAssetInput, ReportUncheckedCreateWithoutAssetInput>
  }

  export type ReportUpdateWithWhereUniqueWithoutAssetInput = {
    where: ReportWhereUniqueInput
    data: XOR<ReportUpdateWithoutAssetInput, ReportUncheckedUpdateWithoutAssetInput>
  }

  export type ReportUpdateManyWithWhereWithoutAssetInput = {
    where: ReportScalarWhereInput
    data: XOR<ReportUpdateManyMutationInput, ReportUncheckedUpdateManyWithoutAssetInput>
  }

  export type ReportScalarWhereInput = {
    AND?: ReportScalarWhereInput | ReportScalarWhereInput[]
    OR?: ReportScalarWhereInput[]
    NOT?: ReportScalarWhereInput | ReportScalarWhereInput[]
    id?: IntFilter<"Report"> | number
    reporterId?: IntFilter<"Report"> | number
    assetId?: IntNullableFilter<"Report"> | number | null
    categoryId?: IntNullableFilter<"Report"> | number | null
    description?: StringNullableFilter<"Report"> | string | null
    imageUrl?: StringNullableFilter<"Report"> | string | null
    type?: EnumOperationTypeFilter<"Report"> | $Enums.OperationType
    status?: EnumReportStatusFilter<"Report"> | $Enums.ReportStatus
    priority?: EnumPriorityFilter<"Report"> | $Enums.Priority
    createdAt?: DateTimeFilter<"Report"> | Date | string
    updatedAt?: DateTimeFilter<"Report"> | Date | string
  }

  export type TechnicianAssignementUpsertWithWhereUniqueWithoutLocationInput = {
    where: TechnicianAssignementWhereUniqueInput
    update: XOR<TechnicianAssignementUpdateWithoutLocationInput, TechnicianAssignementUncheckedUpdateWithoutLocationInput>
    create: XOR<TechnicianAssignementCreateWithoutLocationInput, TechnicianAssignementUncheckedCreateWithoutLocationInput>
  }

  export type TechnicianAssignementUpdateWithWhereUniqueWithoutLocationInput = {
    where: TechnicianAssignementWhereUniqueInput
    data: XOR<TechnicianAssignementUpdateWithoutLocationInput, TechnicianAssignementUncheckedUpdateWithoutLocationInput>
  }

  export type TechnicianAssignementUpdateManyWithWhereWithoutLocationInput = {
    where: TechnicianAssignementScalarWhereInput
    data: XOR<TechnicianAssignementUpdateManyMutationInput, TechnicianAssignementUncheckedUpdateManyWithoutLocationInput>
  }

  export type TechnicianAssignementScalarWhereInput = {
    AND?: TechnicianAssignementScalarWhereInput | TechnicianAssignementScalarWhereInput[]
    OR?: TechnicianAssignementScalarWhereInput[]
    NOT?: TechnicianAssignementScalarWhereInput | TechnicianAssignementScalarWhereInput[]
    id?: IntFilter<"TechnicianAssignement"> | number
    technicianId?: IntFilter<"TechnicianAssignement"> | number
    interventionRequestId?: IntFilter<"TechnicianAssignement"> | number
    locationId?: IntNullableFilter<"TechnicianAssignement"> | number | null
    completed?: BoolFilter<"TechnicianAssignement"> | boolean
    details?: StringNullableFilter<"TechnicianAssignement"> | string | null
    createdAt?: DateTimeFilter<"TechnicianAssignement"> | Date | string
  }

  export type AssetUpsertWithoutSubAssetsInput = {
    update: XOR<AssetUpdateWithoutSubAssetsInput, AssetUncheckedUpdateWithoutSubAssetsInput>
    create: XOR<AssetCreateWithoutSubAssetsInput, AssetUncheckedCreateWithoutSubAssetsInput>
    where?: AssetWhereInput
  }

  export type AssetUpdateToOneWithWhereWithoutSubAssetsInput = {
    where?: AssetWhereInput
    data: XOR<AssetUpdateWithoutSubAssetsInput, AssetUncheckedUpdateWithoutSubAssetsInput>
  }

  export type AssetUpdateWithoutSubAssetsInput = {
    name?: StringFieldUpdateOperationsInput | string
    inventoryCode?: StringFieldUpdateOperationsInput | string
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    type?: EnumAssetTypeFieldUpdateOperationsInput | $Enums.AssetType
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reports?: ReportUpdateManyWithoutAssetNestedInput
    assignements?: TechnicianAssignementUpdateManyWithoutLocationNestedInput
    location?: AssetUpdateOneWithoutSubAssetsNestedInput
    category?: CategoryUpdateOneWithoutAssetsNestedInput
    schedules?: ScheduleUpdateManyWithoutAssetNestedInput
  }

  export type AssetUncheckedUpdateWithoutSubAssetsInput = {
    id?: IntFieldUpdateOperationsInput | number
    locationId?: NullableIntFieldUpdateOperationsInput | number | null
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    name?: StringFieldUpdateOperationsInput | string
    inventoryCode?: StringFieldUpdateOperationsInput | string
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    type?: EnumAssetTypeFieldUpdateOperationsInput | $Enums.AssetType
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reports?: ReportUncheckedUpdateManyWithoutAssetNestedInput
    assignements?: TechnicianAssignementUncheckedUpdateManyWithoutLocationNestedInput
    schedules?: ScheduleUncheckedUpdateManyWithoutAssetNestedInput
  }

  export type CategoryUpsertWithoutAssetsInput = {
    update: XOR<CategoryUpdateWithoutAssetsInput, CategoryUncheckedUpdateWithoutAssetsInput>
    create: XOR<CategoryCreateWithoutAssetsInput, CategoryUncheckedCreateWithoutAssetsInput>
    where?: CategoryWhereInput
  }

  export type CategoryUpdateToOneWithWhereWithoutAssetsInput = {
    where?: CategoryWhereInput
    data: XOR<CategoryUpdateWithoutAssetsInput, CategoryUncheckedUpdateWithoutAssetsInput>
  }

  export type CategoryUpdateWithoutAssetsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    children?: CategoryUpdateManyWithoutParentNestedInput
    parent?: CategoryUpdateOneWithoutChildrenNestedInput
    Report?: ReportUpdateManyWithoutCategoryNestedInput
    ancestors?: CategoryClosureUpdateManyWithoutAncestorNestedInput
    descendants?: CategoryClosureUpdateManyWithoutDescendantNestedInput
    schedules?: ScheduleUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateWithoutAssetsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    children?: CategoryUncheckedUpdateManyWithoutParentNestedInput
    Report?: ReportUncheckedUpdateManyWithoutCategoryNestedInput
    ancestors?: CategoryClosureUncheckedUpdateManyWithoutAncestorNestedInput
    descendants?: CategoryClosureUncheckedUpdateManyWithoutDescendantNestedInput
    schedules?: ScheduleUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type ScheduleUpsertWithWhereUniqueWithoutAssetInput = {
    where: ScheduleWhereUniqueInput
    update: XOR<ScheduleUpdateWithoutAssetInput, ScheduleUncheckedUpdateWithoutAssetInput>
    create: XOR<ScheduleCreateWithoutAssetInput, ScheduleUncheckedCreateWithoutAssetInput>
  }

  export type ScheduleUpdateWithWhereUniqueWithoutAssetInput = {
    where: ScheduleWhereUniqueInput
    data: XOR<ScheduleUpdateWithoutAssetInput, ScheduleUncheckedUpdateWithoutAssetInput>
  }

  export type ScheduleUpdateManyWithWhereWithoutAssetInput = {
    where: ScheduleScalarWhereInput
    data: XOR<ScheduleUpdateManyMutationInput, ScheduleUncheckedUpdateManyWithoutAssetInput>
  }

  export type ScheduleScalarWhereInput = {
    AND?: ScheduleScalarWhereInput | ScheduleScalarWhereInput[]
    OR?: ScheduleScalarWhereInput[]
    NOT?: ScheduleScalarWhereInput | ScheduleScalarWhereInput[]
    id?: IntFilter<"Schedule"> | number
    assetId?: IntNullableFilter<"Schedule"> | number | null
    schedulerId?: IntFilter<"Schedule"> | number
    categoryId?: IntNullableFilter<"Schedule"> | number | null
    description?: StringNullableFilter<"Schedule"> | string | null
    lastMaintenanceDate?: StringFilter<"Schedule"> | string
    frequency?: IntFilter<"Schedule"> | number
    priority?: EnumPriorityFilter<"Schedule"> | $Enums.Priority
    createdAt?: DateTimeFilter<"Schedule"> | Date | string
    updatedAt?: DateTimeFilter<"Schedule"> | Date | string
  }

  export type AssetCreateWithoutCategoryInput = {
    name: string
    inventoryCode: string
    status: $Enums.AssetStatus
    type: $Enums.AssetType
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    subAssets?: AssetCreateNestedManyWithoutLocationInput
    reports?: ReportCreateNestedManyWithoutAssetInput
    assignements?: TechnicianAssignementCreateNestedManyWithoutLocationInput
    location?: AssetCreateNestedOneWithoutSubAssetsInput
    schedules?: ScheduleCreateNestedManyWithoutAssetInput
  }

  export type AssetUncheckedCreateWithoutCategoryInput = {
    id?: number
    locationId?: number | null
    name: string
    inventoryCode: string
    status: $Enums.AssetStatus
    type: $Enums.AssetType
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    subAssets?: AssetUncheckedCreateNestedManyWithoutLocationInput
    reports?: ReportUncheckedCreateNestedManyWithoutAssetInput
    assignements?: TechnicianAssignementUncheckedCreateNestedManyWithoutLocationInput
    schedules?: ScheduleUncheckedCreateNestedManyWithoutAssetInput
  }

  export type AssetCreateOrConnectWithoutCategoryInput = {
    where: AssetWhereUniqueInput
    create: XOR<AssetCreateWithoutCategoryInput, AssetUncheckedCreateWithoutCategoryInput>
  }

  export type AssetCreateManyCategoryInputEnvelope = {
    data: AssetCreateManyCategoryInput | AssetCreateManyCategoryInput[]
  }

  export type CategoryCreateWithoutParentInput = {
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    assets?: AssetCreateNestedManyWithoutCategoryInput
    children?: CategoryCreateNestedManyWithoutParentInput
    Report?: ReportCreateNestedManyWithoutCategoryInput
    ancestors?: CategoryClosureCreateNestedManyWithoutAncestorInput
    descendants?: CategoryClosureCreateNestedManyWithoutDescendantInput
    schedules?: ScheduleCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateWithoutParentInput = {
    id?: number
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    assets?: AssetUncheckedCreateNestedManyWithoutCategoryInput
    children?: CategoryUncheckedCreateNestedManyWithoutParentInput
    Report?: ReportUncheckedCreateNestedManyWithoutCategoryInput
    ancestors?: CategoryClosureUncheckedCreateNestedManyWithoutAncestorInput
    descendants?: CategoryClosureUncheckedCreateNestedManyWithoutDescendantInput
    schedules?: ScheduleUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryCreateOrConnectWithoutParentInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutParentInput, CategoryUncheckedCreateWithoutParentInput>
  }

  export type CategoryCreateManyParentInputEnvelope = {
    data: CategoryCreateManyParentInput | CategoryCreateManyParentInput[]
  }

  export type CategoryCreateWithoutChildrenInput = {
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    assets?: AssetCreateNestedManyWithoutCategoryInput
    parent?: CategoryCreateNestedOneWithoutChildrenInput
    Report?: ReportCreateNestedManyWithoutCategoryInput
    ancestors?: CategoryClosureCreateNestedManyWithoutAncestorInput
    descendants?: CategoryClosureCreateNestedManyWithoutDescendantInput
    schedules?: ScheduleCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateWithoutChildrenInput = {
    id?: number
    name: string
    description?: string | null
    parentId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    assets?: AssetUncheckedCreateNestedManyWithoutCategoryInput
    Report?: ReportUncheckedCreateNestedManyWithoutCategoryInput
    ancestors?: CategoryClosureUncheckedCreateNestedManyWithoutAncestorInput
    descendants?: CategoryClosureUncheckedCreateNestedManyWithoutDescendantInput
    schedules?: ScheduleUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryCreateOrConnectWithoutChildrenInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutChildrenInput, CategoryUncheckedCreateWithoutChildrenInput>
  }

  export type ReportCreateWithoutCategoryInput = {
    description?: string | null
    imageUrl?: string | null
    type: $Enums.OperationType
    status: $Enums.ReportStatus
    priority: $Enums.Priority
    createdAt?: Date | string
    updatedAt?: Date | string
    reporter: UserCreateNestedOneWithoutReportsInput
    asset?: AssetCreateNestedOneWithoutReportsInput
    interventionRequests?: InterventionRequestCreateNestedManyWithoutReportInput
  }

  export type ReportUncheckedCreateWithoutCategoryInput = {
    id?: number
    reporterId: number
    assetId?: number | null
    description?: string | null
    imageUrl?: string | null
    type: $Enums.OperationType
    status: $Enums.ReportStatus
    priority: $Enums.Priority
    createdAt?: Date | string
    updatedAt?: Date | string
    interventionRequests?: InterventionRequestUncheckedCreateNestedManyWithoutReportInput
  }

  export type ReportCreateOrConnectWithoutCategoryInput = {
    where: ReportWhereUniqueInput
    create: XOR<ReportCreateWithoutCategoryInput, ReportUncheckedCreateWithoutCategoryInput>
  }

  export type ReportCreateManyCategoryInputEnvelope = {
    data: ReportCreateManyCategoryInput | ReportCreateManyCategoryInput[]
  }

  export type CategoryClosureCreateWithoutAncestorInput = {
    depth: number
    descendant: CategoryCreateNestedOneWithoutDescendantsInput
  }

  export type CategoryClosureUncheckedCreateWithoutAncestorInput = {
    descendantId: number
    depth: number
  }

  export type CategoryClosureCreateOrConnectWithoutAncestorInput = {
    where: CategoryClosureWhereUniqueInput
    create: XOR<CategoryClosureCreateWithoutAncestorInput, CategoryClosureUncheckedCreateWithoutAncestorInput>
  }

  export type CategoryClosureCreateManyAncestorInputEnvelope = {
    data: CategoryClosureCreateManyAncestorInput | CategoryClosureCreateManyAncestorInput[]
  }

  export type CategoryClosureCreateWithoutDescendantInput = {
    depth: number
    ancestor: CategoryCreateNestedOneWithoutAncestorsInput
  }

  export type CategoryClosureUncheckedCreateWithoutDescendantInput = {
    ancestorId: number
    depth: number
  }

  export type CategoryClosureCreateOrConnectWithoutDescendantInput = {
    where: CategoryClosureWhereUniqueInput
    create: XOR<CategoryClosureCreateWithoutDescendantInput, CategoryClosureUncheckedCreateWithoutDescendantInput>
  }

  export type CategoryClosureCreateManyDescendantInputEnvelope = {
    data: CategoryClosureCreateManyDescendantInput | CategoryClosureCreateManyDescendantInput[]
  }

  export type ScheduleCreateWithoutCategoryInput = {
    description?: string | null
    lastMaintenanceDate: string
    frequency: number
    priority: $Enums.Priority
    createdAt?: Date | string
    updatedAt?: Date | string
    asset?: AssetCreateNestedOneWithoutSchedulesInput
    scheduler: UserCreateNestedOneWithoutCreatedSchedulesInput
  }

  export type ScheduleUncheckedCreateWithoutCategoryInput = {
    id?: number
    assetId?: number | null
    schedulerId: number
    description?: string | null
    lastMaintenanceDate: string
    frequency: number
    priority: $Enums.Priority
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ScheduleCreateOrConnectWithoutCategoryInput = {
    where: ScheduleWhereUniqueInput
    create: XOR<ScheduleCreateWithoutCategoryInput, ScheduleUncheckedCreateWithoutCategoryInput>
  }

  export type ScheduleCreateManyCategoryInputEnvelope = {
    data: ScheduleCreateManyCategoryInput | ScheduleCreateManyCategoryInput[]
  }

  export type AssetUpsertWithWhereUniqueWithoutCategoryInput = {
    where: AssetWhereUniqueInput
    update: XOR<AssetUpdateWithoutCategoryInput, AssetUncheckedUpdateWithoutCategoryInput>
    create: XOR<AssetCreateWithoutCategoryInput, AssetUncheckedCreateWithoutCategoryInput>
  }

  export type AssetUpdateWithWhereUniqueWithoutCategoryInput = {
    where: AssetWhereUniqueInput
    data: XOR<AssetUpdateWithoutCategoryInput, AssetUncheckedUpdateWithoutCategoryInput>
  }

  export type AssetUpdateManyWithWhereWithoutCategoryInput = {
    where: AssetScalarWhereInput
    data: XOR<AssetUpdateManyMutationInput, AssetUncheckedUpdateManyWithoutCategoryInput>
  }

  export type CategoryUpsertWithWhereUniqueWithoutParentInput = {
    where: CategoryWhereUniqueInput
    update: XOR<CategoryUpdateWithoutParentInput, CategoryUncheckedUpdateWithoutParentInput>
    create: XOR<CategoryCreateWithoutParentInput, CategoryUncheckedCreateWithoutParentInput>
  }

  export type CategoryUpdateWithWhereUniqueWithoutParentInput = {
    where: CategoryWhereUniqueInput
    data: XOR<CategoryUpdateWithoutParentInput, CategoryUncheckedUpdateWithoutParentInput>
  }

  export type CategoryUpdateManyWithWhereWithoutParentInput = {
    where: CategoryScalarWhereInput
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyWithoutParentInput>
  }

  export type CategoryScalarWhereInput = {
    AND?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
    OR?: CategoryScalarWhereInput[]
    NOT?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
    id?: IntFilter<"Category"> | number
    name?: StringFilter<"Category"> | string
    description?: StringNullableFilter<"Category"> | string | null
    parentId?: IntNullableFilter<"Category"> | number | null
    createdAt?: DateTimeFilter<"Category"> | Date | string
    updatedAt?: DateTimeFilter<"Category"> | Date | string
  }

  export type CategoryUpsertWithoutChildrenInput = {
    update: XOR<CategoryUpdateWithoutChildrenInput, CategoryUncheckedUpdateWithoutChildrenInput>
    create: XOR<CategoryCreateWithoutChildrenInput, CategoryUncheckedCreateWithoutChildrenInput>
    where?: CategoryWhereInput
  }

  export type CategoryUpdateToOneWithWhereWithoutChildrenInput = {
    where?: CategoryWhereInput
    data: XOR<CategoryUpdateWithoutChildrenInput, CategoryUncheckedUpdateWithoutChildrenInput>
  }

  export type CategoryUpdateWithoutChildrenInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assets?: AssetUpdateManyWithoutCategoryNestedInput
    parent?: CategoryUpdateOneWithoutChildrenNestedInput
    Report?: ReportUpdateManyWithoutCategoryNestedInput
    ancestors?: CategoryClosureUpdateManyWithoutAncestorNestedInput
    descendants?: CategoryClosureUpdateManyWithoutDescendantNestedInput
    schedules?: ScheduleUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateWithoutChildrenInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assets?: AssetUncheckedUpdateManyWithoutCategoryNestedInput
    Report?: ReportUncheckedUpdateManyWithoutCategoryNestedInput
    ancestors?: CategoryClosureUncheckedUpdateManyWithoutAncestorNestedInput
    descendants?: CategoryClosureUncheckedUpdateManyWithoutDescendantNestedInput
    schedules?: ScheduleUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type ReportUpsertWithWhereUniqueWithoutCategoryInput = {
    where: ReportWhereUniqueInput
    update: XOR<ReportUpdateWithoutCategoryInput, ReportUncheckedUpdateWithoutCategoryInput>
    create: XOR<ReportCreateWithoutCategoryInput, ReportUncheckedCreateWithoutCategoryInput>
  }

  export type ReportUpdateWithWhereUniqueWithoutCategoryInput = {
    where: ReportWhereUniqueInput
    data: XOR<ReportUpdateWithoutCategoryInput, ReportUncheckedUpdateWithoutCategoryInput>
  }

  export type ReportUpdateManyWithWhereWithoutCategoryInput = {
    where: ReportScalarWhereInput
    data: XOR<ReportUpdateManyMutationInput, ReportUncheckedUpdateManyWithoutCategoryInput>
  }

  export type CategoryClosureUpsertWithWhereUniqueWithoutAncestorInput = {
    where: CategoryClosureWhereUniqueInput
    update: XOR<CategoryClosureUpdateWithoutAncestorInput, CategoryClosureUncheckedUpdateWithoutAncestorInput>
    create: XOR<CategoryClosureCreateWithoutAncestorInput, CategoryClosureUncheckedCreateWithoutAncestorInput>
  }

  export type CategoryClosureUpdateWithWhereUniqueWithoutAncestorInput = {
    where: CategoryClosureWhereUniqueInput
    data: XOR<CategoryClosureUpdateWithoutAncestorInput, CategoryClosureUncheckedUpdateWithoutAncestorInput>
  }

  export type CategoryClosureUpdateManyWithWhereWithoutAncestorInput = {
    where: CategoryClosureScalarWhereInput
    data: XOR<CategoryClosureUpdateManyMutationInput, CategoryClosureUncheckedUpdateManyWithoutAncestorInput>
  }

  export type CategoryClosureScalarWhereInput = {
    AND?: CategoryClosureScalarWhereInput | CategoryClosureScalarWhereInput[]
    OR?: CategoryClosureScalarWhereInput[]
    NOT?: CategoryClosureScalarWhereInput | CategoryClosureScalarWhereInput[]
    ancestorId?: IntFilter<"CategoryClosure"> | number
    descendantId?: IntFilter<"CategoryClosure"> | number
    depth?: IntFilter<"CategoryClosure"> | number
  }

  export type CategoryClosureUpsertWithWhereUniqueWithoutDescendantInput = {
    where: CategoryClosureWhereUniqueInput
    update: XOR<CategoryClosureUpdateWithoutDescendantInput, CategoryClosureUncheckedUpdateWithoutDescendantInput>
    create: XOR<CategoryClosureCreateWithoutDescendantInput, CategoryClosureUncheckedCreateWithoutDescendantInput>
  }

  export type CategoryClosureUpdateWithWhereUniqueWithoutDescendantInput = {
    where: CategoryClosureWhereUniqueInput
    data: XOR<CategoryClosureUpdateWithoutDescendantInput, CategoryClosureUncheckedUpdateWithoutDescendantInput>
  }

  export type CategoryClosureUpdateManyWithWhereWithoutDescendantInput = {
    where: CategoryClosureScalarWhereInput
    data: XOR<CategoryClosureUpdateManyMutationInput, CategoryClosureUncheckedUpdateManyWithoutDescendantInput>
  }

  export type ScheduleUpsertWithWhereUniqueWithoutCategoryInput = {
    where: ScheduleWhereUniqueInput
    update: XOR<ScheduleUpdateWithoutCategoryInput, ScheduleUncheckedUpdateWithoutCategoryInput>
    create: XOR<ScheduleCreateWithoutCategoryInput, ScheduleUncheckedCreateWithoutCategoryInput>
  }

  export type ScheduleUpdateWithWhereUniqueWithoutCategoryInput = {
    where: ScheduleWhereUniqueInput
    data: XOR<ScheduleUpdateWithoutCategoryInput, ScheduleUncheckedUpdateWithoutCategoryInput>
  }

  export type ScheduleUpdateManyWithWhereWithoutCategoryInput = {
    where: ScheduleScalarWhereInput
    data: XOR<ScheduleUpdateManyMutationInput, ScheduleUncheckedUpdateManyWithoutCategoryInput>
  }

  export type CategoryCreateWithoutAncestorsInput = {
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    assets?: AssetCreateNestedManyWithoutCategoryInput
    children?: CategoryCreateNestedManyWithoutParentInput
    parent?: CategoryCreateNestedOneWithoutChildrenInput
    Report?: ReportCreateNestedManyWithoutCategoryInput
    descendants?: CategoryClosureCreateNestedManyWithoutDescendantInput
    schedules?: ScheduleCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateWithoutAncestorsInput = {
    id?: number
    name: string
    description?: string | null
    parentId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    assets?: AssetUncheckedCreateNestedManyWithoutCategoryInput
    children?: CategoryUncheckedCreateNestedManyWithoutParentInput
    Report?: ReportUncheckedCreateNestedManyWithoutCategoryInput
    descendants?: CategoryClosureUncheckedCreateNestedManyWithoutDescendantInput
    schedules?: ScheduleUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryCreateOrConnectWithoutAncestorsInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutAncestorsInput, CategoryUncheckedCreateWithoutAncestorsInput>
  }

  export type CategoryCreateWithoutDescendantsInput = {
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    assets?: AssetCreateNestedManyWithoutCategoryInput
    children?: CategoryCreateNestedManyWithoutParentInput
    parent?: CategoryCreateNestedOneWithoutChildrenInput
    Report?: ReportCreateNestedManyWithoutCategoryInput
    ancestors?: CategoryClosureCreateNestedManyWithoutAncestorInput
    schedules?: ScheduleCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateWithoutDescendantsInput = {
    id?: number
    name: string
    description?: string | null
    parentId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    assets?: AssetUncheckedCreateNestedManyWithoutCategoryInput
    children?: CategoryUncheckedCreateNestedManyWithoutParentInput
    Report?: ReportUncheckedCreateNestedManyWithoutCategoryInput
    ancestors?: CategoryClosureUncheckedCreateNestedManyWithoutAncestorInput
    schedules?: ScheduleUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryCreateOrConnectWithoutDescendantsInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutDescendantsInput, CategoryUncheckedCreateWithoutDescendantsInput>
  }

  export type CategoryUpsertWithoutAncestorsInput = {
    update: XOR<CategoryUpdateWithoutAncestorsInput, CategoryUncheckedUpdateWithoutAncestorsInput>
    create: XOR<CategoryCreateWithoutAncestorsInput, CategoryUncheckedCreateWithoutAncestorsInput>
    where?: CategoryWhereInput
  }

  export type CategoryUpdateToOneWithWhereWithoutAncestorsInput = {
    where?: CategoryWhereInput
    data: XOR<CategoryUpdateWithoutAncestorsInput, CategoryUncheckedUpdateWithoutAncestorsInput>
  }

  export type CategoryUpdateWithoutAncestorsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assets?: AssetUpdateManyWithoutCategoryNestedInput
    children?: CategoryUpdateManyWithoutParentNestedInput
    parent?: CategoryUpdateOneWithoutChildrenNestedInput
    Report?: ReportUpdateManyWithoutCategoryNestedInput
    descendants?: CategoryClosureUpdateManyWithoutDescendantNestedInput
    schedules?: ScheduleUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateWithoutAncestorsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assets?: AssetUncheckedUpdateManyWithoutCategoryNestedInput
    children?: CategoryUncheckedUpdateManyWithoutParentNestedInput
    Report?: ReportUncheckedUpdateManyWithoutCategoryNestedInput
    descendants?: CategoryClosureUncheckedUpdateManyWithoutDescendantNestedInput
    schedules?: ScheduleUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUpsertWithoutDescendantsInput = {
    update: XOR<CategoryUpdateWithoutDescendantsInput, CategoryUncheckedUpdateWithoutDescendantsInput>
    create: XOR<CategoryCreateWithoutDescendantsInput, CategoryUncheckedCreateWithoutDescendantsInput>
    where?: CategoryWhereInput
  }

  export type CategoryUpdateToOneWithWhereWithoutDescendantsInput = {
    where?: CategoryWhereInput
    data: XOR<CategoryUpdateWithoutDescendantsInput, CategoryUncheckedUpdateWithoutDescendantsInput>
  }

  export type CategoryUpdateWithoutDescendantsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assets?: AssetUpdateManyWithoutCategoryNestedInput
    children?: CategoryUpdateManyWithoutParentNestedInput
    parent?: CategoryUpdateOneWithoutChildrenNestedInput
    Report?: ReportUpdateManyWithoutCategoryNestedInput
    ancestors?: CategoryClosureUpdateManyWithoutAncestorNestedInput
    schedules?: ScheduleUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateWithoutDescendantsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assets?: AssetUncheckedUpdateManyWithoutCategoryNestedInput
    children?: CategoryUncheckedUpdateManyWithoutParentNestedInput
    Report?: ReportUncheckedUpdateManyWithoutCategoryNestedInput
    ancestors?: CategoryClosureUncheckedUpdateManyWithoutAncestorNestedInput
    schedules?: ScheduleUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type TechnicianAssignementCreateWithoutInterventionRequestInput = {
    completed?: boolean
    details?: string | null
    createdAt?: Date | string
    technician: TechnicianCreateNestedOneWithoutTechnicianAssignementsInput
    location?: AssetCreateNestedOneWithoutAssignementsInput
  }

  export type TechnicianAssignementUncheckedCreateWithoutInterventionRequestInput = {
    id?: number
    technicianId: number
    locationId?: number | null
    completed?: boolean
    details?: string | null
    createdAt?: Date | string
  }

  export type TechnicianAssignementCreateOrConnectWithoutInterventionRequestInput = {
    where: TechnicianAssignementWhereUniqueInput
    create: XOR<TechnicianAssignementCreateWithoutInterventionRequestInput, TechnicianAssignementUncheckedCreateWithoutInterventionRequestInput>
  }

  export type TechnicianAssignementCreateManyInterventionRequestInputEnvelope = {
    data: TechnicianAssignementCreateManyInterventionRequestInput | TechnicianAssignementCreateManyInterventionRequestInput[]
  }

  export type InterventionsCreateWithoutInterventionRequestInput = {
    description: string
    createdAt?: Date | string
    technician: TechnicianCreateNestedOneWithoutInterventionsInput
  }

  export type InterventionsUncheckedCreateWithoutInterventionRequestInput = {
    id?: number
    technicianId: number
    description: string
    createdAt?: Date | string
  }

  export type InterventionsCreateOrConnectWithoutInterventionRequestInput = {
    where: InterventionsWhereUniqueInput
    create: XOR<InterventionsCreateWithoutInterventionRequestInput, InterventionsUncheckedCreateWithoutInterventionRequestInput>
  }

  export type InterventionsCreateManyInterventionRequestInputEnvelope = {
    data: InterventionsCreateManyInterventionRequestInput | InterventionsCreateManyInterventionRequestInput[]
  }

  export type ReportCreateWithoutInterventionRequestsInput = {
    description?: string | null
    imageUrl?: string | null
    type: $Enums.OperationType
    status: $Enums.ReportStatus
    priority: $Enums.Priority
    createdAt?: Date | string
    updatedAt?: Date | string
    reporter: UserCreateNestedOneWithoutReportsInput
    asset?: AssetCreateNestedOneWithoutReportsInput
    category?: CategoryCreateNestedOneWithoutReportInput
  }

  export type ReportUncheckedCreateWithoutInterventionRequestsInput = {
    id?: number
    reporterId: number
    assetId?: number | null
    categoryId?: number | null
    description?: string | null
    imageUrl?: string | null
    type: $Enums.OperationType
    status: $Enums.ReportStatus
    priority: $Enums.Priority
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReportCreateOrConnectWithoutInterventionRequestsInput = {
    where: ReportWhereUniqueInput
    create: XOR<ReportCreateWithoutInterventionRequestsInput, ReportUncheckedCreateWithoutInterventionRequestsInput>
  }

  export type UserCreateWithoutInterventionRequestsInput = {
    name: string
    email: string
    password: string
    avatarUrl?: string | null
    role?: $Enums.Role
    approvalStatus?: $Enums.ApprovalStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    technicianData?: TechnicianCreateNestedOneWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    reports?: ReportCreateNestedManyWithoutReporterInput
    createdSchedules?: ScheduleCreateNestedManyWithoutSchedulerInput
  }

  export type UserUncheckedCreateWithoutInterventionRequestsInput = {
    id?: number
    name: string
    email: string
    password: string
    avatarUrl?: string | null
    role?: $Enums.Role
    approvalStatus?: $Enums.ApprovalStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    technicianData?: TechnicianUncheckedCreateNestedOneWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    reports?: ReportUncheckedCreateNestedManyWithoutReporterInput
    createdSchedules?: ScheduleUncheckedCreateNestedManyWithoutSchedulerInput
  }

  export type UserCreateOrConnectWithoutInterventionRequestsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutInterventionRequestsInput, UserUncheckedCreateWithoutInterventionRequestsInput>
  }

  export type TechnicianAssignementUpsertWithWhereUniqueWithoutInterventionRequestInput = {
    where: TechnicianAssignementWhereUniqueInput
    update: XOR<TechnicianAssignementUpdateWithoutInterventionRequestInput, TechnicianAssignementUncheckedUpdateWithoutInterventionRequestInput>
    create: XOR<TechnicianAssignementCreateWithoutInterventionRequestInput, TechnicianAssignementUncheckedCreateWithoutInterventionRequestInput>
  }

  export type TechnicianAssignementUpdateWithWhereUniqueWithoutInterventionRequestInput = {
    where: TechnicianAssignementWhereUniqueInput
    data: XOR<TechnicianAssignementUpdateWithoutInterventionRequestInput, TechnicianAssignementUncheckedUpdateWithoutInterventionRequestInput>
  }

  export type TechnicianAssignementUpdateManyWithWhereWithoutInterventionRequestInput = {
    where: TechnicianAssignementScalarWhereInput
    data: XOR<TechnicianAssignementUpdateManyMutationInput, TechnicianAssignementUncheckedUpdateManyWithoutInterventionRequestInput>
  }

  export type InterventionsUpsertWithWhereUniqueWithoutInterventionRequestInput = {
    where: InterventionsWhereUniqueInput
    update: XOR<InterventionsUpdateWithoutInterventionRequestInput, InterventionsUncheckedUpdateWithoutInterventionRequestInput>
    create: XOR<InterventionsCreateWithoutInterventionRequestInput, InterventionsUncheckedCreateWithoutInterventionRequestInput>
  }

  export type InterventionsUpdateWithWhereUniqueWithoutInterventionRequestInput = {
    where: InterventionsWhereUniqueInput
    data: XOR<InterventionsUpdateWithoutInterventionRequestInput, InterventionsUncheckedUpdateWithoutInterventionRequestInput>
  }

  export type InterventionsUpdateManyWithWhereWithoutInterventionRequestInput = {
    where: InterventionsScalarWhereInput
    data: XOR<InterventionsUpdateManyMutationInput, InterventionsUncheckedUpdateManyWithoutInterventionRequestInput>
  }

  export type InterventionsScalarWhereInput = {
    AND?: InterventionsScalarWhereInput | InterventionsScalarWhereInput[]
    OR?: InterventionsScalarWhereInput[]
    NOT?: InterventionsScalarWhereInput | InterventionsScalarWhereInput[]
    id?: IntFilter<"Interventions"> | number
    technicianId?: IntFilter<"Interventions"> | number
    interventionRequestId?: IntFilter<"Interventions"> | number
    description?: StringFilter<"Interventions"> | string
    createdAt?: DateTimeFilter<"Interventions"> | Date | string
  }

  export type ReportUpsertWithoutInterventionRequestsInput = {
    update: XOR<ReportUpdateWithoutInterventionRequestsInput, ReportUncheckedUpdateWithoutInterventionRequestsInput>
    create: XOR<ReportCreateWithoutInterventionRequestsInput, ReportUncheckedCreateWithoutInterventionRequestsInput>
    where?: ReportWhereInput
  }

  export type ReportUpdateToOneWithWhereWithoutInterventionRequestsInput = {
    where?: ReportWhereInput
    data: XOR<ReportUpdateWithoutInterventionRequestsInput, ReportUncheckedUpdateWithoutInterventionRequestsInput>
  }

  export type ReportUpdateWithoutInterventionRequestsInput = {
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumOperationTypeFieldUpdateOperationsInput | $Enums.OperationType
    status?: EnumReportStatusFieldUpdateOperationsInput | $Enums.ReportStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reporter?: UserUpdateOneRequiredWithoutReportsNestedInput
    asset?: AssetUpdateOneWithoutReportsNestedInput
    category?: CategoryUpdateOneWithoutReportNestedInput
  }

  export type ReportUncheckedUpdateWithoutInterventionRequestsInput = {
    id?: IntFieldUpdateOperationsInput | number
    reporterId?: IntFieldUpdateOperationsInput | number
    assetId?: NullableIntFieldUpdateOperationsInput | number | null
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumOperationTypeFieldUpdateOperationsInput | $Enums.OperationType
    status?: EnumReportStatusFieldUpdateOperationsInput | $Enums.ReportStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpsertWithoutInterventionRequestsInput = {
    update: XOR<UserUpdateWithoutInterventionRequestsInput, UserUncheckedUpdateWithoutInterventionRequestsInput>
    create: XOR<UserCreateWithoutInterventionRequestsInput, UserUncheckedCreateWithoutInterventionRequestsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutInterventionRequestsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutInterventionRequestsInput, UserUncheckedUpdateWithoutInterventionRequestsInput>
  }

  export type UserUpdateWithoutInterventionRequestsInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    approvalStatus?: EnumApprovalStatusFieldUpdateOperationsInput | $Enums.ApprovalStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    technicianData?: TechnicianUpdateOneWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    reports?: ReportUpdateManyWithoutReporterNestedInput
    createdSchedules?: ScheduleUpdateManyWithoutSchedulerNestedInput
  }

  export type UserUncheckedUpdateWithoutInterventionRequestsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    approvalStatus?: EnumApprovalStatusFieldUpdateOperationsInput | $Enums.ApprovalStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    technicianData?: TechnicianUncheckedUpdateOneWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    reports?: ReportUncheckedUpdateManyWithoutReporterNestedInput
    createdSchedules?: ScheduleUncheckedUpdateManyWithoutSchedulerNestedInput
  }

  export type TechnicianCreateWithoutTechnicianAssignementsInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    availabilities?: TechnicianAvailabilityCreateNestedManyWithoutTechnicianInput
    user: UserCreateNestedOneWithoutTechnicianDataInput
    profession?: ProfessionCreateNestedOneWithoutTechniciansInput
    Interventions?: InterventionsCreateNestedManyWithoutTechnicianInput
  }

  export type TechnicianUncheckedCreateWithoutTechnicianAssignementsInput = {
    userId: number
    professionId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    availabilities?: TechnicianAvailabilityUncheckedCreateNestedManyWithoutTechnicianInput
    Interventions?: InterventionsUncheckedCreateNestedManyWithoutTechnicianInput
  }

  export type TechnicianCreateOrConnectWithoutTechnicianAssignementsInput = {
    where: TechnicianWhereUniqueInput
    create: XOR<TechnicianCreateWithoutTechnicianAssignementsInput, TechnicianUncheckedCreateWithoutTechnicianAssignementsInput>
  }

  export type InterventionRequestCreateWithoutAssignedToInput = {
    title: string
    deadline: string
    status: $Enums.InterventionRequestStatus
    notified?: boolean
    createdAt?: Date | string
    Interventions?: InterventionsCreateNestedManyWithoutInterventionRequestInput
    report: ReportCreateNestedOneWithoutInterventionRequestsInput
    creator: UserCreateNestedOneWithoutInterventionRequestsInput
  }

  export type InterventionRequestUncheckedCreateWithoutAssignedToInput = {
    id?: number
    reportId: number
    title: string
    deadline: string
    status: $Enums.InterventionRequestStatus
    createdBy: number
    notified?: boolean
    createdAt?: Date | string
    Interventions?: InterventionsUncheckedCreateNestedManyWithoutInterventionRequestInput
  }

  export type InterventionRequestCreateOrConnectWithoutAssignedToInput = {
    where: InterventionRequestWhereUniqueInput
    create: XOR<InterventionRequestCreateWithoutAssignedToInput, InterventionRequestUncheckedCreateWithoutAssignedToInput>
  }

  export type AssetCreateWithoutAssignementsInput = {
    name: string
    inventoryCode: string
    status: $Enums.AssetStatus
    type: $Enums.AssetType
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    subAssets?: AssetCreateNestedManyWithoutLocationInput
    reports?: ReportCreateNestedManyWithoutAssetInput
    location?: AssetCreateNestedOneWithoutSubAssetsInput
    category?: CategoryCreateNestedOneWithoutAssetsInput
    schedules?: ScheduleCreateNestedManyWithoutAssetInput
  }

  export type AssetUncheckedCreateWithoutAssignementsInput = {
    id?: number
    locationId?: number | null
    categoryId?: number | null
    name: string
    inventoryCode: string
    status: $Enums.AssetStatus
    type: $Enums.AssetType
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    subAssets?: AssetUncheckedCreateNestedManyWithoutLocationInput
    reports?: ReportUncheckedCreateNestedManyWithoutAssetInput
    schedules?: ScheduleUncheckedCreateNestedManyWithoutAssetInput
  }

  export type AssetCreateOrConnectWithoutAssignementsInput = {
    where: AssetWhereUniqueInput
    create: XOR<AssetCreateWithoutAssignementsInput, AssetUncheckedCreateWithoutAssignementsInput>
  }

  export type TechnicianUpsertWithoutTechnicianAssignementsInput = {
    update: XOR<TechnicianUpdateWithoutTechnicianAssignementsInput, TechnicianUncheckedUpdateWithoutTechnicianAssignementsInput>
    create: XOR<TechnicianCreateWithoutTechnicianAssignementsInput, TechnicianUncheckedCreateWithoutTechnicianAssignementsInput>
    where?: TechnicianWhereInput
  }

  export type TechnicianUpdateToOneWithWhereWithoutTechnicianAssignementsInput = {
    where?: TechnicianWhereInput
    data: XOR<TechnicianUpdateWithoutTechnicianAssignementsInput, TechnicianUncheckedUpdateWithoutTechnicianAssignementsInput>
  }

  export type TechnicianUpdateWithoutTechnicianAssignementsInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    availabilities?: TechnicianAvailabilityUpdateManyWithoutTechnicianNestedInput
    user?: UserUpdateOneRequiredWithoutTechnicianDataNestedInput
    profession?: ProfessionUpdateOneWithoutTechniciansNestedInput
    Interventions?: InterventionsUpdateManyWithoutTechnicianNestedInput
  }

  export type TechnicianUncheckedUpdateWithoutTechnicianAssignementsInput = {
    userId?: IntFieldUpdateOperationsInput | number
    professionId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    availabilities?: TechnicianAvailabilityUncheckedUpdateManyWithoutTechnicianNestedInput
    Interventions?: InterventionsUncheckedUpdateManyWithoutTechnicianNestedInput
  }

  export type InterventionRequestUpsertWithoutAssignedToInput = {
    update: XOR<InterventionRequestUpdateWithoutAssignedToInput, InterventionRequestUncheckedUpdateWithoutAssignedToInput>
    create: XOR<InterventionRequestCreateWithoutAssignedToInput, InterventionRequestUncheckedCreateWithoutAssignedToInput>
    where?: InterventionRequestWhereInput
  }

  export type InterventionRequestUpdateToOneWithWhereWithoutAssignedToInput = {
    where?: InterventionRequestWhereInput
    data: XOR<InterventionRequestUpdateWithoutAssignedToInput, InterventionRequestUncheckedUpdateWithoutAssignedToInput>
  }

  export type InterventionRequestUpdateWithoutAssignedToInput = {
    title?: StringFieldUpdateOperationsInput | string
    deadline?: StringFieldUpdateOperationsInput | string
    status?: EnumInterventionRequestStatusFieldUpdateOperationsInput | $Enums.InterventionRequestStatus
    notified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Interventions?: InterventionsUpdateManyWithoutInterventionRequestNestedInput
    report?: ReportUpdateOneRequiredWithoutInterventionRequestsNestedInput
    creator?: UserUpdateOneRequiredWithoutInterventionRequestsNestedInput
  }

  export type InterventionRequestUncheckedUpdateWithoutAssignedToInput = {
    id?: IntFieldUpdateOperationsInput | number
    reportId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    deadline?: StringFieldUpdateOperationsInput | string
    status?: EnumInterventionRequestStatusFieldUpdateOperationsInput | $Enums.InterventionRequestStatus
    createdBy?: IntFieldUpdateOperationsInput | number
    notified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Interventions?: InterventionsUncheckedUpdateManyWithoutInterventionRequestNestedInput
  }

  export type AssetUpsertWithoutAssignementsInput = {
    update: XOR<AssetUpdateWithoutAssignementsInput, AssetUncheckedUpdateWithoutAssignementsInput>
    create: XOR<AssetCreateWithoutAssignementsInput, AssetUncheckedCreateWithoutAssignementsInput>
    where?: AssetWhereInput
  }

  export type AssetUpdateToOneWithWhereWithoutAssignementsInput = {
    where?: AssetWhereInput
    data: XOR<AssetUpdateWithoutAssignementsInput, AssetUncheckedUpdateWithoutAssignementsInput>
  }

  export type AssetUpdateWithoutAssignementsInput = {
    name?: StringFieldUpdateOperationsInput | string
    inventoryCode?: StringFieldUpdateOperationsInput | string
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    type?: EnumAssetTypeFieldUpdateOperationsInput | $Enums.AssetType
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subAssets?: AssetUpdateManyWithoutLocationNestedInput
    reports?: ReportUpdateManyWithoutAssetNestedInput
    location?: AssetUpdateOneWithoutSubAssetsNestedInput
    category?: CategoryUpdateOneWithoutAssetsNestedInput
    schedules?: ScheduleUpdateManyWithoutAssetNestedInput
  }

  export type AssetUncheckedUpdateWithoutAssignementsInput = {
    id?: IntFieldUpdateOperationsInput | number
    locationId?: NullableIntFieldUpdateOperationsInput | number | null
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    name?: StringFieldUpdateOperationsInput | string
    inventoryCode?: StringFieldUpdateOperationsInput | string
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    type?: EnumAssetTypeFieldUpdateOperationsInput | $Enums.AssetType
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subAssets?: AssetUncheckedUpdateManyWithoutLocationNestedInput
    reports?: ReportUncheckedUpdateManyWithoutAssetNestedInput
    schedules?: ScheduleUncheckedUpdateManyWithoutAssetNestedInput
  }

  export type InterventionRequestCreateWithoutInterventionsInput = {
    title: string
    deadline: string
    status: $Enums.InterventionRequestStatus
    notified?: boolean
    createdAt?: Date | string
    assignedTo?: TechnicianAssignementCreateNestedManyWithoutInterventionRequestInput
    report: ReportCreateNestedOneWithoutInterventionRequestsInput
    creator: UserCreateNestedOneWithoutInterventionRequestsInput
  }

  export type InterventionRequestUncheckedCreateWithoutInterventionsInput = {
    id?: number
    reportId: number
    title: string
    deadline: string
    status: $Enums.InterventionRequestStatus
    createdBy: number
    notified?: boolean
    createdAt?: Date | string
    assignedTo?: TechnicianAssignementUncheckedCreateNestedManyWithoutInterventionRequestInput
  }

  export type InterventionRequestCreateOrConnectWithoutInterventionsInput = {
    where: InterventionRequestWhereUniqueInput
    create: XOR<InterventionRequestCreateWithoutInterventionsInput, InterventionRequestUncheckedCreateWithoutInterventionsInput>
  }

  export type TechnicianCreateWithoutInterventionsInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    availabilities?: TechnicianAvailabilityCreateNestedManyWithoutTechnicianInput
    user: UserCreateNestedOneWithoutTechnicianDataInput
    profession?: ProfessionCreateNestedOneWithoutTechniciansInput
    TechnicianAssignements?: TechnicianAssignementCreateNestedManyWithoutTechnicianInput
  }

  export type TechnicianUncheckedCreateWithoutInterventionsInput = {
    userId: number
    professionId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    availabilities?: TechnicianAvailabilityUncheckedCreateNestedManyWithoutTechnicianInput
    TechnicianAssignements?: TechnicianAssignementUncheckedCreateNestedManyWithoutTechnicianInput
  }

  export type TechnicianCreateOrConnectWithoutInterventionsInput = {
    where: TechnicianWhereUniqueInput
    create: XOR<TechnicianCreateWithoutInterventionsInput, TechnicianUncheckedCreateWithoutInterventionsInput>
  }

  export type InterventionRequestUpsertWithoutInterventionsInput = {
    update: XOR<InterventionRequestUpdateWithoutInterventionsInput, InterventionRequestUncheckedUpdateWithoutInterventionsInput>
    create: XOR<InterventionRequestCreateWithoutInterventionsInput, InterventionRequestUncheckedCreateWithoutInterventionsInput>
    where?: InterventionRequestWhereInput
  }

  export type InterventionRequestUpdateToOneWithWhereWithoutInterventionsInput = {
    where?: InterventionRequestWhereInput
    data: XOR<InterventionRequestUpdateWithoutInterventionsInput, InterventionRequestUncheckedUpdateWithoutInterventionsInput>
  }

  export type InterventionRequestUpdateWithoutInterventionsInput = {
    title?: StringFieldUpdateOperationsInput | string
    deadline?: StringFieldUpdateOperationsInput | string
    status?: EnumInterventionRequestStatusFieldUpdateOperationsInput | $Enums.InterventionRequestStatus
    notified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedTo?: TechnicianAssignementUpdateManyWithoutInterventionRequestNestedInput
    report?: ReportUpdateOneRequiredWithoutInterventionRequestsNestedInput
    creator?: UserUpdateOneRequiredWithoutInterventionRequestsNestedInput
  }

  export type InterventionRequestUncheckedUpdateWithoutInterventionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    reportId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    deadline?: StringFieldUpdateOperationsInput | string
    status?: EnumInterventionRequestStatusFieldUpdateOperationsInput | $Enums.InterventionRequestStatus
    createdBy?: IntFieldUpdateOperationsInput | number
    notified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedTo?: TechnicianAssignementUncheckedUpdateManyWithoutInterventionRequestNestedInput
  }

  export type TechnicianUpsertWithoutInterventionsInput = {
    update: XOR<TechnicianUpdateWithoutInterventionsInput, TechnicianUncheckedUpdateWithoutInterventionsInput>
    create: XOR<TechnicianCreateWithoutInterventionsInput, TechnicianUncheckedCreateWithoutInterventionsInput>
    where?: TechnicianWhereInput
  }

  export type TechnicianUpdateToOneWithWhereWithoutInterventionsInput = {
    where?: TechnicianWhereInput
    data: XOR<TechnicianUpdateWithoutInterventionsInput, TechnicianUncheckedUpdateWithoutInterventionsInput>
  }

  export type TechnicianUpdateWithoutInterventionsInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    availabilities?: TechnicianAvailabilityUpdateManyWithoutTechnicianNestedInput
    user?: UserUpdateOneRequiredWithoutTechnicianDataNestedInput
    profession?: ProfessionUpdateOneWithoutTechniciansNestedInput
    TechnicianAssignements?: TechnicianAssignementUpdateManyWithoutTechnicianNestedInput
  }

  export type TechnicianUncheckedUpdateWithoutInterventionsInput = {
    userId?: IntFieldUpdateOperationsInput | number
    professionId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    availabilities?: TechnicianAvailabilityUncheckedUpdateManyWithoutTechnicianNestedInput
    TechnicianAssignements?: TechnicianAssignementUncheckedUpdateManyWithoutTechnicianNestedInput
  }

  export type UserCreateWithoutReportsInput = {
    name: string
    email: string
    password: string
    avatarUrl?: string | null
    role?: $Enums.Role
    approvalStatus?: $Enums.ApprovalStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    technicianData?: TechnicianCreateNestedOneWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    interventionRequests?: InterventionRequestCreateNestedManyWithoutCreatorInput
    createdSchedules?: ScheduleCreateNestedManyWithoutSchedulerInput
  }

  export type UserUncheckedCreateWithoutReportsInput = {
    id?: number
    name: string
    email: string
    password: string
    avatarUrl?: string | null
    role?: $Enums.Role
    approvalStatus?: $Enums.ApprovalStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    technicianData?: TechnicianUncheckedCreateNestedOneWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    interventionRequests?: InterventionRequestUncheckedCreateNestedManyWithoutCreatorInput
    createdSchedules?: ScheduleUncheckedCreateNestedManyWithoutSchedulerInput
  }

  export type UserCreateOrConnectWithoutReportsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReportsInput, UserUncheckedCreateWithoutReportsInput>
  }

  export type AssetCreateWithoutReportsInput = {
    name: string
    inventoryCode: string
    status: $Enums.AssetStatus
    type: $Enums.AssetType
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    subAssets?: AssetCreateNestedManyWithoutLocationInput
    assignements?: TechnicianAssignementCreateNestedManyWithoutLocationInput
    location?: AssetCreateNestedOneWithoutSubAssetsInput
    category?: CategoryCreateNestedOneWithoutAssetsInput
    schedules?: ScheduleCreateNestedManyWithoutAssetInput
  }

  export type AssetUncheckedCreateWithoutReportsInput = {
    id?: number
    locationId?: number | null
    categoryId?: number | null
    name: string
    inventoryCode: string
    status: $Enums.AssetStatus
    type: $Enums.AssetType
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    subAssets?: AssetUncheckedCreateNestedManyWithoutLocationInput
    assignements?: TechnicianAssignementUncheckedCreateNestedManyWithoutLocationInput
    schedules?: ScheduleUncheckedCreateNestedManyWithoutAssetInput
  }

  export type AssetCreateOrConnectWithoutReportsInput = {
    where: AssetWhereUniqueInput
    create: XOR<AssetCreateWithoutReportsInput, AssetUncheckedCreateWithoutReportsInput>
  }

  export type CategoryCreateWithoutReportInput = {
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    assets?: AssetCreateNestedManyWithoutCategoryInput
    children?: CategoryCreateNestedManyWithoutParentInput
    parent?: CategoryCreateNestedOneWithoutChildrenInput
    ancestors?: CategoryClosureCreateNestedManyWithoutAncestorInput
    descendants?: CategoryClosureCreateNestedManyWithoutDescendantInput
    schedules?: ScheduleCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateWithoutReportInput = {
    id?: number
    name: string
    description?: string | null
    parentId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    assets?: AssetUncheckedCreateNestedManyWithoutCategoryInput
    children?: CategoryUncheckedCreateNestedManyWithoutParentInput
    ancestors?: CategoryClosureUncheckedCreateNestedManyWithoutAncestorInput
    descendants?: CategoryClosureUncheckedCreateNestedManyWithoutDescendantInput
    schedules?: ScheduleUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryCreateOrConnectWithoutReportInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutReportInput, CategoryUncheckedCreateWithoutReportInput>
  }

  export type InterventionRequestCreateWithoutReportInput = {
    title: string
    deadline: string
    status: $Enums.InterventionRequestStatus
    notified?: boolean
    createdAt?: Date | string
    assignedTo?: TechnicianAssignementCreateNestedManyWithoutInterventionRequestInput
    Interventions?: InterventionsCreateNestedManyWithoutInterventionRequestInput
    creator: UserCreateNestedOneWithoutInterventionRequestsInput
  }

  export type InterventionRequestUncheckedCreateWithoutReportInput = {
    id?: number
    title: string
    deadline: string
    status: $Enums.InterventionRequestStatus
    createdBy: number
    notified?: boolean
    createdAt?: Date | string
    assignedTo?: TechnicianAssignementUncheckedCreateNestedManyWithoutInterventionRequestInput
    Interventions?: InterventionsUncheckedCreateNestedManyWithoutInterventionRequestInput
  }

  export type InterventionRequestCreateOrConnectWithoutReportInput = {
    where: InterventionRequestWhereUniqueInput
    create: XOR<InterventionRequestCreateWithoutReportInput, InterventionRequestUncheckedCreateWithoutReportInput>
  }

  export type InterventionRequestCreateManyReportInputEnvelope = {
    data: InterventionRequestCreateManyReportInput | InterventionRequestCreateManyReportInput[]
  }

  export type UserUpsertWithoutReportsInput = {
    update: XOR<UserUpdateWithoutReportsInput, UserUncheckedUpdateWithoutReportsInput>
    create: XOR<UserCreateWithoutReportsInput, UserUncheckedCreateWithoutReportsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutReportsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutReportsInput, UserUncheckedUpdateWithoutReportsInput>
  }

  export type UserUpdateWithoutReportsInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    approvalStatus?: EnumApprovalStatusFieldUpdateOperationsInput | $Enums.ApprovalStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    technicianData?: TechnicianUpdateOneWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    interventionRequests?: InterventionRequestUpdateManyWithoutCreatorNestedInput
    createdSchedules?: ScheduleUpdateManyWithoutSchedulerNestedInput
  }

  export type UserUncheckedUpdateWithoutReportsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    approvalStatus?: EnumApprovalStatusFieldUpdateOperationsInput | $Enums.ApprovalStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    technicianData?: TechnicianUncheckedUpdateOneWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    interventionRequests?: InterventionRequestUncheckedUpdateManyWithoutCreatorNestedInput
    createdSchedules?: ScheduleUncheckedUpdateManyWithoutSchedulerNestedInput
  }

  export type AssetUpsertWithoutReportsInput = {
    update: XOR<AssetUpdateWithoutReportsInput, AssetUncheckedUpdateWithoutReportsInput>
    create: XOR<AssetCreateWithoutReportsInput, AssetUncheckedCreateWithoutReportsInput>
    where?: AssetWhereInput
  }

  export type AssetUpdateToOneWithWhereWithoutReportsInput = {
    where?: AssetWhereInput
    data: XOR<AssetUpdateWithoutReportsInput, AssetUncheckedUpdateWithoutReportsInput>
  }

  export type AssetUpdateWithoutReportsInput = {
    name?: StringFieldUpdateOperationsInput | string
    inventoryCode?: StringFieldUpdateOperationsInput | string
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    type?: EnumAssetTypeFieldUpdateOperationsInput | $Enums.AssetType
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subAssets?: AssetUpdateManyWithoutLocationNestedInput
    assignements?: TechnicianAssignementUpdateManyWithoutLocationNestedInput
    location?: AssetUpdateOneWithoutSubAssetsNestedInput
    category?: CategoryUpdateOneWithoutAssetsNestedInput
    schedules?: ScheduleUpdateManyWithoutAssetNestedInput
  }

  export type AssetUncheckedUpdateWithoutReportsInput = {
    id?: IntFieldUpdateOperationsInput | number
    locationId?: NullableIntFieldUpdateOperationsInput | number | null
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    name?: StringFieldUpdateOperationsInput | string
    inventoryCode?: StringFieldUpdateOperationsInput | string
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    type?: EnumAssetTypeFieldUpdateOperationsInput | $Enums.AssetType
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subAssets?: AssetUncheckedUpdateManyWithoutLocationNestedInput
    assignements?: TechnicianAssignementUncheckedUpdateManyWithoutLocationNestedInput
    schedules?: ScheduleUncheckedUpdateManyWithoutAssetNestedInput
  }

  export type CategoryUpsertWithoutReportInput = {
    update: XOR<CategoryUpdateWithoutReportInput, CategoryUncheckedUpdateWithoutReportInput>
    create: XOR<CategoryCreateWithoutReportInput, CategoryUncheckedCreateWithoutReportInput>
    where?: CategoryWhereInput
  }

  export type CategoryUpdateToOneWithWhereWithoutReportInput = {
    where?: CategoryWhereInput
    data: XOR<CategoryUpdateWithoutReportInput, CategoryUncheckedUpdateWithoutReportInput>
  }

  export type CategoryUpdateWithoutReportInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assets?: AssetUpdateManyWithoutCategoryNestedInput
    children?: CategoryUpdateManyWithoutParentNestedInput
    parent?: CategoryUpdateOneWithoutChildrenNestedInput
    ancestors?: CategoryClosureUpdateManyWithoutAncestorNestedInput
    descendants?: CategoryClosureUpdateManyWithoutDescendantNestedInput
    schedules?: ScheduleUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateWithoutReportInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assets?: AssetUncheckedUpdateManyWithoutCategoryNestedInput
    children?: CategoryUncheckedUpdateManyWithoutParentNestedInput
    ancestors?: CategoryClosureUncheckedUpdateManyWithoutAncestorNestedInput
    descendants?: CategoryClosureUncheckedUpdateManyWithoutDescendantNestedInput
    schedules?: ScheduleUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type InterventionRequestUpsertWithWhereUniqueWithoutReportInput = {
    where: InterventionRequestWhereUniqueInput
    update: XOR<InterventionRequestUpdateWithoutReportInput, InterventionRequestUncheckedUpdateWithoutReportInput>
    create: XOR<InterventionRequestCreateWithoutReportInput, InterventionRequestUncheckedCreateWithoutReportInput>
  }

  export type InterventionRequestUpdateWithWhereUniqueWithoutReportInput = {
    where: InterventionRequestWhereUniqueInput
    data: XOR<InterventionRequestUpdateWithoutReportInput, InterventionRequestUncheckedUpdateWithoutReportInput>
  }

  export type InterventionRequestUpdateManyWithWhereWithoutReportInput = {
    where: InterventionRequestScalarWhereInput
    data: XOR<InterventionRequestUpdateManyMutationInput, InterventionRequestUncheckedUpdateManyWithoutReportInput>
  }

  export type InterventionRequestScalarWhereInput = {
    AND?: InterventionRequestScalarWhereInput | InterventionRequestScalarWhereInput[]
    OR?: InterventionRequestScalarWhereInput[]
    NOT?: InterventionRequestScalarWhereInput | InterventionRequestScalarWhereInput[]
    id?: IntFilter<"InterventionRequest"> | number
    reportId?: IntFilter<"InterventionRequest"> | number
    title?: StringFilter<"InterventionRequest"> | string
    deadline?: StringFilter<"InterventionRequest"> | string
    status?: EnumInterventionRequestStatusFilter<"InterventionRequest"> | $Enums.InterventionRequestStatus
    createdBy?: IntFilter<"InterventionRequest"> | number
    notified?: BoolFilter<"InterventionRequest"> | boolean
    createdAt?: DateTimeFilter<"InterventionRequest"> | Date | string
  }

  export type AssetCreateWithoutSchedulesInput = {
    name: string
    inventoryCode: string
    status: $Enums.AssetStatus
    type: $Enums.AssetType
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    subAssets?: AssetCreateNestedManyWithoutLocationInput
    reports?: ReportCreateNestedManyWithoutAssetInput
    assignements?: TechnicianAssignementCreateNestedManyWithoutLocationInput
    location?: AssetCreateNestedOneWithoutSubAssetsInput
    category?: CategoryCreateNestedOneWithoutAssetsInput
  }

  export type AssetUncheckedCreateWithoutSchedulesInput = {
    id?: number
    locationId?: number | null
    categoryId?: number | null
    name: string
    inventoryCode: string
    status: $Enums.AssetStatus
    type: $Enums.AssetType
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    subAssets?: AssetUncheckedCreateNestedManyWithoutLocationInput
    reports?: ReportUncheckedCreateNestedManyWithoutAssetInput
    assignements?: TechnicianAssignementUncheckedCreateNestedManyWithoutLocationInput
  }

  export type AssetCreateOrConnectWithoutSchedulesInput = {
    where: AssetWhereUniqueInput
    create: XOR<AssetCreateWithoutSchedulesInput, AssetUncheckedCreateWithoutSchedulesInput>
  }

  export type CategoryCreateWithoutSchedulesInput = {
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    assets?: AssetCreateNestedManyWithoutCategoryInput
    children?: CategoryCreateNestedManyWithoutParentInput
    parent?: CategoryCreateNestedOneWithoutChildrenInput
    Report?: ReportCreateNestedManyWithoutCategoryInput
    ancestors?: CategoryClosureCreateNestedManyWithoutAncestorInput
    descendants?: CategoryClosureCreateNestedManyWithoutDescendantInput
  }

  export type CategoryUncheckedCreateWithoutSchedulesInput = {
    id?: number
    name: string
    description?: string | null
    parentId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    assets?: AssetUncheckedCreateNestedManyWithoutCategoryInput
    children?: CategoryUncheckedCreateNestedManyWithoutParentInput
    Report?: ReportUncheckedCreateNestedManyWithoutCategoryInput
    ancestors?: CategoryClosureUncheckedCreateNestedManyWithoutAncestorInput
    descendants?: CategoryClosureUncheckedCreateNestedManyWithoutDescendantInput
  }

  export type CategoryCreateOrConnectWithoutSchedulesInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutSchedulesInput, CategoryUncheckedCreateWithoutSchedulesInput>
  }

  export type UserCreateWithoutCreatedSchedulesInput = {
    name: string
    email: string
    password: string
    avatarUrl?: string | null
    role?: $Enums.Role
    approvalStatus?: $Enums.ApprovalStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    technicianData?: TechnicianCreateNestedOneWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    reports?: ReportCreateNestedManyWithoutReporterInput
    interventionRequests?: InterventionRequestCreateNestedManyWithoutCreatorInput
  }

  export type UserUncheckedCreateWithoutCreatedSchedulesInput = {
    id?: number
    name: string
    email: string
    password: string
    avatarUrl?: string | null
    role?: $Enums.Role
    approvalStatus?: $Enums.ApprovalStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    technicianData?: TechnicianUncheckedCreateNestedOneWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    reports?: ReportUncheckedCreateNestedManyWithoutReporterInput
    interventionRequests?: InterventionRequestUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type UserCreateOrConnectWithoutCreatedSchedulesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedSchedulesInput, UserUncheckedCreateWithoutCreatedSchedulesInput>
  }

  export type AssetUpsertWithoutSchedulesInput = {
    update: XOR<AssetUpdateWithoutSchedulesInput, AssetUncheckedUpdateWithoutSchedulesInput>
    create: XOR<AssetCreateWithoutSchedulesInput, AssetUncheckedCreateWithoutSchedulesInput>
    where?: AssetWhereInput
  }

  export type AssetUpdateToOneWithWhereWithoutSchedulesInput = {
    where?: AssetWhereInput
    data: XOR<AssetUpdateWithoutSchedulesInput, AssetUncheckedUpdateWithoutSchedulesInput>
  }

  export type AssetUpdateWithoutSchedulesInput = {
    name?: StringFieldUpdateOperationsInput | string
    inventoryCode?: StringFieldUpdateOperationsInput | string
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    type?: EnumAssetTypeFieldUpdateOperationsInput | $Enums.AssetType
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subAssets?: AssetUpdateManyWithoutLocationNestedInput
    reports?: ReportUpdateManyWithoutAssetNestedInput
    assignements?: TechnicianAssignementUpdateManyWithoutLocationNestedInput
    location?: AssetUpdateOneWithoutSubAssetsNestedInput
    category?: CategoryUpdateOneWithoutAssetsNestedInput
  }

  export type AssetUncheckedUpdateWithoutSchedulesInput = {
    id?: IntFieldUpdateOperationsInput | number
    locationId?: NullableIntFieldUpdateOperationsInput | number | null
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    name?: StringFieldUpdateOperationsInput | string
    inventoryCode?: StringFieldUpdateOperationsInput | string
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    type?: EnumAssetTypeFieldUpdateOperationsInput | $Enums.AssetType
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subAssets?: AssetUncheckedUpdateManyWithoutLocationNestedInput
    reports?: ReportUncheckedUpdateManyWithoutAssetNestedInput
    assignements?: TechnicianAssignementUncheckedUpdateManyWithoutLocationNestedInput
  }

  export type CategoryUpsertWithoutSchedulesInput = {
    update: XOR<CategoryUpdateWithoutSchedulesInput, CategoryUncheckedUpdateWithoutSchedulesInput>
    create: XOR<CategoryCreateWithoutSchedulesInput, CategoryUncheckedCreateWithoutSchedulesInput>
    where?: CategoryWhereInput
  }

  export type CategoryUpdateToOneWithWhereWithoutSchedulesInput = {
    where?: CategoryWhereInput
    data: XOR<CategoryUpdateWithoutSchedulesInput, CategoryUncheckedUpdateWithoutSchedulesInput>
  }

  export type CategoryUpdateWithoutSchedulesInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assets?: AssetUpdateManyWithoutCategoryNestedInput
    children?: CategoryUpdateManyWithoutParentNestedInput
    parent?: CategoryUpdateOneWithoutChildrenNestedInput
    Report?: ReportUpdateManyWithoutCategoryNestedInput
    ancestors?: CategoryClosureUpdateManyWithoutAncestorNestedInput
    descendants?: CategoryClosureUpdateManyWithoutDescendantNestedInput
  }

  export type CategoryUncheckedUpdateWithoutSchedulesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assets?: AssetUncheckedUpdateManyWithoutCategoryNestedInput
    children?: CategoryUncheckedUpdateManyWithoutParentNestedInput
    Report?: ReportUncheckedUpdateManyWithoutCategoryNestedInput
    ancestors?: CategoryClosureUncheckedUpdateManyWithoutAncestorNestedInput
    descendants?: CategoryClosureUncheckedUpdateManyWithoutDescendantNestedInput
  }

  export type UserUpsertWithoutCreatedSchedulesInput = {
    update: XOR<UserUpdateWithoutCreatedSchedulesInput, UserUncheckedUpdateWithoutCreatedSchedulesInput>
    create: XOR<UserCreateWithoutCreatedSchedulesInput, UserUncheckedCreateWithoutCreatedSchedulesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedSchedulesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedSchedulesInput, UserUncheckedUpdateWithoutCreatedSchedulesInput>
  }

  export type UserUpdateWithoutCreatedSchedulesInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    approvalStatus?: EnumApprovalStatusFieldUpdateOperationsInput | $Enums.ApprovalStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    technicianData?: TechnicianUpdateOneWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    reports?: ReportUpdateManyWithoutReporterNestedInput
    interventionRequests?: InterventionRequestUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedSchedulesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    approvalStatus?: EnumApprovalStatusFieldUpdateOperationsInput | $Enums.ApprovalStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    technicianData?: TechnicianUncheckedUpdateOneWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    reports?: ReportUncheckedUpdateManyWithoutReporterNestedInput
    interventionRequests?: InterventionRequestUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type TechnicianCreateWithoutUserInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    availabilities?: TechnicianAvailabilityCreateNestedManyWithoutTechnicianInput
    profession?: ProfessionCreateNestedOneWithoutTechniciansInput
    TechnicianAssignements?: TechnicianAssignementCreateNestedManyWithoutTechnicianInput
    Interventions?: InterventionsCreateNestedManyWithoutTechnicianInput
  }

  export type TechnicianUncheckedCreateWithoutUserInput = {
    professionId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    availabilities?: TechnicianAvailabilityUncheckedCreateNestedManyWithoutTechnicianInput
    TechnicianAssignements?: TechnicianAssignementUncheckedCreateNestedManyWithoutTechnicianInput
    Interventions?: InterventionsUncheckedCreateNestedManyWithoutTechnicianInput
  }

  export type TechnicianCreateOrConnectWithoutUserInput = {
    where: TechnicianWhereUniqueInput
    create: XOR<TechnicianCreateWithoutUserInput, TechnicianUncheckedCreateWithoutUserInput>
  }

  export type NotificationCreateWithoutUserInput = {
    title: string
    message: string
    read?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationUncheckedCreateWithoutUserInput = {
    id?: number
    title: string
    message: string
    read?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationCreateOrConnectWithoutUserInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationCreateManyUserInputEnvelope = {
    data: NotificationCreateManyUserInput | NotificationCreateManyUserInput[]
  }

  export type ReportCreateWithoutReporterInput = {
    description?: string | null
    imageUrl?: string | null
    type: $Enums.OperationType
    status: $Enums.ReportStatus
    priority: $Enums.Priority
    createdAt?: Date | string
    updatedAt?: Date | string
    asset?: AssetCreateNestedOneWithoutReportsInput
    category?: CategoryCreateNestedOneWithoutReportInput
    interventionRequests?: InterventionRequestCreateNestedManyWithoutReportInput
  }

  export type ReportUncheckedCreateWithoutReporterInput = {
    id?: number
    assetId?: number | null
    categoryId?: number | null
    description?: string | null
    imageUrl?: string | null
    type: $Enums.OperationType
    status: $Enums.ReportStatus
    priority: $Enums.Priority
    createdAt?: Date | string
    updatedAt?: Date | string
    interventionRequests?: InterventionRequestUncheckedCreateNestedManyWithoutReportInput
  }

  export type ReportCreateOrConnectWithoutReporterInput = {
    where: ReportWhereUniqueInput
    create: XOR<ReportCreateWithoutReporterInput, ReportUncheckedCreateWithoutReporterInput>
  }

  export type ReportCreateManyReporterInputEnvelope = {
    data: ReportCreateManyReporterInput | ReportCreateManyReporterInput[]
  }

  export type InterventionRequestCreateWithoutCreatorInput = {
    title: string
    deadline: string
    status: $Enums.InterventionRequestStatus
    notified?: boolean
    createdAt?: Date | string
    assignedTo?: TechnicianAssignementCreateNestedManyWithoutInterventionRequestInput
    Interventions?: InterventionsCreateNestedManyWithoutInterventionRequestInput
    report: ReportCreateNestedOneWithoutInterventionRequestsInput
  }

  export type InterventionRequestUncheckedCreateWithoutCreatorInput = {
    id?: number
    reportId: number
    title: string
    deadline: string
    status: $Enums.InterventionRequestStatus
    notified?: boolean
    createdAt?: Date | string
    assignedTo?: TechnicianAssignementUncheckedCreateNestedManyWithoutInterventionRequestInput
    Interventions?: InterventionsUncheckedCreateNestedManyWithoutInterventionRequestInput
  }

  export type InterventionRequestCreateOrConnectWithoutCreatorInput = {
    where: InterventionRequestWhereUniqueInput
    create: XOR<InterventionRequestCreateWithoutCreatorInput, InterventionRequestUncheckedCreateWithoutCreatorInput>
  }

  export type InterventionRequestCreateManyCreatorInputEnvelope = {
    data: InterventionRequestCreateManyCreatorInput | InterventionRequestCreateManyCreatorInput[]
  }

  export type ScheduleCreateWithoutSchedulerInput = {
    description?: string | null
    lastMaintenanceDate: string
    frequency: number
    priority: $Enums.Priority
    createdAt?: Date | string
    updatedAt?: Date | string
    asset?: AssetCreateNestedOneWithoutSchedulesInput
    category?: CategoryCreateNestedOneWithoutSchedulesInput
  }

  export type ScheduleUncheckedCreateWithoutSchedulerInput = {
    id?: number
    assetId?: number | null
    categoryId?: number | null
    description?: string | null
    lastMaintenanceDate: string
    frequency: number
    priority: $Enums.Priority
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ScheduleCreateOrConnectWithoutSchedulerInput = {
    where: ScheduleWhereUniqueInput
    create: XOR<ScheduleCreateWithoutSchedulerInput, ScheduleUncheckedCreateWithoutSchedulerInput>
  }

  export type ScheduleCreateManySchedulerInputEnvelope = {
    data: ScheduleCreateManySchedulerInput | ScheduleCreateManySchedulerInput[]
  }

  export type TechnicianUpsertWithoutUserInput = {
    update: XOR<TechnicianUpdateWithoutUserInput, TechnicianUncheckedUpdateWithoutUserInput>
    create: XOR<TechnicianCreateWithoutUserInput, TechnicianUncheckedCreateWithoutUserInput>
    where?: TechnicianWhereInput
  }

  export type TechnicianUpdateToOneWithWhereWithoutUserInput = {
    where?: TechnicianWhereInput
    data: XOR<TechnicianUpdateWithoutUserInput, TechnicianUncheckedUpdateWithoutUserInput>
  }

  export type TechnicianUpdateWithoutUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    availabilities?: TechnicianAvailabilityUpdateManyWithoutTechnicianNestedInput
    profession?: ProfessionUpdateOneWithoutTechniciansNestedInput
    TechnicianAssignements?: TechnicianAssignementUpdateManyWithoutTechnicianNestedInput
    Interventions?: InterventionsUpdateManyWithoutTechnicianNestedInput
  }

  export type TechnicianUncheckedUpdateWithoutUserInput = {
    professionId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    availabilities?: TechnicianAvailabilityUncheckedUpdateManyWithoutTechnicianNestedInput
    TechnicianAssignements?: TechnicianAssignementUncheckedUpdateManyWithoutTechnicianNestedInput
    Interventions?: InterventionsUncheckedUpdateManyWithoutTechnicianNestedInput
  }

  export type NotificationUpsertWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    update: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationUpdateWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    data: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
  }

  export type NotificationUpdateManyWithWhereWithoutUserInput = {
    where: NotificationScalarWhereInput
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyWithoutUserInput>
  }

  export type NotificationScalarWhereInput = {
    AND?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    OR?: NotificationScalarWhereInput[]
    NOT?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    id?: IntFilter<"Notification"> | number
    userId?: IntFilter<"Notification"> | number
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    read?: BoolFilter<"Notification"> | boolean
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    updatedAt?: DateTimeFilter<"Notification"> | Date | string
  }

  export type ReportUpsertWithWhereUniqueWithoutReporterInput = {
    where: ReportWhereUniqueInput
    update: XOR<ReportUpdateWithoutReporterInput, ReportUncheckedUpdateWithoutReporterInput>
    create: XOR<ReportCreateWithoutReporterInput, ReportUncheckedCreateWithoutReporterInput>
  }

  export type ReportUpdateWithWhereUniqueWithoutReporterInput = {
    where: ReportWhereUniqueInput
    data: XOR<ReportUpdateWithoutReporterInput, ReportUncheckedUpdateWithoutReporterInput>
  }

  export type ReportUpdateManyWithWhereWithoutReporterInput = {
    where: ReportScalarWhereInput
    data: XOR<ReportUpdateManyMutationInput, ReportUncheckedUpdateManyWithoutReporterInput>
  }

  export type InterventionRequestUpsertWithWhereUniqueWithoutCreatorInput = {
    where: InterventionRequestWhereUniqueInput
    update: XOR<InterventionRequestUpdateWithoutCreatorInput, InterventionRequestUncheckedUpdateWithoutCreatorInput>
    create: XOR<InterventionRequestCreateWithoutCreatorInput, InterventionRequestUncheckedCreateWithoutCreatorInput>
  }

  export type InterventionRequestUpdateWithWhereUniqueWithoutCreatorInput = {
    where: InterventionRequestWhereUniqueInput
    data: XOR<InterventionRequestUpdateWithoutCreatorInput, InterventionRequestUncheckedUpdateWithoutCreatorInput>
  }

  export type InterventionRequestUpdateManyWithWhereWithoutCreatorInput = {
    where: InterventionRequestScalarWhereInput
    data: XOR<InterventionRequestUpdateManyMutationInput, InterventionRequestUncheckedUpdateManyWithoutCreatorInput>
  }

  export type ScheduleUpsertWithWhereUniqueWithoutSchedulerInput = {
    where: ScheduleWhereUniqueInput
    update: XOR<ScheduleUpdateWithoutSchedulerInput, ScheduleUncheckedUpdateWithoutSchedulerInput>
    create: XOR<ScheduleCreateWithoutSchedulerInput, ScheduleUncheckedCreateWithoutSchedulerInput>
  }

  export type ScheduleUpdateWithWhereUniqueWithoutSchedulerInput = {
    where: ScheduleWhereUniqueInput
    data: XOR<ScheduleUpdateWithoutSchedulerInput, ScheduleUncheckedUpdateWithoutSchedulerInput>
  }

  export type ScheduleUpdateManyWithWhereWithoutSchedulerInput = {
    where: ScheduleScalarWhereInput
    data: XOR<ScheduleUpdateManyMutationInput, ScheduleUncheckedUpdateManyWithoutSchedulerInput>
  }

  export type TechnicianAvailabilityCreateWithoutTechnicianInput = {
    day: $Enums.Day
    startHour: number
    endHour: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TechnicianAvailabilityUncheckedCreateWithoutTechnicianInput = {
    day: $Enums.Day
    startHour: number
    endHour: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TechnicianAvailabilityCreateOrConnectWithoutTechnicianInput = {
    where: TechnicianAvailabilityWhereUniqueInput
    create: XOR<TechnicianAvailabilityCreateWithoutTechnicianInput, TechnicianAvailabilityUncheckedCreateWithoutTechnicianInput>
  }

  export type TechnicianAvailabilityCreateManyTechnicianInputEnvelope = {
    data: TechnicianAvailabilityCreateManyTechnicianInput | TechnicianAvailabilityCreateManyTechnicianInput[]
  }

  export type UserCreateWithoutTechnicianDataInput = {
    name: string
    email: string
    password: string
    avatarUrl?: string | null
    role?: $Enums.Role
    approvalStatus?: $Enums.ApprovalStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    notifications?: NotificationCreateNestedManyWithoutUserInput
    reports?: ReportCreateNestedManyWithoutReporterInput
    interventionRequests?: InterventionRequestCreateNestedManyWithoutCreatorInput
    createdSchedules?: ScheduleCreateNestedManyWithoutSchedulerInput
  }

  export type UserUncheckedCreateWithoutTechnicianDataInput = {
    id?: number
    name: string
    email: string
    password: string
    avatarUrl?: string | null
    role?: $Enums.Role
    approvalStatus?: $Enums.ApprovalStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    reports?: ReportUncheckedCreateNestedManyWithoutReporterInput
    interventionRequests?: InterventionRequestUncheckedCreateNestedManyWithoutCreatorInput
    createdSchedules?: ScheduleUncheckedCreateNestedManyWithoutSchedulerInput
  }

  export type UserCreateOrConnectWithoutTechnicianDataInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTechnicianDataInput, UserUncheckedCreateWithoutTechnicianDataInput>
  }

  export type ProfessionCreateWithoutTechniciansInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProfessionUncheckedCreateWithoutTechniciansInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProfessionCreateOrConnectWithoutTechniciansInput = {
    where: ProfessionWhereUniqueInput
    create: XOR<ProfessionCreateWithoutTechniciansInput, ProfessionUncheckedCreateWithoutTechniciansInput>
  }

  export type TechnicianAssignementCreateWithoutTechnicianInput = {
    completed?: boolean
    details?: string | null
    createdAt?: Date | string
    interventionRequest: InterventionRequestCreateNestedOneWithoutAssignedToInput
    location?: AssetCreateNestedOneWithoutAssignementsInput
  }

  export type TechnicianAssignementUncheckedCreateWithoutTechnicianInput = {
    id?: number
    interventionRequestId: number
    locationId?: number | null
    completed?: boolean
    details?: string | null
    createdAt?: Date | string
  }

  export type TechnicianAssignementCreateOrConnectWithoutTechnicianInput = {
    where: TechnicianAssignementWhereUniqueInput
    create: XOR<TechnicianAssignementCreateWithoutTechnicianInput, TechnicianAssignementUncheckedCreateWithoutTechnicianInput>
  }

  export type TechnicianAssignementCreateManyTechnicianInputEnvelope = {
    data: TechnicianAssignementCreateManyTechnicianInput | TechnicianAssignementCreateManyTechnicianInput[]
  }

  export type InterventionsCreateWithoutTechnicianInput = {
    description: string
    createdAt?: Date | string
    interventionRequest: InterventionRequestCreateNestedOneWithoutInterventionsInput
  }

  export type InterventionsUncheckedCreateWithoutTechnicianInput = {
    id?: number
    interventionRequestId: number
    description: string
    createdAt?: Date | string
  }

  export type InterventionsCreateOrConnectWithoutTechnicianInput = {
    where: InterventionsWhereUniqueInput
    create: XOR<InterventionsCreateWithoutTechnicianInput, InterventionsUncheckedCreateWithoutTechnicianInput>
  }

  export type InterventionsCreateManyTechnicianInputEnvelope = {
    data: InterventionsCreateManyTechnicianInput | InterventionsCreateManyTechnicianInput[]
  }

  export type TechnicianAvailabilityUpsertWithWhereUniqueWithoutTechnicianInput = {
    where: TechnicianAvailabilityWhereUniqueInput
    update: XOR<TechnicianAvailabilityUpdateWithoutTechnicianInput, TechnicianAvailabilityUncheckedUpdateWithoutTechnicianInput>
    create: XOR<TechnicianAvailabilityCreateWithoutTechnicianInput, TechnicianAvailabilityUncheckedCreateWithoutTechnicianInput>
  }

  export type TechnicianAvailabilityUpdateWithWhereUniqueWithoutTechnicianInput = {
    where: TechnicianAvailabilityWhereUniqueInput
    data: XOR<TechnicianAvailabilityUpdateWithoutTechnicianInput, TechnicianAvailabilityUncheckedUpdateWithoutTechnicianInput>
  }

  export type TechnicianAvailabilityUpdateManyWithWhereWithoutTechnicianInput = {
    where: TechnicianAvailabilityScalarWhereInput
    data: XOR<TechnicianAvailabilityUpdateManyMutationInput, TechnicianAvailabilityUncheckedUpdateManyWithoutTechnicianInput>
  }

  export type TechnicianAvailabilityScalarWhereInput = {
    AND?: TechnicianAvailabilityScalarWhereInput | TechnicianAvailabilityScalarWhereInput[]
    OR?: TechnicianAvailabilityScalarWhereInput[]
    NOT?: TechnicianAvailabilityScalarWhereInput | TechnicianAvailabilityScalarWhereInput[]
    technicianId?: IntFilter<"TechnicianAvailability"> | number
    day?: EnumDayFilter<"TechnicianAvailability"> | $Enums.Day
    startHour?: IntFilter<"TechnicianAvailability"> | number
    endHour?: IntFilter<"TechnicianAvailability"> | number
    createdAt?: DateTimeFilter<"TechnicianAvailability"> | Date | string
    updatedAt?: DateTimeFilter<"TechnicianAvailability"> | Date | string
  }

  export type UserUpsertWithoutTechnicianDataInput = {
    update: XOR<UserUpdateWithoutTechnicianDataInput, UserUncheckedUpdateWithoutTechnicianDataInput>
    create: XOR<UserCreateWithoutTechnicianDataInput, UserUncheckedCreateWithoutTechnicianDataInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTechnicianDataInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTechnicianDataInput, UserUncheckedUpdateWithoutTechnicianDataInput>
  }

  export type UserUpdateWithoutTechnicianDataInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    approvalStatus?: EnumApprovalStatusFieldUpdateOperationsInput | $Enums.ApprovalStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    reports?: ReportUpdateManyWithoutReporterNestedInput
    interventionRequests?: InterventionRequestUpdateManyWithoutCreatorNestedInput
    createdSchedules?: ScheduleUpdateManyWithoutSchedulerNestedInput
  }

  export type UserUncheckedUpdateWithoutTechnicianDataInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    approvalStatus?: EnumApprovalStatusFieldUpdateOperationsInput | $Enums.ApprovalStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    reports?: ReportUncheckedUpdateManyWithoutReporterNestedInput
    interventionRequests?: InterventionRequestUncheckedUpdateManyWithoutCreatorNestedInput
    createdSchedules?: ScheduleUncheckedUpdateManyWithoutSchedulerNestedInput
  }

  export type ProfessionUpsertWithoutTechniciansInput = {
    update: XOR<ProfessionUpdateWithoutTechniciansInput, ProfessionUncheckedUpdateWithoutTechniciansInput>
    create: XOR<ProfessionCreateWithoutTechniciansInput, ProfessionUncheckedCreateWithoutTechniciansInput>
    where?: ProfessionWhereInput
  }

  export type ProfessionUpdateToOneWithWhereWithoutTechniciansInput = {
    where?: ProfessionWhereInput
    data: XOR<ProfessionUpdateWithoutTechniciansInput, ProfessionUncheckedUpdateWithoutTechniciansInput>
  }

  export type ProfessionUpdateWithoutTechniciansInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfessionUncheckedUpdateWithoutTechniciansInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TechnicianAssignementUpsertWithWhereUniqueWithoutTechnicianInput = {
    where: TechnicianAssignementWhereUniqueInput
    update: XOR<TechnicianAssignementUpdateWithoutTechnicianInput, TechnicianAssignementUncheckedUpdateWithoutTechnicianInput>
    create: XOR<TechnicianAssignementCreateWithoutTechnicianInput, TechnicianAssignementUncheckedCreateWithoutTechnicianInput>
  }

  export type TechnicianAssignementUpdateWithWhereUniqueWithoutTechnicianInput = {
    where: TechnicianAssignementWhereUniqueInput
    data: XOR<TechnicianAssignementUpdateWithoutTechnicianInput, TechnicianAssignementUncheckedUpdateWithoutTechnicianInput>
  }

  export type TechnicianAssignementUpdateManyWithWhereWithoutTechnicianInput = {
    where: TechnicianAssignementScalarWhereInput
    data: XOR<TechnicianAssignementUpdateManyMutationInput, TechnicianAssignementUncheckedUpdateManyWithoutTechnicianInput>
  }

  export type InterventionsUpsertWithWhereUniqueWithoutTechnicianInput = {
    where: InterventionsWhereUniqueInput
    update: XOR<InterventionsUpdateWithoutTechnicianInput, InterventionsUncheckedUpdateWithoutTechnicianInput>
    create: XOR<InterventionsCreateWithoutTechnicianInput, InterventionsUncheckedCreateWithoutTechnicianInput>
  }

  export type InterventionsUpdateWithWhereUniqueWithoutTechnicianInput = {
    where: InterventionsWhereUniqueInput
    data: XOR<InterventionsUpdateWithoutTechnicianInput, InterventionsUncheckedUpdateWithoutTechnicianInput>
  }

  export type InterventionsUpdateManyWithWhereWithoutTechnicianInput = {
    where: InterventionsScalarWhereInput
    data: XOR<InterventionsUpdateManyMutationInput, InterventionsUncheckedUpdateManyWithoutTechnicianInput>
  }

  export type TechnicianCreateWithoutProfessionInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    availabilities?: TechnicianAvailabilityCreateNestedManyWithoutTechnicianInput
    user: UserCreateNestedOneWithoutTechnicianDataInput
    TechnicianAssignements?: TechnicianAssignementCreateNestedManyWithoutTechnicianInput
    Interventions?: InterventionsCreateNestedManyWithoutTechnicianInput
  }

  export type TechnicianUncheckedCreateWithoutProfessionInput = {
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    availabilities?: TechnicianAvailabilityUncheckedCreateNestedManyWithoutTechnicianInput
    TechnicianAssignements?: TechnicianAssignementUncheckedCreateNestedManyWithoutTechnicianInput
    Interventions?: InterventionsUncheckedCreateNestedManyWithoutTechnicianInput
  }

  export type TechnicianCreateOrConnectWithoutProfessionInput = {
    where: TechnicianWhereUniqueInput
    create: XOR<TechnicianCreateWithoutProfessionInput, TechnicianUncheckedCreateWithoutProfessionInput>
  }

  export type TechnicianCreateManyProfessionInputEnvelope = {
    data: TechnicianCreateManyProfessionInput | TechnicianCreateManyProfessionInput[]
  }

  export type TechnicianUpsertWithWhereUniqueWithoutProfessionInput = {
    where: TechnicianWhereUniqueInput
    update: XOR<TechnicianUpdateWithoutProfessionInput, TechnicianUncheckedUpdateWithoutProfessionInput>
    create: XOR<TechnicianCreateWithoutProfessionInput, TechnicianUncheckedCreateWithoutProfessionInput>
  }

  export type TechnicianUpdateWithWhereUniqueWithoutProfessionInput = {
    where: TechnicianWhereUniqueInput
    data: XOR<TechnicianUpdateWithoutProfessionInput, TechnicianUncheckedUpdateWithoutProfessionInput>
  }

  export type TechnicianUpdateManyWithWhereWithoutProfessionInput = {
    where: TechnicianScalarWhereInput
    data: XOR<TechnicianUpdateManyMutationInput, TechnicianUncheckedUpdateManyWithoutProfessionInput>
  }

  export type TechnicianScalarWhereInput = {
    AND?: TechnicianScalarWhereInput | TechnicianScalarWhereInput[]
    OR?: TechnicianScalarWhereInput[]
    NOT?: TechnicianScalarWhereInput | TechnicianScalarWhereInput[]
    userId?: IntFilter<"Technician"> | number
    professionId?: IntNullableFilter<"Technician"> | number | null
    createdAt?: DateTimeFilter<"Technician"> | Date | string
    updatedAt?: DateTimeFilter<"Technician"> | Date | string
  }

  export type TechnicianCreateWithoutAvailabilitiesInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutTechnicianDataInput
    profession?: ProfessionCreateNestedOneWithoutTechniciansInput
    TechnicianAssignements?: TechnicianAssignementCreateNestedManyWithoutTechnicianInput
    Interventions?: InterventionsCreateNestedManyWithoutTechnicianInput
  }

  export type TechnicianUncheckedCreateWithoutAvailabilitiesInput = {
    userId: number
    professionId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    TechnicianAssignements?: TechnicianAssignementUncheckedCreateNestedManyWithoutTechnicianInput
    Interventions?: InterventionsUncheckedCreateNestedManyWithoutTechnicianInput
  }

  export type TechnicianCreateOrConnectWithoutAvailabilitiesInput = {
    where: TechnicianWhereUniqueInput
    create: XOR<TechnicianCreateWithoutAvailabilitiesInput, TechnicianUncheckedCreateWithoutAvailabilitiesInput>
  }

  export type TechnicianUpsertWithoutAvailabilitiesInput = {
    update: XOR<TechnicianUpdateWithoutAvailabilitiesInput, TechnicianUncheckedUpdateWithoutAvailabilitiesInput>
    create: XOR<TechnicianCreateWithoutAvailabilitiesInput, TechnicianUncheckedCreateWithoutAvailabilitiesInput>
    where?: TechnicianWhereInput
  }

  export type TechnicianUpdateToOneWithWhereWithoutAvailabilitiesInput = {
    where?: TechnicianWhereInput
    data: XOR<TechnicianUpdateWithoutAvailabilitiesInput, TechnicianUncheckedUpdateWithoutAvailabilitiesInput>
  }

  export type TechnicianUpdateWithoutAvailabilitiesInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutTechnicianDataNestedInput
    profession?: ProfessionUpdateOneWithoutTechniciansNestedInput
    TechnicianAssignements?: TechnicianAssignementUpdateManyWithoutTechnicianNestedInput
    Interventions?: InterventionsUpdateManyWithoutTechnicianNestedInput
  }

  export type TechnicianUncheckedUpdateWithoutAvailabilitiesInput = {
    userId?: IntFieldUpdateOperationsInput | number
    professionId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    TechnicianAssignements?: TechnicianAssignementUncheckedUpdateManyWithoutTechnicianNestedInput
    Interventions?: InterventionsUncheckedUpdateManyWithoutTechnicianNestedInput
  }

  export type UserCreateWithoutNotificationsInput = {
    name: string
    email: string
    password: string
    avatarUrl?: string | null
    role?: $Enums.Role
    approvalStatus?: $Enums.ApprovalStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    technicianData?: TechnicianCreateNestedOneWithoutUserInput
    reports?: ReportCreateNestedManyWithoutReporterInput
    interventionRequests?: InterventionRequestCreateNestedManyWithoutCreatorInput
    createdSchedules?: ScheduleCreateNestedManyWithoutSchedulerInput
  }

  export type UserUncheckedCreateWithoutNotificationsInput = {
    id?: number
    name: string
    email: string
    password: string
    avatarUrl?: string | null
    role?: $Enums.Role
    approvalStatus?: $Enums.ApprovalStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    technicianData?: TechnicianUncheckedCreateNestedOneWithoutUserInput
    reports?: ReportUncheckedCreateNestedManyWithoutReporterInput
    interventionRequests?: InterventionRequestUncheckedCreateNestedManyWithoutCreatorInput
    createdSchedules?: ScheduleUncheckedCreateNestedManyWithoutSchedulerInput
  }

  export type UserCreateOrConnectWithoutNotificationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
  }

  export type UserUpsertWithoutNotificationsInput = {
    update: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutNotificationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type UserUpdateWithoutNotificationsInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    approvalStatus?: EnumApprovalStatusFieldUpdateOperationsInput | $Enums.ApprovalStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    technicianData?: TechnicianUpdateOneWithoutUserNestedInput
    reports?: ReportUpdateManyWithoutReporterNestedInput
    interventionRequests?: InterventionRequestUpdateManyWithoutCreatorNestedInput
    createdSchedules?: ScheduleUpdateManyWithoutSchedulerNestedInput
  }

  export type UserUncheckedUpdateWithoutNotificationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    approvalStatus?: EnumApprovalStatusFieldUpdateOperationsInput | $Enums.ApprovalStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    technicianData?: TechnicianUncheckedUpdateOneWithoutUserNestedInput
    reports?: ReportUncheckedUpdateManyWithoutReporterNestedInput
    interventionRequests?: InterventionRequestUncheckedUpdateManyWithoutCreatorNestedInput
    createdSchedules?: ScheduleUncheckedUpdateManyWithoutSchedulerNestedInput
  }

  export type AssetCreateManyLocationInput = {
    id?: number
    categoryId?: number | null
    name: string
    inventoryCode: string
    status: $Enums.AssetStatus
    type: $Enums.AssetType
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReportCreateManyAssetInput = {
    id?: number
    reporterId: number
    categoryId?: number | null
    description?: string | null
    imageUrl?: string | null
    type: $Enums.OperationType
    status: $Enums.ReportStatus
    priority: $Enums.Priority
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TechnicianAssignementCreateManyLocationInput = {
    id?: number
    technicianId: number
    interventionRequestId: number
    completed?: boolean
    details?: string | null
    createdAt?: Date | string
  }

  export type ScheduleCreateManyAssetInput = {
    id?: number
    schedulerId: number
    categoryId?: number | null
    description?: string | null
    lastMaintenanceDate: string
    frequency: number
    priority: $Enums.Priority
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AssetUpdateWithoutLocationInput = {
    name?: StringFieldUpdateOperationsInput | string
    inventoryCode?: StringFieldUpdateOperationsInput | string
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    type?: EnumAssetTypeFieldUpdateOperationsInput | $Enums.AssetType
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subAssets?: AssetUpdateManyWithoutLocationNestedInput
    reports?: ReportUpdateManyWithoutAssetNestedInput
    assignements?: TechnicianAssignementUpdateManyWithoutLocationNestedInput
    category?: CategoryUpdateOneWithoutAssetsNestedInput
    schedules?: ScheduleUpdateManyWithoutAssetNestedInput
  }

  export type AssetUncheckedUpdateWithoutLocationInput = {
    id?: IntFieldUpdateOperationsInput | number
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    name?: StringFieldUpdateOperationsInput | string
    inventoryCode?: StringFieldUpdateOperationsInput | string
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    type?: EnumAssetTypeFieldUpdateOperationsInput | $Enums.AssetType
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subAssets?: AssetUncheckedUpdateManyWithoutLocationNestedInput
    reports?: ReportUncheckedUpdateManyWithoutAssetNestedInput
    assignements?: TechnicianAssignementUncheckedUpdateManyWithoutLocationNestedInput
    schedules?: ScheduleUncheckedUpdateManyWithoutAssetNestedInput
  }

  export type AssetUncheckedUpdateManyWithoutLocationInput = {
    id?: IntFieldUpdateOperationsInput | number
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    name?: StringFieldUpdateOperationsInput | string
    inventoryCode?: StringFieldUpdateOperationsInput | string
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    type?: EnumAssetTypeFieldUpdateOperationsInput | $Enums.AssetType
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportUpdateWithoutAssetInput = {
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumOperationTypeFieldUpdateOperationsInput | $Enums.OperationType
    status?: EnumReportStatusFieldUpdateOperationsInput | $Enums.ReportStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reporter?: UserUpdateOneRequiredWithoutReportsNestedInput
    category?: CategoryUpdateOneWithoutReportNestedInput
    interventionRequests?: InterventionRequestUpdateManyWithoutReportNestedInput
  }

  export type ReportUncheckedUpdateWithoutAssetInput = {
    id?: IntFieldUpdateOperationsInput | number
    reporterId?: IntFieldUpdateOperationsInput | number
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumOperationTypeFieldUpdateOperationsInput | $Enums.OperationType
    status?: EnumReportStatusFieldUpdateOperationsInput | $Enums.ReportStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    interventionRequests?: InterventionRequestUncheckedUpdateManyWithoutReportNestedInput
  }

  export type ReportUncheckedUpdateManyWithoutAssetInput = {
    id?: IntFieldUpdateOperationsInput | number
    reporterId?: IntFieldUpdateOperationsInput | number
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumOperationTypeFieldUpdateOperationsInput | $Enums.OperationType
    status?: EnumReportStatusFieldUpdateOperationsInput | $Enums.ReportStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TechnicianAssignementUpdateWithoutLocationInput = {
    completed?: BoolFieldUpdateOperationsInput | boolean
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    technician?: TechnicianUpdateOneRequiredWithoutTechnicianAssignementsNestedInput
    interventionRequest?: InterventionRequestUpdateOneRequiredWithoutAssignedToNestedInput
  }

  export type TechnicianAssignementUncheckedUpdateWithoutLocationInput = {
    id?: IntFieldUpdateOperationsInput | number
    technicianId?: IntFieldUpdateOperationsInput | number
    interventionRequestId?: IntFieldUpdateOperationsInput | number
    completed?: BoolFieldUpdateOperationsInput | boolean
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TechnicianAssignementUncheckedUpdateManyWithoutLocationInput = {
    id?: IntFieldUpdateOperationsInput | number
    technicianId?: IntFieldUpdateOperationsInput | number
    interventionRequestId?: IntFieldUpdateOperationsInput | number
    completed?: BoolFieldUpdateOperationsInput | boolean
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScheduleUpdateWithoutAssetInput = {
    description?: NullableStringFieldUpdateOperationsInput | string | null
    lastMaintenanceDate?: StringFieldUpdateOperationsInput | string
    frequency?: IntFieldUpdateOperationsInput | number
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoryUpdateOneWithoutSchedulesNestedInput
    scheduler?: UserUpdateOneRequiredWithoutCreatedSchedulesNestedInput
  }

  export type ScheduleUncheckedUpdateWithoutAssetInput = {
    id?: IntFieldUpdateOperationsInput | number
    schedulerId?: IntFieldUpdateOperationsInput | number
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    lastMaintenanceDate?: StringFieldUpdateOperationsInput | string
    frequency?: IntFieldUpdateOperationsInput | number
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScheduleUncheckedUpdateManyWithoutAssetInput = {
    id?: IntFieldUpdateOperationsInput | number
    schedulerId?: IntFieldUpdateOperationsInput | number
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    lastMaintenanceDate?: StringFieldUpdateOperationsInput | string
    frequency?: IntFieldUpdateOperationsInput | number
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AssetCreateManyCategoryInput = {
    id?: number
    locationId?: number | null
    name: string
    inventoryCode: string
    status: $Enums.AssetStatus
    type: $Enums.AssetType
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CategoryCreateManyParentInput = {
    id?: number
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReportCreateManyCategoryInput = {
    id?: number
    reporterId: number
    assetId?: number | null
    description?: string | null
    imageUrl?: string | null
    type: $Enums.OperationType
    status: $Enums.ReportStatus
    priority: $Enums.Priority
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CategoryClosureCreateManyAncestorInput = {
    descendantId: number
    depth: number
  }

  export type CategoryClosureCreateManyDescendantInput = {
    ancestorId: number
    depth: number
  }

  export type ScheduleCreateManyCategoryInput = {
    id?: number
    assetId?: number | null
    schedulerId: number
    description?: string | null
    lastMaintenanceDate: string
    frequency: number
    priority: $Enums.Priority
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AssetUpdateWithoutCategoryInput = {
    name?: StringFieldUpdateOperationsInput | string
    inventoryCode?: StringFieldUpdateOperationsInput | string
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    type?: EnumAssetTypeFieldUpdateOperationsInput | $Enums.AssetType
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subAssets?: AssetUpdateManyWithoutLocationNestedInput
    reports?: ReportUpdateManyWithoutAssetNestedInput
    assignements?: TechnicianAssignementUpdateManyWithoutLocationNestedInput
    location?: AssetUpdateOneWithoutSubAssetsNestedInput
    schedules?: ScheduleUpdateManyWithoutAssetNestedInput
  }

  export type AssetUncheckedUpdateWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    locationId?: NullableIntFieldUpdateOperationsInput | number | null
    name?: StringFieldUpdateOperationsInput | string
    inventoryCode?: StringFieldUpdateOperationsInput | string
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    type?: EnumAssetTypeFieldUpdateOperationsInput | $Enums.AssetType
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subAssets?: AssetUncheckedUpdateManyWithoutLocationNestedInput
    reports?: ReportUncheckedUpdateManyWithoutAssetNestedInput
    assignements?: TechnicianAssignementUncheckedUpdateManyWithoutLocationNestedInput
    schedules?: ScheduleUncheckedUpdateManyWithoutAssetNestedInput
  }

  export type AssetUncheckedUpdateManyWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    locationId?: NullableIntFieldUpdateOperationsInput | number | null
    name?: StringFieldUpdateOperationsInput | string
    inventoryCode?: StringFieldUpdateOperationsInput | string
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    type?: EnumAssetTypeFieldUpdateOperationsInput | $Enums.AssetType
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CategoryUpdateWithoutParentInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assets?: AssetUpdateManyWithoutCategoryNestedInput
    children?: CategoryUpdateManyWithoutParentNestedInput
    Report?: ReportUpdateManyWithoutCategoryNestedInput
    ancestors?: CategoryClosureUpdateManyWithoutAncestorNestedInput
    descendants?: CategoryClosureUpdateManyWithoutDescendantNestedInput
    schedules?: ScheduleUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateWithoutParentInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assets?: AssetUncheckedUpdateManyWithoutCategoryNestedInput
    children?: CategoryUncheckedUpdateManyWithoutParentNestedInput
    Report?: ReportUncheckedUpdateManyWithoutCategoryNestedInput
    ancestors?: CategoryClosureUncheckedUpdateManyWithoutAncestorNestedInput
    descendants?: CategoryClosureUncheckedUpdateManyWithoutDescendantNestedInput
    schedules?: ScheduleUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateManyWithoutParentInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportUpdateWithoutCategoryInput = {
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumOperationTypeFieldUpdateOperationsInput | $Enums.OperationType
    status?: EnumReportStatusFieldUpdateOperationsInput | $Enums.ReportStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reporter?: UserUpdateOneRequiredWithoutReportsNestedInput
    asset?: AssetUpdateOneWithoutReportsNestedInput
    interventionRequests?: InterventionRequestUpdateManyWithoutReportNestedInput
  }

  export type ReportUncheckedUpdateWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    reporterId?: IntFieldUpdateOperationsInput | number
    assetId?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumOperationTypeFieldUpdateOperationsInput | $Enums.OperationType
    status?: EnumReportStatusFieldUpdateOperationsInput | $Enums.ReportStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    interventionRequests?: InterventionRequestUncheckedUpdateManyWithoutReportNestedInput
  }

  export type ReportUncheckedUpdateManyWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    reporterId?: IntFieldUpdateOperationsInput | number
    assetId?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumOperationTypeFieldUpdateOperationsInput | $Enums.OperationType
    status?: EnumReportStatusFieldUpdateOperationsInput | $Enums.ReportStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CategoryClosureUpdateWithoutAncestorInput = {
    depth?: IntFieldUpdateOperationsInput | number
    descendant?: CategoryUpdateOneRequiredWithoutDescendantsNestedInput
  }

  export type CategoryClosureUncheckedUpdateWithoutAncestorInput = {
    descendantId?: IntFieldUpdateOperationsInput | number
    depth?: IntFieldUpdateOperationsInput | number
  }

  export type CategoryClosureUncheckedUpdateManyWithoutAncestorInput = {
    descendantId?: IntFieldUpdateOperationsInput | number
    depth?: IntFieldUpdateOperationsInput | number
  }

  export type CategoryClosureUpdateWithoutDescendantInput = {
    depth?: IntFieldUpdateOperationsInput | number
    ancestor?: CategoryUpdateOneRequiredWithoutAncestorsNestedInput
  }

  export type CategoryClosureUncheckedUpdateWithoutDescendantInput = {
    ancestorId?: IntFieldUpdateOperationsInput | number
    depth?: IntFieldUpdateOperationsInput | number
  }

  export type CategoryClosureUncheckedUpdateManyWithoutDescendantInput = {
    ancestorId?: IntFieldUpdateOperationsInput | number
    depth?: IntFieldUpdateOperationsInput | number
  }

  export type ScheduleUpdateWithoutCategoryInput = {
    description?: NullableStringFieldUpdateOperationsInput | string | null
    lastMaintenanceDate?: StringFieldUpdateOperationsInput | string
    frequency?: IntFieldUpdateOperationsInput | number
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    asset?: AssetUpdateOneWithoutSchedulesNestedInput
    scheduler?: UserUpdateOneRequiredWithoutCreatedSchedulesNestedInput
  }

  export type ScheduleUncheckedUpdateWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    assetId?: NullableIntFieldUpdateOperationsInput | number | null
    schedulerId?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    lastMaintenanceDate?: StringFieldUpdateOperationsInput | string
    frequency?: IntFieldUpdateOperationsInput | number
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScheduleUncheckedUpdateManyWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    assetId?: NullableIntFieldUpdateOperationsInput | number | null
    schedulerId?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    lastMaintenanceDate?: StringFieldUpdateOperationsInput | string
    frequency?: IntFieldUpdateOperationsInput | number
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TechnicianAssignementCreateManyInterventionRequestInput = {
    id?: number
    technicianId: number
    locationId?: number | null
    completed?: boolean
    details?: string | null
    createdAt?: Date | string
  }

  export type InterventionsCreateManyInterventionRequestInput = {
    id?: number
    technicianId: number
    description: string
    createdAt?: Date | string
  }

  export type TechnicianAssignementUpdateWithoutInterventionRequestInput = {
    completed?: BoolFieldUpdateOperationsInput | boolean
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    technician?: TechnicianUpdateOneRequiredWithoutTechnicianAssignementsNestedInput
    location?: AssetUpdateOneWithoutAssignementsNestedInput
  }

  export type TechnicianAssignementUncheckedUpdateWithoutInterventionRequestInput = {
    id?: IntFieldUpdateOperationsInput | number
    technicianId?: IntFieldUpdateOperationsInput | number
    locationId?: NullableIntFieldUpdateOperationsInput | number | null
    completed?: BoolFieldUpdateOperationsInput | boolean
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TechnicianAssignementUncheckedUpdateManyWithoutInterventionRequestInput = {
    id?: IntFieldUpdateOperationsInput | number
    technicianId?: IntFieldUpdateOperationsInput | number
    locationId?: NullableIntFieldUpdateOperationsInput | number | null
    completed?: BoolFieldUpdateOperationsInput | boolean
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InterventionsUpdateWithoutInterventionRequestInput = {
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    technician?: TechnicianUpdateOneRequiredWithoutInterventionsNestedInput
  }

  export type InterventionsUncheckedUpdateWithoutInterventionRequestInput = {
    id?: IntFieldUpdateOperationsInput | number
    technicianId?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InterventionsUncheckedUpdateManyWithoutInterventionRequestInput = {
    id?: IntFieldUpdateOperationsInput | number
    technicianId?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InterventionRequestCreateManyReportInput = {
    id?: number
    title: string
    deadline: string
    status: $Enums.InterventionRequestStatus
    createdBy: number
    notified?: boolean
    createdAt?: Date | string
  }

  export type InterventionRequestUpdateWithoutReportInput = {
    title?: StringFieldUpdateOperationsInput | string
    deadline?: StringFieldUpdateOperationsInput | string
    status?: EnumInterventionRequestStatusFieldUpdateOperationsInput | $Enums.InterventionRequestStatus
    notified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedTo?: TechnicianAssignementUpdateManyWithoutInterventionRequestNestedInput
    Interventions?: InterventionsUpdateManyWithoutInterventionRequestNestedInput
    creator?: UserUpdateOneRequiredWithoutInterventionRequestsNestedInput
  }

  export type InterventionRequestUncheckedUpdateWithoutReportInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    deadline?: StringFieldUpdateOperationsInput | string
    status?: EnumInterventionRequestStatusFieldUpdateOperationsInput | $Enums.InterventionRequestStatus
    createdBy?: IntFieldUpdateOperationsInput | number
    notified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedTo?: TechnicianAssignementUncheckedUpdateManyWithoutInterventionRequestNestedInput
    Interventions?: InterventionsUncheckedUpdateManyWithoutInterventionRequestNestedInput
  }

  export type InterventionRequestUncheckedUpdateManyWithoutReportInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    deadline?: StringFieldUpdateOperationsInput | string
    status?: EnumInterventionRequestStatusFieldUpdateOperationsInput | $Enums.InterventionRequestStatus
    createdBy?: IntFieldUpdateOperationsInput | number
    notified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationCreateManyUserInput = {
    id?: number
    title: string
    message: string
    read?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReportCreateManyReporterInput = {
    id?: number
    assetId?: number | null
    categoryId?: number | null
    description?: string | null
    imageUrl?: string | null
    type: $Enums.OperationType
    status: $Enums.ReportStatus
    priority: $Enums.Priority
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InterventionRequestCreateManyCreatorInput = {
    id?: number
    reportId: number
    title: string
    deadline: string
    status: $Enums.InterventionRequestStatus
    notified?: boolean
    createdAt?: Date | string
  }

  export type ScheduleCreateManySchedulerInput = {
    id?: number
    assetId?: number | null
    categoryId?: number | null
    description?: string | null
    lastMaintenanceDate: string
    frequency: number
    priority: $Enums.Priority
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationUpdateWithoutUserInput = {
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    read?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    read?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    read?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportUpdateWithoutReporterInput = {
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumOperationTypeFieldUpdateOperationsInput | $Enums.OperationType
    status?: EnumReportStatusFieldUpdateOperationsInput | $Enums.ReportStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    asset?: AssetUpdateOneWithoutReportsNestedInput
    category?: CategoryUpdateOneWithoutReportNestedInput
    interventionRequests?: InterventionRequestUpdateManyWithoutReportNestedInput
  }

  export type ReportUncheckedUpdateWithoutReporterInput = {
    id?: IntFieldUpdateOperationsInput | number
    assetId?: NullableIntFieldUpdateOperationsInput | number | null
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumOperationTypeFieldUpdateOperationsInput | $Enums.OperationType
    status?: EnumReportStatusFieldUpdateOperationsInput | $Enums.ReportStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    interventionRequests?: InterventionRequestUncheckedUpdateManyWithoutReportNestedInput
  }

  export type ReportUncheckedUpdateManyWithoutReporterInput = {
    id?: IntFieldUpdateOperationsInput | number
    assetId?: NullableIntFieldUpdateOperationsInput | number | null
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumOperationTypeFieldUpdateOperationsInput | $Enums.OperationType
    status?: EnumReportStatusFieldUpdateOperationsInput | $Enums.ReportStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InterventionRequestUpdateWithoutCreatorInput = {
    title?: StringFieldUpdateOperationsInput | string
    deadline?: StringFieldUpdateOperationsInput | string
    status?: EnumInterventionRequestStatusFieldUpdateOperationsInput | $Enums.InterventionRequestStatus
    notified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedTo?: TechnicianAssignementUpdateManyWithoutInterventionRequestNestedInput
    Interventions?: InterventionsUpdateManyWithoutInterventionRequestNestedInput
    report?: ReportUpdateOneRequiredWithoutInterventionRequestsNestedInput
  }

  export type InterventionRequestUncheckedUpdateWithoutCreatorInput = {
    id?: IntFieldUpdateOperationsInput | number
    reportId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    deadline?: StringFieldUpdateOperationsInput | string
    status?: EnumInterventionRequestStatusFieldUpdateOperationsInput | $Enums.InterventionRequestStatus
    notified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedTo?: TechnicianAssignementUncheckedUpdateManyWithoutInterventionRequestNestedInput
    Interventions?: InterventionsUncheckedUpdateManyWithoutInterventionRequestNestedInput
  }

  export type InterventionRequestUncheckedUpdateManyWithoutCreatorInput = {
    id?: IntFieldUpdateOperationsInput | number
    reportId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    deadline?: StringFieldUpdateOperationsInput | string
    status?: EnumInterventionRequestStatusFieldUpdateOperationsInput | $Enums.InterventionRequestStatus
    notified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScheduleUpdateWithoutSchedulerInput = {
    description?: NullableStringFieldUpdateOperationsInput | string | null
    lastMaintenanceDate?: StringFieldUpdateOperationsInput | string
    frequency?: IntFieldUpdateOperationsInput | number
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    asset?: AssetUpdateOneWithoutSchedulesNestedInput
    category?: CategoryUpdateOneWithoutSchedulesNestedInput
  }

  export type ScheduleUncheckedUpdateWithoutSchedulerInput = {
    id?: IntFieldUpdateOperationsInput | number
    assetId?: NullableIntFieldUpdateOperationsInput | number | null
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    lastMaintenanceDate?: StringFieldUpdateOperationsInput | string
    frequency?: IntFieldUpdateOperationsInput | number
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScheduleUncheckedUpdateManyWithoutSchedulerInput = {
    id?: IntFieldUpdateOperationsInput | number
    assetId?: NullableIntFieldUpdateOperationsInput | number | null
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    lastMaintenanceDate?: StringFieldUpdateOperationsInput | string
    frequency?: IntFieldUpdateOperationsInput | number
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TechnicianAvailabilityCreateManyTechnicianInput = {
    day: $Enums.Day
    startHour: number
    endHour: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TechnicianAssignementCreateManyTechnicianInput = {
    id?: number
    interventionRequestId: number
    locationId?: number | null
    completed?: boolean
    details?: string | null
    createdAt?: Date | string
  }

  export type InterventionsCreateManyTechnicianInput = {
    id?: number
    interventionRequestId: number
    description: string
    createdAt?: Date | string
  }

  export type TechnicianAvailabilityUpdateWithoutTechnicianInput = {
    day?: EnumDayFieldUpdateOperationsInput | $Enums.Day
    startHour?: IntFieldUpdateOperationsInput | number
    endHour?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TechnicianAvailabilityUncheckedUpdateWithoutTechnicianInput = {
    day?: EnumDayFieldUpdateOperationsInput | $Enums.Day
    startHour?: IntFieldUpdateOperationsInput | number
    endHour?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TechnicianAvailabilityUncheckedUpdateManyWithoutTechnicianInput = {
    day?: EnumDayFieldUpdateOperationsInput | $Enums.Day
    startHour?: IntFieldUpdateOperationsInput | number
    endHour?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TechnicianAssignementUpdateWithoutTechnicianInput = {
    completed?: BoolFieldUpdateOperationsInput | boolean
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    interventionRequest?: InterventionRequestUpdateOneRequiredWithoutAssignedToNestedInput
    location?: AssetUpdateOneWithoutAssignementsNestedInput
  }

  export type TechnicianAssignementUncheckedUpdateWithoutTechnicianInput = {
    id?: IntFieldUpdateOperationsInput | number
    interventionRequestId?: IntFieldUpdateOperationsInput | number
    locationId?: NullableIntFieldUpdateOperationsInput | number | null
    completed?: BoolFieldUpdateOperationsInput | boolean
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TechnicianAssignementUncheckedUpdateManyWithoutTechnicianInput = {
    id?: IntFieldUpdateOperationsInput | number
    interventionRequestId?: IntFieldUpdateOperationsInput | number
    locationId?: NullableIntFieldUpdateOperationsInput | number | null
    completed?: BoolFieldUpdateOperationsInput | boolean
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InterventionsUpdateWithoutTechnicianInput = {
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    interventionRequest?: InterventionRequestUpdateOneRequiredWithoutInterventionsNestedInput
  }

  export type InterventionsUncheckedUpdateWithoutTechnicianInput = {
    id?: IntFieldUpdateOperationsInput | number
    interventionRequestId?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InterventionsUncheckedUpdateManyWithoutTechnicianInput = {
    id?: IntFieldUpdateOperationsInput | number
    interventionRequestId?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TechnicianCreateManyProfessionInput = {
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TechnicianUpdateWithoutProfessionInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    availabilities?: TechnicianAvailabilityUpdateManyWithoutTechnicianNestedInput
    user?: UserUpdateOneRequiredWithoutTechnicianDataNestedInput
    TechnicianAssignements?: TechnicianAssignementUpdateManyWithoutTechnicianNestedInput
    Interventions?: InterventionsUpdateManyWithoutTechnicianNestedInput
  }

  export type TechnicianUncheckedUpdateWithoutProfessionInput = {
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    availabilities?: TechnicianAvailabilityUncheckedUpdateManyWithoutTechnicianNestedInput
    TechnicianAssignements?: TechnicianAssignementUncheckedUpdateManyWithoutTechnicianNestedInput
    Interventions?: InterventionsUncheckedUpdateManyWithoutTechnicianNestedInput
  }

  export type TechnicianUncheckedUpdateManyWithoutProfessionInput = {
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}