model Asset {
  id            Int         @id @default(autoincrement())
  locationId    Int?
  categoryId    Int?
  name          String
  inventoryCode String
  status        AssetStatus
  type          AssetType
  image         String?

  subAssets    Asset[]                 @relation("AssetLocation")
  reports      Report[]
  assignements TechnicianAssignement[]

  location Asset?    @relation(fields: [locationId], references: [id], name: "AssetLocation", onDelete: SetNull)
  category Category? @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  schedules Schedule[]
}

model Category {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?
  parentId    Int?

  assets Asset[]

  // Self-relation for category hierarchy
  children Category[] @relation("CategoryChildren")
  parent   Category?  @relation("CategoryChildren", fields: [parentId], references: [id], onDelete: Cascade)

  Report Report[]

  // Relations to closure table
  ancestors   CategoryClosure[] @relation("CategoryAncestors")
  descendants CategoryClosure[] @relation("CategoryDescendants")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  schedules Schedule[]
}

model CategoryClosure {
  ancestorId   Int
  descendantId Int
  depth        Int

  ancestor   Category @relation("CategoryAncestors", fields: [ancestorId], references: [id], onDelete: Cascade)
  descendant Category @relation("CategoryDescendants", fields: [descendantId], references: [id], onDelete: Cascade)

  @@id([ancestorId, descendantId])
}

enum AssetStatus {
  OPERATIONAL
  UNDER_MAINTENANCE
}

enum AssetType {
  SITE
  EQUIPMENT
  ZONE
}

model InterventionRequest {
  id        Int                       @id @default(autoincrement())
  reportId  Int
  title     String
  deadline  String
  status    InterventionRequestStatus
  createdBy Int
  notified  Boolean                   @default(false)

  assignedTo    TechnicianAssignement[]
  Interventions Interventions[]

  report  Report @relation(fields: [reportId], references: [id], onDelete: Cascade)
  creator User   @relation(fields: [createdBy], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
}

model TechnicianAssignement {
  id                    Int                 @id @default(autoincrement())
  technicianId          Int
  interventionRequestId Int
  locationId            Int?
  completed             Boolean             @default(false)
  details               String?
  technician            Technician          @relation(fields: [technicianId], references: [userId], onDelete: Cascade)
  interventionRequest   InterventionRequest @relation(fields: [interventionRequestId], references: [id], onDelete: Cascade)
  location              Asset?              @relation(fields: [locationId], references: [id])

  createdAt DateTime @default(now())
}

model Interventions {
  id                    Int                 @id @default(autoincrement())
  technicianId          Int
  interventionRequestId Int
  description           String
  interventionRequest   InterventionRequest @relation(fields: [interventionRequestId], references: [id], onDelete: Cascade)
  technician            Technician          @relation(fields: [technicianId], references: [userId], onDelete: Cascade)
  createdAt             DateTime            @default(now())
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum InterventionRequestStatus {
  IN_PROGRESS
  COMPLETED
  OVERDUE
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["prismaSchemaFolder"]
  output          = "../generated/client"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Report {
  id          Int           @id @default(autoincrement())
  reporterId  Int
  assetId     Int?
  categoryId  Int?
  description String?
  imageUrl    String?
  type        OperationType
  status      ReportStatus
  priority    Priority

  reporter             User                  @relation(fields: [reporterId], references: [id], onDelete: Cascade)
  asset                Asset?                @relation(fields: [assetId], references: [id])
  category             Category?             @relation(fields: [categoryId], references: [id])
  interventionRequests InterventionRequest[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Schedule {
  id                  Int       @id @default(autoincrement())
  assetId             Int?
  // Admin who created the schedule
  schedulerId         Int
  categoryId          Int?
  description         String?
  lastMaintenanceDate String
  // In days
  frequency           Int
  priority            Priority
  asset               Asset?    @relation(fields: [assetId], references: [id])
  category            Category? @relation(fields: [categoryId], references: [id])
  scheduler           User      @relation(fields: [schedulerId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum OperationType {
  CORRECTIVE
  PREVENTIVE
}

enum ReportStatus {
  PENDING
  ASSIGNED
  CANCELED
  TREATED
}

model User {
  id             Int            @id @default(autoincrement())
  technicianData Technician?
  name           String
  email          String         @unique
  password       String
  avatarUrl      String?
  role           Role           @default(STAFF)
  //If the user is approved by the admin
  approvalStatus ApprovalStatus @default(UNSET)

  notifications Notification[]
  reports       Report[]

  //Admin can create intervention requests
  interventionRequests InterventionRequest[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdSchedules Schedule[]
}

model Technician {
  userId       Int  @id @unique
  professionId Int?

  availabilities TechnicianAvailability[]
  user           User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  profession     Profession?              @relation(fields: [professionId], references: [id], onDelete: SetNull)

  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  TechnicianAssignements TechnicianAssignement[]

  Interventions Interventions[]
}

model Profession {
  id   Int    @id @default(autoincrement())
  name String @unique

  technicians Technician[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TechnicianAvailability {
  technicianId Int
  day          Day
  startHour    Int
  endHour      Int

  technician Technician @relation(fields: [technicianId], references: [userId], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([technicianId, day])
}

model Notification {
  id      Int     @id @default(autoincrement())
  userId  Int
  title   String
  message String
  read    Boolean @default(false)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  STAFF
  TECHNICIAN
  ADMIN
}

enum Day {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

enum ApprovalStatus {
  UNSET
  PENDING
  VALIDATED
}
